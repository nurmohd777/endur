'Environment("driverSheet") = "C:\Users\endurtest\Desktop\ILTR\DriverSheet\QTP_EndurApp_DriverSheet_iltr_Titanuim.xls"
'Environment("driverSheet") = "C:\Users\endurtest\Desktop\ILTR\DriverSheet\QTP_EndurApp_DriverSheet_iltr.xls"
'Environment("driverSheet") = "C:\Users\endurtest\Desktop\ILTR\DriverSheet\QTP_EndurApp_DriverSheet_iltr - Copy.xls" 
'Environment("driverSheet") ="C:\Users\endurtest\Desktop\ILTR\DriverSheet\QTP_EndurApp_DriverSheet_iltr - Copy.xls"
Environment("driverSheet") = "C:\Users\endurtest\Desktop\ILTR\DriverSheet\QTP_EndurApp_DriverSheet_iltr -01.xls"
'Environment("driverSheet") ="C:\Users\endurtest\Desktop\ILTR\DriverSheet\QTP_EndurApp_DriverSheet_iltr_uat5 -update.xls"
Environment("ReportWorkBookCreated")=false 
Environment("reports_path") = ""
'Environment("reportWorkbook_path") = ""
'Environment("screenShot_Path") = ""
Environment("screenShot_Path") = "D:\EndurAutomation\ENDUR\ErrorSnap"
Environment("saveReport")="false"
Environment("currentKeyWord")=""
Environment("appRootPath") = ""
Environment("totalNoOfTestCase")=0
Environment("currentTestCaseNo")=0
Environment("totalNoOfKeywords")=0
Environment("currentkeywordNo")=0
Environment("currentkeywordNo")=0
Environment("TCEndedAt") = 0
Environment("TCStartTimer") = 0
Environment("TCEndTimer") = 0
Environment("SuiteStartedAt") = 0
Environment("SuiteEndedAt") = 0
Environment("reportFlag")=false
Environment("reportFlagDriver")= false
Environment("AbortTestcase") = false
Environment("AbortExecution") = false
Environment("reportWorkbook_path")= "D:\EndurAutomation\ENDUR\ExecutionReports"
'strInterimFilesPath = "D:\EndurAutomation\ENDUR\IntermediateResultFiles"

	'Setting Relative Folders path in Qtp
    Dim appQTP, strAppRoot, arrRoot, strFunctionalLibFolder,strDriverSheetFolder,strReportSheetFolder,intAppRootFolder
	Dim strReferenceIdentifier, strCurrentTestCase
	Dim strConnectionString, strSql, objConn, objTestData, strDataValue


	Set appQTP = GetObject("", "QuickTest.Application")
	Set gobjFilesystem= CreateObject("Scripting.FileSystemObject")
	
    strAppRoot = ""
    arrRoot = Split(appQTP.Test.Location, "\")
	intAppRootFolder = UBound(arrRoot)-2
	For intRoot = 0 To intAppRootFolder
		strAppRoot = strAppRoot & arrRoot(intRoot) & "\"
	Next
	
	strResourceRootPath = Left( strAppRoot, Len(strAppRoot)-1) 
	strFilePathDriver = strResourceRootPath & "\DriverSheet\" & Environment("driverSheet")
	Environment("strResourceRootPath") = strResourceRootPath
	Environment("reports_path")	= Environment("strResourceRootPath") & "\ExecutionReports"
	Environment("reportWorkbook_path")= Environment("reports_path") & "\ExcelReports"
	Environment("screenShot_Path") = Environment("reports_path") & "\ScreenShots"		
	If Not gobjFilesystem.FolderExists(Environment("reportWorkbook_path")) Then
		Call fn_CreateFoldersInThisPath(Environment("reportWorkbook_path"))					
	End If
	If Not gobjFilesystem.FolderExists(Environment("screenShot_Path")) Then
	 Call fn_CreateFoldersInThisPath(Environment("screenShot_Path"))			
	End If
'

	
	Environment("driverSheetPath") = strFilePathDriver
	
	strDriverSheetFolder = strResourceRootPath & "\DriverSheet"
	strFunctionalLibFolder = strResourceRootPath & "\FunctionalLibraries"
	strReportSheetFolder = strResourceRootPath & "\ExecutionReports"
	strRepositoryPath = strResourceRootPath & "\Object Repository"
	strImpFilesPath = strAppRoot & "\ImportantFiles"
	strInterimFilesPath = strAppRoot & "\IntermediateResultFiles"
	
	appQTP.WindowState = "Minimized"	
	
    appQTP.Folders.RemoveAll
	appQTP.Folders.Add strAppRoot, 0
	appQTP.Folders.Add strDriverSheetFolder, 1
    appQTP.Folders.Add strFunctionalLibFolder ,2
	appQTP.Folders.Add strReportSheetFolder, 3

'	Call AssociateObjectRepositories(strRepositoryPath)
 
    strCurrentTestCase = Environment("TestName")
	strTestDataSheet = strCurrentTestCase
	
	folderpath=strResourceRootPath & "\ExecutionReports"
	foldername ="ExcelReports"
	Call  ArchiveAllFolderFiles(folderpath,foldername)
	
	Call DeleteAllIntermediateResults()
        	
	strFilePathDriver = PathFinder.Locate(Environment("driverSheet"))
	'strConnectionStringDriver = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strFilePathDriver + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=2"""
     strConnectionStringDriver = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + strFilePathDriver + ";Extended Properties=""Excel 12.0 Xml;HDR=Yes;IMEX=2"""
	Set objConnDriver = CreateObject("ADODB.Connection")
 	objConnDriver.Open strConnectionStringDriver
	Set objTestDataDriver = CreateObject("ADODB.Recordset")	
	objTestDataDriver.CursorLocation = 3
	strSqlDriver = "SELECT TC_ID from [DriverSheet$] where Execution = 'True'"
	objTestDataDriver.Open strSqlDriver, objConnDriver
	Environment("testDataDriver")=objTestDataDriver
    Environment("totalNoOfTestCase") = objTestDataDriver.RecordCount
	Environment("SuiteStartedAt") = Time()
	Do While Not objTestDataDriver.EOF
		Environment("TCStartTimer") = Int(Timer())
		Environment("TCStartedAt") = Time()
		strTCStartDate = Cstr(Date())

        currentTestCase = objTestDataDriver("TC_ID")
		Environment("currentTestCase")=currentTestCase
		Environment("currentTestCaseNo")=Environment("currentTestCaseNo")+1
    
		Set objKeyWords = CreateObject("ADODB.Recordset")	
		objKeyWords.CursorLocation = 3
		strSql = "SELECT Keywords from ["&currentTestCase&"$] where KeywordExecution = 'True'"
		objKeyWords.Open strSql, objConnDriver
		Environment("totalNoOfKeywords") = objKeyWords.RecordCount

		If objKeyWords.RecordCount = 0 Then
			ReportEvent "", "No Keywords found for the test case " & currentTestCase, "FAIL"
			Environment("reportFlagDriver")=true
		End If

		Environment("currentkeywordNo")=0
		
		Do While Not objKeyWords.EOF
			currentKeyWord = objKeyWords("Keywords")
            Environment("currentKeyWord")=currentKeyWord
            Environment("currentkeywordNo")=Environment("currentkeywordNo")+1

            If Instr(currentKeyWord,"_")>0 Then
				arrkey = Split(currentKeyWord,"_")
				currentKeyWord = arrkey(0)
			End If
			if IsNull(currentKeyWord) Then
				ReportEvent  currentKeyWord, "Empty Keyword encountered in test case " & currentTestCase & " ! ", "FAIL"
				Exit Do
			End If

			On Error resume next
				Err.Clear
				
				Execute currentKeyWord

				If Err.Number <> 0 Then
					ReportEvent currentKeyWord, "Mismatch in Keyword: "  & currentKeyWord & " keyword does not exist", "FAIL"
					Exit Do
				End If

			On Error goto 0

			If Environment("AbortTestcase") = True Then
				ReportEvent currentKeyWord, "Keyword failed because of which the test case execution cannot be continued. Hence Aborted", "FAIL"
				Environment("AbortTestcase") = False
				Exit Do
			End If

			If Environment("AbortExecution") = True Then
				ReportEvent currentKeyWord, "Keyword failed because of which the execution cannot be continued. Hence Aborted", "FAIL"
                Exit Do
			End If
			

			objKeyWords.MoveNext
		Loop
		Call EndTestcase()
		objTestDataDriver.MoveNext

		If Environment("AbortExecution") = True Then
            Environment("AbortExecution") = False
			Exit Do
		End If

	Loop

    Environment("SuiteEndedAt") = Time()

	If Environment("totalNoOfTestCase")=0 Then
		''Call ReportToDriver("")
	End If

	If Environment("reportWorkbook_path")<>"" Then
		Call BuildReportSummarySheet()
	End If
	
    If strMailTo <> "" Then
		Call sendFinalStatusUpdateMail()
	End If
	
	Call ReleaseObjects()
	appQTP.WindowState = "Maximized"
	ExitTest





'********************************************************************************************

	
Sub ReleaseObjects

	'Release all objects
    Set objKeyWords = Nothing
	objTestDataDriver.Close
	objConnDriver.Close
	Set objConnDriver = Nothing
	Set objTestDataDriver = Nothing
	Set oSheet = Nothing
	Set oWB  = Nothing
	Set ObjExcel = Nothing
    SystemUtil.CloseProcessByName("wscript.exe")
	SystemUtil.CloseProcessByName("wscript.exe")
	'SystemUtil.CloseProcessByName("cmd.exe")
	
	Call DeleteAllIntermediateResults()
	
End Sub







'SystemUtil.Run("cmd.exe")

'
'    Nur="C:\Users\endurtest\Desktop\ILTR\Function\EndurGenericFunctions.qfl"
' 
' call SendMailViaBlat("Nur.Mozumder@wellsfargo.com","Hero Nur","Nur")
' 
'Function SendMailViaBlat(strArgMailTo, strArgMailSub, strAttachmentFilePath)
'
'	strMailSub = strArgMailSub & " | Env: " & strPublicEnvName & " | Server: " & Environment("LocalHostName")
'
' 
' strMailSub = strArgMailSub & " | Env: " & strPublicEnvName & " | Server: " & Environment("LocalHostName")
' SystemUtil.Run "cmd.exe","","C:\WINDOWS\system32","open"
'	
'
'	       If Window("win_Cmd").Exist(2) Then
'          	Window("win_Cmd").Activate
'		
'		strBlatFilePath ="D:\OpenLink\Endur_V15_0_01042017WEL_03092017_1144\uat5\blat.exe"
'		
'		strCmdLine = strBlatFilePath & " -to " & strArgMailTo & " -subject " & Chr(34) & strMailSub & Chr(34) & " -server cpowhl.wellsfargo.com -f Nur.Mozumder@wellsfargo.com -body " & Chr(34) & "Please find the result in attached file" & Chr(34) & " -attach " & Chr(34) & strAttachmentFilePath & Chr(34)
'		Window("win_Cmd").Type strCmdLine
'		Window("win_Cmd").Type micReturn
'		
'		
'		Wait(5)
'		Window("win_Cmd").Activate
'		Window("win_Cmd").Close
'		'Window("Wind_CmdPrompt").Activate
'		'Window("Wind_CmdPrompt").Close
'		'Call ReportEvent("Trigger Mail", "Mail sent successfully to the mentioned Stakeholders", "PASS")
'		
'		End  if
'		
'		
'		End  Function


*******************************************************************************************************************************************************************************************************************




*******************************************************************************************************************************************************************************************************************

'Declare Global Variables
Public gobjChildDescription
Public glbParent1,glbParent2,glbParent3,glbObject,objField,glbStatus
'*****************************************************************************************************************



'****************************************************************************************************************************************************************************
'Window Functions
'****************************************************************************************************************************************************************************




Public Function fn_getTextWinComboBox(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinComboBox",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextWinComboBox = objField.getROProperty("text")
				glbStatus = True
        End If

	Else

		If glbParent3.WinComboBox(strObjectName).Exist(5) Then
			fn_getTextWinComboBox = glbParent3.WinComboBox(strObjectName).getROProperty("text")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************






Public Function fn_getTextWinEdit(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinEdit",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextWinEdit = objField.getROProperty("text")
				glbStatus = True
        End If

	Else

		If glbParent3.WinEdit(strObjectName).Exist(5) Then
			fn_getTextWinEdit = glbParent3.WinEdit(strObjectName).getROProperty("text")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************







Public Function fn_getTextWinEditor(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinEditor",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextWinEditor = objField.getROProperty("text")
				glbStatus = True
        End If

	Else

		If glbParent3.WinEditor(strObjectName).Exist(5) Then
			fn_getTextWinEditor = glbParent3.WinEditor(strObjectName).getROProperty("text")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************






Public Function fn_getTextStatic(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("Static",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextStatic = objField.getROProperty("text")
				glbStatus = True
        End If

	Else

		If glbParent3.Static(strObjectName).Exist(5) Then
			fn_getTextStatic = glbParent3.Static(strObjectName).getROProperty("text")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************






Public Function fn_getTextWinListView(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinListView",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextWinListView = objField.getROProperty("all items")
				glbStatus = True
        End If

	Else

		If glbParent3.WinListView(strObjectName).Exist(5) Then
			fn_getTextWinListView = glbParent3.WinListView(strObjectName).getROProperty("all items")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************






Public Function fn_getTextWinObject(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinObject",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextWinObject = objField.getROProperty("text")
				glbStatus = True
        End If

	Else

		If glbParent3.WinObject(strObjectName).Exist(5) Then
			fn_getTextWinObject = glbParent3.WinObject(strObjectName).getROProperty("text")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************






Public Function fn_clickWinObject(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinObject",strObjectName)
		If objField.Exist(5)   Then
				objField.Set strValue
				glbStatus = True
        End If

	Else

		If glbParent3.WinObject(strObjectName).Exist(5) Then
			glbParent3.WinObject(strObjectName).Click
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_clickWinObject = glbStatus

	End If


End Function



'**************************************************************************************************************************




Public Function fn_selectWinComboBox(ByVal strObjectName , ByVal strValue)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinComboBox",strObjectName)
		If objField.Exist(5)   Then
				objField.Set strValue
				glbStatus = True
        End If

	Else

		If glbParent3.WinComboBox(strObjectName).Exist(5) Then
			glbParent3.WinComboBox(strObjectName).Select strValue
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_selectWinComboBox = glbStatus

	End If


End Function



'**************************************************************************************************************************





Public Function fn_setWinEditBox(ByVal strObjectName , ByVal strValue)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinEdit",strObjectName)
		If objField.Exist(5)   Then
				objField.Set strValue
				glbStatus = True
        End If

	Else

		If glbParent3.WinEdit(strObjectName).Exist(5) Then
			glbParent3.WinEdit(strObjectName).Set strValue
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_setWinEditBox = glbStatus

	End If


End Function



'**************************************************************************************************************************






Public Function fn_selectWinCheckBox(ByVal strObjectName , ByVal strValue)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinCheckBox",strObjectName)
		If objField.Exist(5)   Then
				objField.Set Ucase(strValue)
				glbStatus = True
        End If

	Else

		If glbParent3.WinCheckBox(strObjectName).Exist(5) Then
			glbParent3.WinCheckBox(strObjectName).Set UCase(strValue)
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_selectWinCheckBox = glbStatus

	End If


End Function



'**************************************************************************************************************************



Public Function fn_selectWinRadioGroup(ByVal strObjectName , ByVal strValue)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinRadioButton",strObjectName)
		If objField.Exist(5)   Then
				objField.Select strValue
				glbStatus = True
        End If

	Else

		If glbParent3.WinRadioButton(strObjectName).Exist(5) Then
			glbParent3.WinRadioButton(strObjectName).Set UCase(strValue)
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_selectWinRadioGroup = glbStatus

	End If


End Function





'**************************************************************************************************************************


Public Function fn_clickWinButton(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinButton",strObjectName)
		If objField.Exist(5)   Then
			objField.Click
			glbStatus = True
        End If

	Else

		If glbParent3.WinButton(strObjectName).Exist(5) Then
			glbParent3.WinButton(strObjectName).Click
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_clickWinButton = glbStatus

	End If


End Function



'**************************************************************************************************************************


Public Function fn_clickWinRadioButton(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WinRadioButton",strObjectName)
		If objField.Exist(5)   Then
			objField.Click
			glbStatus = True
        End If

	Else

		If glbParent3.WinRadioButton(strObjectName).Exist(5) Then
			glbParent3.WinRadioButton(strObjectName).Click
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_clickWinRadioButton = glbStatus

	End If


End Function

























'****************************************************************************************************************************************************************************
'Web Functions
'****************************************************************************************************************************************************************************




Function fn_ExistWebTable (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("WebTable",strObjectName)
			If objField.Exist(5)   Then
                glbStatus = True
			End If
        Else
			If glbParent3.WebTable(strObjectName).Exist(5) Then
				glbStatus = True
			End If
		
			If Err.Number <> 0 Then
				Err.clear
			End If
			
			fn_ExistWebTable = glbStatus
		End If


End Function





'*****************************************************************************************************************





Function fn_ExistWebList (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("WebList",strObjectName)
			If objField.Exist(5)   Then
                glbStatus = True
			End If
        Else
			If glbParent3.WebList(strObjectName).Exist(5) Then
				glbStatus = True
			End If
		
			If Err.Number <> 0 Then
				Err.clear
			End If
			
			fn_ExistWebList = glbStatus
		End If


End Function





'*****************************************************************************************************************







Function fn_ExistImage (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("Image",strObjectName)
			If objField.Exist(5)   Then
                glbStatus = True
			End If
        Else
			If glbParent3.Image(strObjectName).Exist(5) Then
				glbStatus = True
			End If
		
			If Err.Number <> 0 Then
				Err.clear
			End If
			
			fn_ExistImage = glbStatus
		End If


End Function





'*****************************************************************************************************************


Function fn_ExistLink (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("Link",strObjectName)
			If objField.Exist(5)   Then
                glbStatus = True
			End If
        Else
			If glbParent3.Link(strObjectName).Exist(5) Then
				glbStatus = True
			End If
		
			If Err.Number <> 0 Then
				Err.clear
			End If
			
			fn_ExistLink = glbStatus
		End If


End Function





'*****************************************************************************************************************




Function fn_ExistWebEdit (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("WebEdit",strObjectName)
			If objField.Exist(5)   Then
                glbStatus = True
			End If
        Else
			If glbParent3.WebEdit(strObjectName).Exist(5) Then
				glbStatus = True
			End If
		
			If Err.Number <> 0 Then
				Err.clear
			End If
			
			fn_ExistWebEdit = glbStatus
		End If


End Function





'*****************************************************************************************************************




Function fn_ExistWebElement (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("WebElement",strObjectName)
			If objField.Exist(5)   Then
                glbStatus = True
			End If
		Else
			If glbParent3.WebElement(strObjectName).Exist(5) Then
				glbStatus = True
			End If
		
			If Err.Number <> 0 Then
				Err.clear
			End If
			
			fn_ExistWebElement = glbStatus
		End If


End Function





'*****************************************************************************************************************






Function fn_ClickWebList (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("WebList",strObjectName)
			If objField.Exist(5)   Then
				objField.Click
				glbStatus = True
            End If
		Else
       		If glbParent3.WebList(strObjectName).Exist(5) Then
				glbParent3.WebList(strObjectName).Click
				glbStatus = True
			End If
		
			If Err.Number <> 0 Then
				Err.clear
			End If
			
			fn_ClickWebList = glbStatus
		End If


End Function



'**************************************************************************************************************************


Public Function fn_clickWebElement(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebElement",strObjectName)
		If objField.Exist(5)   Then
				objField.Click
				glbStatus = True
        End If

	Else

		If glbParent3.WebElement(strObjectName).Exist(5) Then
			glbParent3.WebElement(strObjectName).Click
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_clickWebElement = glbStatus

	End If


End Function






'*****************************************************************************************************************





Function fn_ClickLink (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("Link",strObjectName)
			If objField.Exist(5)   Then
				objField.Click
				glbStatus = True
            End If
		Else
       		If glbParent3.Link(strObjectName).Exist(5) Then
				glbParent3.Link(strObjectName).Click
				glbStatus = True
			End If
		
			If Err.Number <> 0 Then
				Err.clear
			End If
			
			fn_ClickLink = glbStatus
		End If


End Function





'*****************************************************************************************************************


Function fn_ClickImage (ByVal strObjectName)

	 'Initialize Variables
	  glbStatus = False

		If Instr(1,strObjectName,"Exl")>0 then
			Call fn_getObject("Image",strObjectName)
			If objField.Exist(5)   Then
				objField.Click
				glbStatus = True
			End If
		Else
       
		If glbParent3.Image(strObjectName).Exist(5) Then
			glbParent3.Image(strObjectName).Click
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
		
		fn_ClickImage = glbStatus
	End If


End Function


'**************************************************************************************************************************

Function fn_SetWebEdit (ByVal strObjectName , ByVal strValue)

	'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebEdit",strObjectName)
		If objField.Exist(5)   Then
				objField.Set(strValue)
				glbStatus = True
        End If

	Else
			
		If glbParent3.WebEdit(strObjectName).Exist(5) Then
			glbParent3.WebEdit(strObjectName).Set strValue
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
		
		fn_SetWebEdit = glbStatus
				
	End If
	
End Function


'**************************************************************************************************************************


Public Function fn_SelectWebList(ByVal strObjectName, ByVal strValue)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebList",strObjectName)
		If objField.Exist(5)   Then
				objField.Select strValue
				glbStatus = True
        End If

	Else

		If glbParent3.WebList(strObjectName).Exist(5) Then
			glbParent3.WebList(strObjectName).Select strValue
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_SelectWebList = glbStatus

	End If


End Function



'**************************************************************************************************************************


Public Function fn_selectCheckBox(ByVal strObjectName , ByVal strValue)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebCheckBox",strObjectName)
		If objField.Exist(5)   Then
				objField.Set Ucase(strValue)
				glbStatus = True
        End If

	Else

		If glbParent3.WebCheckBox(strObjectName).Exist(5) Then
			glbParent3.WebCheckBox(strObjectName).Set UCase(strValue)
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_selectCheckBox = glbStatus

	End If


End Function



'**************************************************************************************************************************


Public Function fn_selectWebRadioGroup(ByVal strObjectName , ByVal strValue)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebRadioGroup",strObjectName)
		If objField.Exist(5)   Then
				objField.Select strValue
				glbStatus = True
        End If

	Else

		If glbParent3.WebRadioGroup(strObjectName).Exist(5) Then
			glbParent3.WebRadioGroup(strObjectName).Select strValue
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_selectWebRadioGroup = glbStatus

	End If


End Function





'**************************************************************************************************************************


Public Function fn_clickWebButton(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebButton",strObjectName)
		If objField.Exist(5)   Then
				objField.Click
				glbStatus = True
        End If

	Else

		If glbParent3.WebButton(strObjectName).Exist(5) Then
			glbParent3.WebButton(strObjectName).Click
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
	
		fn_clickWebButton = glbStatus

	End If


End Function




'**************************************************************************************************************************





Public Function fn_getTextWebList(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebList",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextWebList = objField.getROProperty("value")
				glbStatus = True
        End If

	Else

		If glbParent3.WebList(strObjectName).Exist(5) Then
			fn_getTextWebList = glbParent3.WebList(strObjectName).getROProperty("value")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************



Public Function fn_getTextWebEdit(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebEdit",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextWebEdit = objField.getROProperty("value")
				glbStatus = True
        End If

	Else

		If glbParent3.WebEdit(strObjectName).Exist(5) Then
			fn_getTextWebEdit = glbParent3.WebEdit(strObjectName).getROProperty("value")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************


Public Function fn_getTextWebElement(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebElement",strObjectName)
		If objField.Exist(5)   Then
				fn_getTextWebElement = objField.getROProperty("innertext")
				glbStatus = True
        End If

	Else

		If glbParent3.WebElement(strObjectName).Exist(5) Then
			fn_getTextWebElement = glbParent3.WebElement(strObjectName).getROProperty("innertext")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If


End Function




'**************************************************************************************************************************


Public Function fn_getSelectedWebRadioGroup(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebRadioGroup",strObjectName)
		If objField.Exist(5)   Then
				fn_getSelectedWebRadioGroup = objField.getROProperty("selected item index")
				glbStatus = True
        End If

	Else

		If glbParent3.WebRadioGroup(strObjectName).Exist(5) Then
			fn_getSelectedWebRadioGroup = glbParent3.WebRadioGroup(strObjectName).getROProperty("selected item index")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If

End Function




'**************************************************************************************************************************


Public Function fn_getStatusWebCheckBox(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebCheckBox",strObjectName)
		If objField.Exist(5)   Then
				fn_getStatusWebCheckBox = objField.getROProperty("checked")
				glbStatus = True
        End If

	Else

		If glbParent3.WebCheckBox(strObjectName).Exist(5) Then
			fn_getStatusWebCheckBox = glbParent3.WebCheckBox(strObjectName).getROProperty("checked")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If

End Function




'**************************************************************************************************************************


Public Function fn_getRowCountWebTable(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebTable",strObjectName)
		If objField.Exist(5)   Then
				fn_getRowCountWebTable = objField.getROProperty("rows")
				glbStatus = True
        End If

	Else

		If glbParent3.WebTable(strObjectName).Exist(5) Then
			fn_getRowCountWebTable = glbParent3.WebTable(strObjectName).getROProperty("rows")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If

End Function




'**************************************************************************************************************************


Public Function fn_getColCountWebTable(ByVal strObjectName)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebTable",strObjectName)
		If objField.Exist(5)   Then
				fn_getColCountWebTable = objField.getROProperty("cols")
				glbStatus = True
        End If

	Else

		If glbParent3.WebTable(strObjectName).Exist(5) Then
			fn_getColCountWebTable = glbParent3.WebTable(strObjectName).getROProperty("cols")
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If

End Function




'**************************************************************************************************************************


Public Function fn_getCellDataWebTable(ByVal strObjectName , ByVal intRow , ByVal intColumn)

    'Initialize Variables
	glbStatus = False

	If Instr(1,strObjectName,"Exl")>0 then

		Call fn_getObject("WebTable",strObjectName)
		If objField.Exist(5)   Then
				fn_getCellDataWebTable = objField.GetCellData(intRow , intColumn)
				glbStatus = True
        End If

	Else

		If glbParent3.WebTable(strObjectName).Exist(5) Then
			fn_getCellDataWebTable = glbParent3.WebTable(strObjectName).GetCellData(intRow , intColumn)
			glbStatus = True
		End If
	
		If Err.Number <> 0 Then
			Err.clear
		End If
      
	End If

End Function






'******************************************************************************************************************************************************
'******************************************************************************************************************************************************
'******************************************************************************************************************************************************


Public Function fn_ParentReference(ByVal strAppType, ByVal strParent1, ByVal strParent2, ByVal strParent3)

	fn_ParentReference = False
   
	If InStr(strAppType,"Web")>0 Then

		If strParent1 <> "" Then
        	Set glbParent1 = Browser(strParent1)
        End If	

		If strParent2 <> "" Then
        	Set glbParent2 = glbParent1.Page(strParent2)
        End If
    
		If strParent3 <> "" Then
			Set glbParent3 = glbParent2.Frame(glbParent3)
		End If

	ElseIf InStr(strAppType,"Win")>0 Then

		If strParent1 <> "" Then
        	Set glbParent1 = Window(strParent1)
		End If
        		
		If strParent2 <> "" Then
        	Set glbParent2 = glbParent1.Dialog(strParent2)
		End If
        
		If strParent3 <> "" Then
			Set glbParent3 = glbParent2.WinObject(glbParent3)
		End If

	End If

	If strParent3 = "" Then
		If glbParent2.Exist Then
			Set glbParent3 = glbParent2
			fn_ParentReference = True
		End If
	Else
		If glbParent3.Exist Then
			fn_ParentReference = True
		End If
	End If
	
		
End Function





'****************************************************************************************************************************
'This Function Gets Object's Property From Excel Sheet
'****************************************************************************************************************************

Function fn_getObject(ByVal ObjectType, ByVal ObjectName)


			'Declaring Variables
      Dim strExcelSheet,strFilePath,strConnectionString
      Dim objExcelConn,objExcelData,strSql
            
		'Initializing the Variables
		blnCompare = False
		strExcelSheet = ObjectType
        strFilePath = PathFinder.Locate("Object Repository\Endure_DescriptiveOR.xls")
		strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=2"""
      
      'Connecting to 'Validations' excel sheet 
      Set objExcelConn = CreateObject("ADODB.Connection")
      objExcelConn.Open strConnectionString
      Set objExcelData = CreateObject("ADODB.Recordset")
      objExcelData.CursorLocation = 3
      strSql = "SELECT * from [" & strExcelSheet & "$] where ObjectName='"& ObjectName &"'"
      objExcelData.Open strSql, objExcelConn
      objExcelData.MoveFirst
      While Not objExcelData.EOF
            
            'Fetching the values from Excel Sheet
            glbParent1 = Trim(objExcelData("Parent1").Value)
            glbParent2 = Trim(objExcelData("Parent2").Value)
			glbParent3 = Trim(objExcelData("Parent3").Value)
			glbObject = Trim(objExcelData("Properties").Value)
			If Err.Number = 0 Then
				blnCompare = True
			End If
			objExcelData.MoveNext

      Wend

      objExcelData.Close
      Set objExcelConn = Nothing
      Set objExcelData = Nothing
            
	If  glbParent1<> "" Then
		arrParent1Property = Split(glbParent1,",")
		For intCount = 0 to UBound(arrParent1Property)
			strGetData = Split(arrParent1Property(intCount),":=")(1)
			arrParent1Property(intCount) = Split(arrParent1Property(intCount),":=")(0) & ":=" & strGetData
		Next
		strParent1Name = Join(arrParent1Property,Chr(34) & "," & Chr(34))
	End If
	
	If  glbParent2<> "" Then
		arrParent2Property = Split(glbParent2,",")
		For intCount = 0 to UBound(arrParent2Property)
			strGetData = Split(arrParent2Property(intCount),":=")(1)
			arrParent2Property(intCount) = Split(arrParent2Property(intCount),":=")(0) & ":=" & strGetData
		Next
		strParent2Name = Join(arrParent2Property,Chr(34) & "," & Chr(34))
	End If

	If  glbParent3<> "" Then
		arrParent3Property = Split(glbParent3,",")
		For intCount = 0 to UBound(arrParent3Property)
			strGetData = Split(arrParent3Property(intCount),":=")(1)
			arrParent3Property(intCount) = Split(arrParent3Property(intCount),":=")(0) & ":=" & strGetData
		Next
		strParent3Name = Join(arrParent3Property,Chr(34) & "," & Chr(34))
	End If

	If  glbObject<> "" Then
		arrObjectProperty = Split(glbObject,",")
		For intCount = 0 to UBound(arrObjectProperty)
			strGetData = Split(arrObjectProperty(intCount),":=")(1)
			arrObjectProperty(intCount) = Split(arrObjectProperty(intCount),":=")(0) & ":=" & strGetData
		Next
		strObjectName = Join(arrObjectProperty ,Chr(34) & "," & Chr(34))
	End If

	If InStr(glbParent1,"Browser")>0 Then
		If  glbParent3<> "" Then
			Set objField = Eval("Browser(" & chr(34) & strParent1Name & chr(34) & ").Page(" & chr(34) & strParent2Name & chr(34) &  ").Frame(" & chr(34) & strParent3Name & chr(34) & ")." & ObjectType & "(" & chr(34) & strObjectName & chr(34) & ")")
		Else
			Set objField = Eval("Browser(" & chr(34) & strParent1Name & chr(34) & ").Page(" & chr(34) & strParent2Name & chr(34) & ")." & ObjectType & "(" & chr(34) & strObjectName & chr(34) & ")")
		End If
	ElseIf InStr(glbParent1,"Window")>0 Then
		If  glbParent3<> "" Then
			Set objField = Eval("Window(" & chr(34) & strParent1Name & chr(34) & ").Dialog(" & chr(34) & strParent2Name & chr(34) &  ").Win(" & chr(34) & strParent3Name & chr(34) & ")." & ObjectType & "(" & chr(34) & strObjectName & chr(34) & ")")
		Else
			Set objField = Eval("Window(" & chr(34) & strParent1Name & chr(34) & ").Dialog(" & chr(34) & strParent2Name & chr(34) & ")." & ObjectType & "(" & chr(34) & strObjectName & chr(34) & ")")
   		End If
	End If

	
    

	
End Function
'****************************************************************************************************************************
'****************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: fn_CloseAnyOpenBrowsers
' Purpose				: Kill all th existing browsers
' Author				: 
' Parameters			: NA
' Return Values			: 
'*******************************************************************************
Sub fn_CloseAnyOpenBrowsers()

	'Declare Variables
      Dim arrBrowser
      Dim intBrowserArray,intCount
	Dim oDesc, x
	 
	'Initialize the Variables
	arrBrowser = Array("iexplore.exe", "firefox.exe", "chrome.exe")
	intBrowserArray = Ubound(arrBrowser)

	'Closing any browsers that were previously opened (IE, FireFox or Chrome)
	For intCount = 0 to intBrowserArray            
            SystemUtil.CloseProcessByName arrBrowser(intCount)
	Next
End Sub


******************************************************************************************************************************************************************************************


end of Appt funtion 
*******************************************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: WaitForObject
' Purpose					: Wait for a Object till  it exist in the application
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function WaitForObject(Object,intTime)
	
    counter = 0
    Do while Object.Exist(1) = False  And  counter<CInt(intTime)
        counter=counter+1
	Loop
	If   Object.Exist(1) = False Then

		strObject = Object.getTOProperty("TestObjName")
		If strObject="" Then
			strObject = Object.getTOProperty("regexpwndtitle")
		End If
		If strObject="" Then
			strObject = Object.getTOProperty("swfname")
		End If
        Call ReportEvent("Object Existence","Object " & chr(34) & strObject & chr(34) & " does not exist even after waiting for " & intTime & " seconds","Fail")
        		
	End If
    
End Function




'*******************************************************************************************************************************





'*******************************************************************************
' Function/Procedure Name	: fn_ClickOnMainMenuObject
' Purpose					: Clicks on the given Endur Main menu item
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function fn_ClickOnMainMenuObject(menuObjName)

	Dim itemPos : itemPos = -1
	Dim NoOfTimesScroll
	Dim posDict

	Set posDict = CreateObject("Scripting.Dictionary")
	posDict.Add "Services Mgr", 12
	posDict.Add "Trading Manager", 1
	posDict.Add "Operations", 5
	posDict.Add "Reference", 8
	posDict.Add "Admin", 7
	posDict.Add "Refresh", 20
	SwfWindow("Window_EndurMainWindow").Activate
	SwfWindow("Window_EndurMainWindow").highlight
	For i = 0 to 16
		If NOT SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_ScrollBar_MainWindow").Exist(2) Then
			Wait 3
		End If
		If SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_ScrollBar_MainWindow").Exist(2) Then
		    SwfWindow("Window_EndurMainWindow").Activate
			SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_ScrollBar_MainWindow").Click  11,3
		Else
			Call ReportEvent(Environment("currentKeyWord"), "Unable to recognize ScrollBar object in Main window" ,"FAIL")
			SwfWindow("Window_EndurMainWindow").Activate
			SwfWindow("Window_EndurMainWindow").highlight
			Environment("AbortTestcase") = True
		End If
	Next

	For each mykey in posDict
		If mykey = menuObjName Then
			itemPos = posDict.Item(mykey)
			Exit For
		End If
	Next
	
	If itemPos = -1 Then
		Call ReportEvent(Environment("currentKeyWord"), "Main Menu item " & menuObjName & " not found" ,"FAIL")
		Environment("AbortTestcase") = True

	Else
		If itemPos <= 7 Then
			NoOfTimesScroll = 0
		else
			NoOfTimesScroll = itemPos - 7
		End If

		SwfWindow("Window_EndurMainWindow").SwfObject("SwfObject_MenuItem_MainWindow").SetTOProperty "text", menuObjName

		For i = 0 to NoOfTimesScroll - 1
			If NOT SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_ScrollBar_MainWindow").Exist(2) Then
				Wait 3
			End If
			If SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_ScrollBar_MainWindow").Exist(2) Then
				SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_ScrollBar_MainWindow").Click 524,4
			Else
				Call ReportEvent(Environment("currentKeyWord"), "Unable to recognize ScrollBar object in Main window" ,"FAIL")
				Environment("AbortTestcase") = True
			End If
		Next
		
		If NOT SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_MenuItem_MainWindow").Exist(2) Then
			Wait 3
		End If
		If SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_MenuItem_MainWindow").Exist(2) Then
			SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_MenuItem_MainWindow").Click 37,19
		Else
			Call ReportEvent(Environment("currentKeyWord"), "Unable to recognize Menu Item " & Chr(34) & menuObjName & Chr(34) & " in Main window" ,"FAIL")
			Environment("AbortTestcase") = True			
		End If
		
	End If

End Function

'*****************************************************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: SendMail
' Purpose					: Send mail to a given recipients
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function SendMail(strToList, strSubject, strMailBody, strAttachFile)

    On Error Resume Next
	Dim objOutlookApp, objOutMail
	Dim strFilePath
	olMailItem = 0
	Set objOutlookApp = CreateObject("Outlook.Application")
	Set objOutMail = objOutlookApp.CreateItem(olMailItem)
	If Instr(strAttachFile,"xlsx")>0 Then
		strFilePath = strAttachFile
	Else
    		strFilePath = strAttachFile & ".xlsx"
	End If
	
      	objOutMail.to = strToList
		objOutMail.Subject = strSubject
		If Instr(strSubject,"FAIL")>0 Or Instr(strSubject,"SUCCEED")>0 Or Instr(strSubject,"CDBO")>0 Then
			objOutMail.Body = strMailBody
		Else
			objOutMail.BodyFormat = 2 
			objOutMail.HtmlBody = strMailBody
		End If
		If strAttachFile<>"" Then
			objOutMail.Attachments.Add strFilePath
		End If
        objOutMail.Send
    
	Set objOutMail = Nothing
	Set objOutlookApp = Nothing

	If strAttachFile="" Then
		Call ReportEvent("Send Mail","Mail is sent to the stakeholders successfully with subject "& chr(34) & strSubject & chr(34),"PASS")
    End If

End Function





'*******************************************************************************
' Function/Procedure Name	: MapIPAddress
' Purpose					: Get the ip Address of the server for locating the log file
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function mapIPAddress(strDispatcherName)

   Set IpDict = CreateObject("Scripting.Dictionary")
	IpDict.Add "UAT 0490","167.143.96.245"
    IpDict.Add "UAT 0491","167.143.96.244"
	IpDict.Add "UAT 0492","167.143.96.243"
	IpDict.Add "UAT 0493","167.143.96.203"
	IpDict.Add "UAT 0494","167.143.96.202" 	
	IpDict.Add "UAT 0495","167.143.96.201"
	IpDict.Add "WCV A94", "10.114.137.46"
	IpDict.Add "WCV A95", "10.114.137.47"
	IpDict.Add "WCV A96", "10.114.137.48"
	IpDict.Add "WCV A97", "10.114.137.49"
	IpDict.Add "WCV A98", "10.114.137.50"
	IpDict.Add "WCV A99", "10.114.137.51"

    mapIPAddress = IpDict.Item(strDispatcherName)

End Function







'************************************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: SendFailureReport
' Purpose					: Send the report when the job fails
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function SendFailureReport(strJobName,strMailTo,strMailSubject,strLogFilePath)

'    strMailTo = GetData("TrackRunningJobs","MailTo")
'	strMailSubject = GetData("TrackRunningJobs","MailSubject")
    mailSubject = strMailSubject & " --- " & strJobName & "  FAILED"
    
    If flagiLTRJobsFailed Then
    	strStartTime = dictRerunJobsStartTime.Item(strJobName)
    	strEndTime = dictRerunJobsEndTime.Item(strJobName)
    Else
    	strStartTime = dictJobStartTime.Item(strJobName)
    	strEndTime = dictJobEndTime.Item(strJobName)
    End If

	Call ReadLogFile(strJobName,strLogFilePath)

	strMailBody = "The Job "& chr(34) & strJobName & chr(34) &" --------- FAILED " & vbNewLine & "Job WorkFlow Name  : " & dictWorkflowName(strJobName) & vbNewLine & "Job Start Time                : "& strStartTime &vbNewLine& "Job End Time                  : "& strEndTime & vbNewLine& "Dispatcher Name          : "& dictJobDispatcher.Item(strJobName)
'	If tempFlagMemoryException = true then
'		strMailBody = strMailBody & vbNewLine & vbNewLine & "This job failed due to Memory Exception , It will be executed again through Trading Manager once all the jobs are executed" &vbNewLine&vbNewLine&" Please find the error logs below  : " & vbNewLine & vbNewLine & vbNewLine & strErrorLogs
'	Else
		strMailBody = strMailBody & vbNewLine&vbNewLine&" Please find the error logs below  : " & vbNewLine & vbNewLine & GetData(Environment("currentKeyWord"),"LogFilePath") & vbNewLine & vbNewLine & strErrorLogs
'	End If

	If  strErrorLogs<>"" Then
		Call ReportEvent("Send Failure Report","The error logs are fetched successfully from the Server machine ","PASS")
	Else
		Call ReportEvent("Send Failure Report","The error logs are not fetched successfully from the Server machine","FAIL")
	End If

	If Instr(LCase(Environment("driverSheet")), "_iltr.xls")>0 Then
		Set oFSO = CreateObject("Scripting.FileSystemObject")
		strFileName = strInterimFilesPath & "\" & strJobName & "_FAILED.txt"
		Set oFile = oFSO.CreateTextFile(strFileName, True)
		oFile.Write(strMailBody)
		oFile.Close
		
		Call SendMailViaBlat(strMailTo, mailSubject, strFileName)
	Else
		'Call SendMail(strMailTo,mailSubject,strMailBody,"")
		Set oFSO = CreateObject("Scripting.FileSystemObject")
		strFileName = strInterimFilesPath & "\" & strJobName & "_FAILED.txt"
		Set oFile = oFSO.CreateTextFile(strFileName, True)
		oFile.Write(strMailBody)
		oFile.Close
		
		Call SendMailViaBlatEndur(strMailTo, mailSubject,strFileName)
	End If
	

End Function



'**********************************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: ReadLogFile
' Purpose					: It redas the log file and fetches the error message
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function ReadLogFile(strJobName,ByVal strTempLogFilePath)

	Wait (5)
	On Error resume Next
'	strLogFilePath = GetData("TrackRunningJobs","LogFilePath")
	strLogBody = ""

	tempFlagMemoryException = false
    strDispatcher = dictJobDispatcher.Item(strJobName)
	strLogFileName = dictLogFileName.Item(strDispatcher)

'	If Instr(strDispatcher,"-")>0 Then
'		arrDispatcherLocal = Split(strDispatcher,"-")
'		strDispatcherLocal = MultilineTrim(arrDispatcherLocal(0))
'	Else
'		strDispatcherLocal = strDispatcher
'	End If
'
	'strIpAddress = mapIPAddress(strDispatcherLocal)
	If instr(strDispatcher,"94") > 0  Then
		strIpAddress="162.111.178.169"
     elseIf instr(strDispatcher,"95") > 0  Then
        strIpAddress="162.111.178.168"
     elseIf instr(strDispatcher,"96") > 0  Then
        strIpAddress="162.111.178.167"
     elseIf instr(strDispatcher,"97") > 0  Then
        strIpAddress="162.111.178.166"
      elseIf instr(strDispatcher,"98") > 0  Then
        strIpAddress="162.111.178.165" 
      elseIf instr(strDispatcher,"99") > 0  Then
       strIpAddress="162.111.178.164"
     End If
	strCurrIPAddress = fn_GetThisSystemIPAddress()
	
	If CStr(strIpAddress) <> CStr(strCurrIPAddress) Then
		strTempLogFilePath = "\\" & strIpAddress & "\" & strTempLogFilePath & "\" & strLogFileName & ".log"
	Else
		strTempLogFilePath ="D:\OpenLink\uat5\outdir\error_logs\" & strLogFileName & ".log"
	End If
	
	
    Set fso = CreateObject("Scripting.FileSystemObject")

	strYear = Year(now)
	strMonth = Left(MonthName(Month(Date)),3)
	strDate = day(Date)
	If  day(Date)<10 Then
		strDate = "0"&day(Date)
	End If
    
	strDateFind = strDate&" "&strMonth&" "&strYear
	
	If flagiLTRJobsFailed Then
		strFailedJobEndTime = dictRerunJobsEndTime.Item(strJobName)
	Else
		strFailedJobEndTime = dictJobEndTime.Item(strJobName)
	End If
	
	strHourTime = Mid(strFailedJobEndTime,1,2)
	strMinTime = 0
	If  InStr(strHourTime,":")>0 Then
		strHourTime = "0" & Left(strHourTime,1)
		strMinTime = CInt(Trim(Mid(strFailedJobEndTime,3,2)))
	Else
		strMinTime = CInt(Trim(Mid(strFailedJobEndTime,4,2)))
	End If
	If Instr(strFailedJobEndTime,"pm")>0 And strHourTime <> "12" Then
		strHourTime = CInt(strHourTime)+12
	End If
	strTimeStart = strDateFind & " " & strHourTime & ":" & strMinTime
	strTimeEnd = strDateFind & " " & strHourTime & ":" & strMinTime+1

    'Set fileObject = fso.OpenTextFile(strTempLogFilePath,1)
    Set fileObj = fso.GetFile(strTempLogFilePath)
    
    Wait 1
    
    Set oFile = fileObj.OpenAsTextStream(1, 0)
    strLogBody = oFile.Read(fileObj.Size)
    
    oFile.Close
    Set oFile = Nothing
    Set fileObj = Nothing
    
	'strLogBody = fileObject.ReadAll
	'fileObject.Close : Set fileObject = Nothing

	If strLogBody <> "" Then
    	IntStartPos = Instr(strLogBody,strTimeStart)
		IntEndPos   = Instr(strLogBody,strTimeEnd)
		
		If IntStartPos = 0 Then
			Set fileObj = fso.GetFile(strTempLogFilePath)
		    Wait 1
		    Set oFile = fileObj.OpenAsTextStream(1, 0)
		    strLogBody = oFile.Read(fileObj.Size)
		    
		    oFile.Close
		    Set oFile = Nothing
		    Set fileObj = Nothing
		    
		    IntStartPos = Instr(strLogBody,strTimeStart)
		End If
		If Not IntEndPos>0  Then
			IntEndPos = Len(strLogBody)
		End If
		noOfChar = IntEndPos-IntStartPos
		strTempErrorLogs = Mid(strLogBody,IntStartPos,noOfChar)
		'If InStr(strTempErrorLogs,"EXIT_Fail")>0 Or InStr(strTempErrorLogs,"OutOfMemoryError")>0 Or InStr(strTempErrorLogs,"exceeded user defined memory size")>0 Then
'			Redim Preserve arrMemoryExceptionJobs(intMemoryExceptionJobsSize)
'			flagMemoryException = True
'			tempFlagMemoryException = true
'			arrMemoryExceptionJobs(intMemoryExceptionJobsSize-1) = strJobName
'			intMemoryExceptionJobsSize = intMemoryExceptionJobsSize+1
		'End If
		
		

		Call readErrorLinesFromLog(strTempErrorLogs)

		If strErrorLogs = "" Then
			strErrorLogs = strTempErrorLogs 
		End If


	Else
		Call ReportEvent("Read Error Log","The error log file is not read successfully from the Server machine","FAIL")
	End If


End Function


'**********************************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: readErrorLinesFromLog
' Purpose					: It reads the error log and fetches the error message
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function readErrorLinesFromLog(strTempErrorLogs)

	Set fsoTemp=createobject("Scripting.FileSystemObject")
	'strTempLogPath = Environment("strResourceRootPath") & "\ImportantFiles\TempLog.txt"
	strTempLogPath ="D:\EndurAutomation\ENDUR\Importantfiles\TempLog.txt"
	Set textfile=fsoTemp.CreateTextFile(strTempLogPath,True,False) 
	textfile.Write(strTempErrorLogs)
	textfile.Close

	strErrorLogs = ""
	Set fileObject = fsoTemp.OpenTextFile(strTempLogPath,1)
'    Do Until fileObject.AtEndOfStream
'		strLogLine = fileObject.ReadLine
'		If InStr(strLogLine,"ERROR")>0  Or InStr(strLogLine,"EXIT_Fail")>0 Or InStr(strLogLine,"OutOfMemoryError")>0 Or InStr(strLogLine,"exceeded user defined memory size")>0 Then
'			strErrorLogs = strErrorLogs & strLogLine & vbNewline
'		End If
'	Loop
	
	If strErrorLogs = "" Then
		strErrorLogs = strTempErrorLogs
	End If
		
End Function


'*******************************************************************************
' Function/Procedure Name	: SendSuccessReport
' Purpose					: Send the report when the job Succeed
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function SendSuccessReport(strJobName,strMailTo,strMailSubject)

'    strMailTo = GetData("TrackRunningJobs","MailTo")
'	strMailSubject = GetData("TrackRunningJobs","MailSubject")
	mailSubject = strMailSubject & " --- " & strJobName & " SUCCEEDED"
    
	strMailBody = "The Job "& chr(34) & strJobName & chr(34) &"  --------- SUCCEEDED " & vbNewLine&"Job WorkFlow Name  : " & dictWorkflowName.Item(strJobName) & vbNewLine& "Job Start Time               : "& dictJobStartTime.Item(strJobName) &vbNewLine& "Job End Time  : "& dictJobEndTime.Item(strJobName) & vbnewLine & "Job Dispatcher : " & strDispatcherName
	
	'Call SendMail(strMailTo,mailSubject,strMailBody,"")	
     	Set oFSO = CreateObject("Scripting.FileSystemObject")
		strFileName = strInterimFilesPath & "\SuccessStatusUpdate.htm"
		Set oFile = oFSO.CreateTextFile(strFileName, True)
		oFile.Write(strMailBody)
		oFile.Close
		
		Call SendMailViaBlatEndur(strMailTo, mailSubject,strFileName)
End Function




'*****************************************************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: sendStatusUpdateMail
' Purpose					: Send the report when the job is running
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function sendStatusUpdateMail(strMailTo,strMailSubject, strJobsTracked)

'    strMailTo = GetData("TrackRunningJobs","MailTo")
'	strMailSubject = GetData("TrackRunningJobs","MailSubject")
	
	mailSubject = strMailSubject & " --- STATUS UPDATE" 
	str = "<table border = " & chr(34) & "1" & chr(34) & " style = " & chr(34) & "width : 100%" & chr(34) & "><tr><td><b/>JobName</td><td><b/>Status</td><td><b/>Dispatcher</td><td><b/>Last Start</td><td><b/>Last End</td></tr>"

	For each jobName in dictJobStatus.Keys
		If Instr(strJobsTracked, "," & jobName & ",")>0 Then
		
			If flagiLTRJobsFailed Then
				jobStatus = dictRerunJobsStatus.Item(jobName)
				jobStartTime = dictRerunJobsStartTime.Item(jobName)
				jobEndTime = dictRerunJobsEndTime.Item(jobName)
			Else
				jobStatus = dictJobStatus.Item(jobName)
				jobStartTime = dictJobStartTime.Item(jobName)
				jobEndTime = dictJobEndTime.Item(jobName)
			End If
			dispatcherName = dictJobDispatcher.Item(jobName)
			str = str & "<tr><td>"&jobName & "</td><td>"& jobStatus &"</td><td>"& dispatcherName &"</td><td>"& jobStartTime &"</td><td>"& jobEndTime & "</td></tr>"
		End If
	Next

	strMailBody = "<HTML><BODY>" & strMailBody & str & "</table></BODY></HTML>"
	
	If Instr(LCase(Environment("driverSheet")), "_iltr.xls")>0 Then
		intTrackCounter = intTrackCounter + 1
		Set oFSO = CreateObject("Scripting.FileSystemObject")
		strFileName = strInterimFilesPath & "\StatusUpdate_" & intTrackCounter & ".htm"
		
		Set oFile = oFSO.CreateTextFile(strFileName, True)
		oFile.Write(strMailBody)
		oFile.Close
		
		Call SendMailViaBlat(strMailTo, mailSubject, strFileName)
	Else
	     intTrackCounter = intTrackCounter + 1
		Set oFSO = CreateObject("Scripting.FileSystemObject")
		strFileName = strInterimFilesPath & "\StatusUpdate_" & intTrackCounter & ".htm"
		
		Set oFile = oFSO.CreateTextFile(strFileName, True)
		oFile.Write(strMailBody)
		oFile.Close
		'Call SendMail(strMailTo,mailSubject,strMailBody,"")
		Call SendMailViaBlatEndur(strMailTo, mailSubject,strFileName)
	End If	

End Function





'*****************************************************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: sendFinalStatusUpdateMail
' Purpose					: Send the final report when the job is running
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function sendFinalStatusUpdateMail()

	oWB.WorkSheets(Environment("currentTestCase")).Activate
	Wait 1
	
	mailSubject = strMailSubject & " --- FINAL STATUS UPDATE" 
	str = "<table border = " & chr(34) & "1" & chr(34) & " style = " & chr(34) & "width : 100%" & chr(34) & "><tr><td><b/>JobName</td><td><b/>Status</td><td><b/>Dispatcher</td><td><b/>Last Start</td><td><b/>Last End</td></tr>"

		For each jobName in dictJobStatus.Keys
			jobStatus = dictJobStatus.Item(jobName)
			dispatcherName = dictJobDispatcher.Item(jobName)
			jobStartTime = dictJobStartTime.Item(jobName)
			jobEndTime = dictJobEndTime.Item(jobName)
			str = str & "<tr><td>"&jobName & "</td><td>"& jobStatus &"</td><td>"& dispatcherName &"</td><td>"& jobStartTime &"</td><td>"& jobEndTime & "</td></tr>"
		Next

	strMailBody = "<HTML><BODY>" & strMailBody & str & "</table></BODY></HTML>"
	
	If Instr(LCase(Environment("driverSheet")), "_iltr.xls")>0 Then
		Set oFSO = CreateObject("Scripting.FileSystemObject")
		strFileName = strInterimFilesPath & "\FinalStatusUpdate.htm"
		Set oFile = oFSO.CreateTextFile(strFileName, True)
		oFile.Write(strMailBody)
		oFile.Close
		
		strFileName=Environment("reportWorkbook_path")&".xlsx"
		
		Call SendMailViaBlat(strMailTo, mailSubject, strFileName)
	Else
		'Call SendMail(strMailTo,mailSubject,strMailBody,Environment("reportWorkbook_path"))
		Set oFSO = CreateObject("Scripting.FileSystemObject")
		strFileName = strInterimFilesPath & "\FinalStatusUpdate.htm"
		Set oFile = oFSO.CreateTextFile(strFileName, True)
		oFile.Write(strMailBody)
		oFile.Close
		strFileName=Environment("reportWorkbook_path")&".xlsx"
		
		
		Call SendMailViaBlatEndur(strMailTo, mailSubject,strFileName)
	End If
	

End Function




'*****************************************************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: GetTimeDifference
' Purpose					: It finds the time difference between the job failed time and the time rejistered in log  file , also between the start and end time of a successful job
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function GetTimeDifference(strJobName,strLogTime)

	If strLogTime=strJobName Then
		
		jobStartTime = dictJobStartTime.Item(strJobName)
		If jobStartTime<>"" Then
        	strTempTime = Mid(jobStartTime,1,2)
			strTime1 = strTempTime
			If  InStr(strTempTime,":")>0 Then
				strTime1 = "0"&Left(strTempTime,1)
			End If
			
			If Instr(jobStartTime,"pm")>0 And strTime1 <> 12 Then
				strTime1 = strTime1+12
			End If
			intColonPos = Instr(jobStartTime,":") 
			strTempTime = Mid(jobStartTime,intColonPos,3)
			strTime1 = strTime1&strTempTime&":00"
		Else
			Call ReportEvent("Get Time Difference","The Start time for the job " & Chr(34) & strJobName & Chr(34) & " is not recorded correctly","FAIL")
		End If
	Else
		strTime1 = strLogTime
	End If

	jobEndTime = dictJobEndTime.Item(strJobName)
	If jobEndTime<>"" Then
		strTempTime = Mid(jobEndTime,1,2)
		strTime2 = strTempTime
		If  InStr(strTempTime,":")>0 Then
			strTime2 = "0"&Left(strTempTime,1)
		End If
		
		If Instr(jobEndTime,"pm")>0 And strTime2 <> 12 Then
			strTime2 = strTime2+12
		End If
		intColonPos = Instr(jobEndTime,":") 
		strTempTime = Mid(jobEndTime,intColonPos,3)
		strTime2 = strTime2&strTempTime&":00"
	Else
		Call ReportEvent("Get Time Difference","The End time for the job " & Chr(34) & strJobName & Chr(34) & " is not recorded correctly","FAIL")
	End If

	
	
	GetTimeDifference = dateDiff("s",strTime1,strTime2)	

End Function




'**********************************************************************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: fn_SelectRadioGroupsToEdit
' Purpose					: Clicks on the given Endur Main menu item
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function fn_SelectRadioGroupsToEdit(radioButtonName)

	Set posDict = CreateObject("Scripting.Dictionary")
	posDict.Add "BusinessUnits", 0
	posDict.Add "LegalEntities", 1
	posDict.Add "Portfolios", 2
	posDict.Add "SecurityGroups", 3
	posDict.Add "SecuredIndex", 4
	posDict.Add "FunctionalGroups", 5
	posDict.Add "UserDefaults", 6
	posDict.Add "PersonalInformation", 7
	posDict.Add "TradingLocations", 8

	strRadioName = "ref_personnel_editor.win.pfolio_sec_grp_select_panel#2.sec_grp_rbut#"&posDict.Item(radioButtonName)&"%"&radioButtonName
	Win("Win_PersonalEditor").RBut("Radio_SecurityGroups").SetTOProperty "name",strRadioName
	Win("Win_PersonalEditor").RBut("Radio_SecurityGroups").Click "On"
	
	If Not selectedColumnNameDict.Exists("BusinessUnits") Then
		selectedColumnNameDict.Add "BusinessUnits", "Selected Business Units"
		selectedColumnNameDict.Add "LegalEntities", "Selected Legal Entities"
		selectedColumnNameDict.Add "Portfolios", "Selected Portfolios"
		selectedColumnNameDict.Add "SecurityGroups", "Selected Security Groups"
		selectedColumnNameDict.Add "SecuredIndex", "Selected Secured Index"
		selectedColumnNameDict.Add "FunctionalGroups", "Selected Functional Groups"
		selectedColumnNameDict.Add "UserDefaults", "Selected User Defaults"
		selectedColumnNameDict.Add "PersonalInformation", "Selected Personal Information"
		selectedColumnNameDict.Add "TradingLocations", "Selected Trading Locations"
	End If
	If Not availableColumnNameDict.Exists("BusinessUnits") Then
		availableColumnNameDict.Add "BusinessUnits", "Available Business Units"
		availableColumnNameDict.Add "LegalEntities", "Available Legal Entities"
		availableColumnNameDict.Add "Portfolios", "Available Portfolios"
		availableColumnNameDict.Add "SecurityGroups", "Available Security Groups"
		availableColumnNameDict.Add "SecuredIndex", "Available Secured Index"
		availableColumnNameDict.Add "FunctionalGroups", "Available Functional Groups"
		availableColumnNameDict.Add "UserDefaults", "Available User Defaults"
		availableColumnNameDict.Add "PersonalInformation", "Available Personal Information"
		availableColumnNameDict.Add "TradingLocations", "Available Trading Locations"
	End If	

    
End Function




'*******************************************************************************************************************************





'*******************************************************************************
' Function/Procedure Name	: CloseProcess
' Purpose					: Close all the process which are mentioned in the driver sheet
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function CloseProcess()

	strProcessesToClose = GetData("CloseProcess","ProcessToClose")
    strComputer = "."
	Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\cimv2")
	
	Dim arrProcess
	flagMultipleProcess = false
	intNoOfProcess = 0
	If Instr(strProcessesToClose,",")>0 Then
		arrProcess = Split(strProcessesToClose,",")
		intNoOfProcess = UBound(arrProcess)
		flagMultipleProcess = true
	End If

	For i = 0 to intNoOfProcess

		If flagMultipleProcess = true Then
			strProcessToClose = MultilineTrim(arrProcess(i))
		Else
			strProcessToClose = strProcessesToClose
		End If
	
		Select case strProcessToClose
					Case "OutLook"
								Set objTaskMgrProc = objWMIService.ExecQuery("SELECT * FROM Win32_Process WHERE Name = 'outlook.exe'")
								If objTaskMgrProc.Count > 0 Then
									For j = 1 to objTaskMgrProc.Count
										Set objOutlook = CreateObject("Outlook.Application")
										objOutlook.Quit()
									Next
								End If
					Case "Excel"
								Set objTaskMgrProc = objWMIService.ExecQuery("SELECT * FROM Win32_Process WHERE Name = 'EXCEL.EXE'")
								If objTaskMgrProc.Count > 0 Then
									For j = 1 to objTaskMgrProc.Count
										Set ObjExcel=CreateObject("Excel.Application")
										ObjExcel.Quit()
									Next
								End If
					
		End Select

		SystemUtil.CloseProcessByName(strProcessToClose)
	
		Call ReportEvent("Close process","The process " & Chr(34) & strProcessToClose & Chr(34) & " is closed successfully","PASS") 
        
	Next

End Function



'*******************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: MultilineTrim
' Purpose					: Remove space amd extra line from a string 
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function MultilineTrim (Byval TextData)
    Dim textRegExp
    Set textRegExp = new regexp
    textRegExp.Pattern = "\s{0,}(\S{1}[\s,\S]*\S{1})\s{0,}"
    textRegExp.Global = False
    textRegExp.IgnoreCase = True
    textRegExp.Multiline = True

    If textRegExp.Test (TextData) Then
    	MultilineTrim = textRegExp.Replace (TextData, "$1")
    Else
    	MultilineTrim = ""
    End If
End Function



'*******************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: readDataFromExcel
' Purpose					: read data from a excel file
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function readDataFromExcel (strExcelPath,strSheetName,strRowNo,strColumnNo)

	err.number = 0
    Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = False
	Set objWorkbook = objExcel.WorkBooks.Open(strExcelPath)
	Set objDriverSheet = objWorkbook.Worksheets(strSheetName)
	If err.number = 0 Then
		strExcelData = objDriverSheet.Cells(strRowNo,strColumnNo).Value
	Else
		Call ReportEvent("Read data from Excel","The excel at path " & Chr(34) & strExcelPath & Chr(34) & " is not found ","FAIL")
	End If
  	objWorkbook.Close
	readDataFromExcel = strExcelData
	
End Function




'*******************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: writeDataIntoExcel
' Purpose					: write data in an excel file
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function writeDataIntoExcel (strExcelPath,strSheetName,strRowNo,strColumnNo,strData)

	err.number = 0
    Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = False
	Set objWorkbook = objExcel.WorkBooks.Open(strExcelPath)
	Set objDriverSheet = objWorkbook.Worksheets(strSheetName)
	If err.number = 0 Then
        objDriverSheet.Cells(strRowNo,strColumnNo).Value = strData
		If UCase(strData)="ERROR" Or UCase(strData)="FAIL" Then
			objDriverSheet.Cells(strRowNo,strColumnNo).Interior.ColorIndex = 22
		ElseIf UCase(strData)="SKIPPED" Then
			objDriverSheet.Cells(strRowNo,strColumnNo).Interior.ColorIndex = 36 
		ElseIf UCase(strData)="PASS" Then
			objDriverSheet.Cells(strRowNo,strColumnNo).Interior.ColorIndex = 43 
		End If
		objDriverSheet.UsedRange.EntireColumn.Autofit()
		objDriverSheet.UsedRange.Borders.LineStyle = 1
		objDriverSheet.UsedRange.Borders.Weight = 2
		objDriverSheet.UsedRange.HorizontalAlignment = -4108 	'value of xlCenter
		If flagHeader=true Then
            objDriverSheet.Range(objDriverSheet.Cells(strRowNo,1), objDriverSheet.Cells(strRowNo,strColumnNo)).Font.Bold=True
			objDriverSheet.Range(objDriverSheet.Cells(strRowNo,1), objDriverSheet.Cells(strRowNo,strColumnNo)).Interior.ColorIndex=15
        End If
	Else
		Call ReportEvent("Read data from Excel","The excel at path " & Chr(34) & strExcelPath & Chr(34) & " is not found ","FAIL")
	End If
	objExcel.DisplayAlerts = false
	objWorkbook.Save  'As(strExcelPath)
	objWorkbook.Close
	objExcel.DisplayAlerts = true
    		
End Function



'*******************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: getDealData
' Purpose					: This function will fetch the data which need to be filled in the deal processing window from the common data sheet
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function getDealData(strDataSheetName,ColumnName,strInsType,strDealTrackingNo)

	strDataSheetPath = PathFinder.Locate(Environment("driverSheet"))
	'strConnectionStringData = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strDataSheetPath + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=1"""
	strConnectionStringData = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + strDataSheetPath + ";Extended Properties=""Excel 12.0 Xml;HDR=Yes;IMEX=2"""
							 
	Set objConnData = CreateObject("ADODB.Connection")
	objConnData.Open strConnectionStringData
	Set objTestDataSheet = CreateObject("ADODB.Recordset")	
	objTestDataSheet.CursorLocation = 3
    strSqlQuery = "SELECT " & ColumnName & " from [" & strDataSheetName & "$] where InsType = '" & strInsType & "' AND DealNo = '" & strDealTrackingNo & "' AND RowExecution = 'True'" 
	
    objTestDataSheet.Open strSqlQuery, objConnData
    intNoOfDataRecords = objTestDataSheet.RecordCount
	If (intNoOfDataRecords = 0) Then
		objTestDataSheet.Close
        strDealNo = "All"
        strSqlQuery = "SELECT " & ColumnName & " from [" & strDataSheetName & "$]  where InsType = '" & strInsType & "' AND DealNo = '" & strDealNo & "' AND RowExecution = 'True'"  
		objTestDataSheet.Open strSqlQuery, objConnData
		intNoOfDataRecords = objTestDataSheet.RecordCount
	End If
	If (intNoOfDataRecords = 0) Then
		Err.Raise 2001, "Error", "No test data found for the current querry --> " & strSqlQuery
	ElseIF (intNoOfDataRecords > 1) Then
		Do until objTestDataSheet.EOF
			On Error Resume Next
			strData = strData & Trim(objTestDataSheet.Fields.Item(0)) & ","
			objTestDataSheet.MoveNext
		Loop

        intLen = Len(strData)
		For i = intLen to 0 Step -1
			strVal = Right(strData,1)
			if(strVal = ",") Then
				strData = Left(strData,i-1)
			Else
				Exit For
			End if
		Next
    ElseIf (intNoOfDataRecords = 1) Then
		strData = Trim(objTestDataSheet(0).Value) 
	End If

   	
    'Release all objects
	objTestDataSheet.Close
	objConnData.Close
	Set objConnData = Nothing
	Set objTestDataSheet = Nothing
	
	'Avoid returning Null value
	If IsNull(strData) Then
		strData = ""
	End If

	getDealData = strData

End Function



'************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: fn_FillInTradeEditField
' Purpose					: Fill in the value in the edit field in trade detail window
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function fn_FillInTradeEditField(fieldName,fieldValue)

	Dim strTabName : strTabName = ""
	Dim TEditObj
	Dim flagContinue
	
    On error Resume Next
	intNoOfField = 0
	If fieldName <> "Fixed Px/FLT Spread" and fieldName <> "Buy / Sell" Then
			If Instr(fieldName,"/") Then
		       arrFieldName = Split(fieldName,"/")
		        intNoOfField = UBound(arrFieldName)
	       End If
	End If


	Win("Win_TradeDealDetails").Activate

    For k = 0 to intNoOfField
		
		If intNoOfField>0 Then
			strFieldName = MultilineTrim(arrFieldName(k))
		Else
			strFieldName = MultilineTrim(fieldName)
		End If
		
		flagTabClick = True
		If Instr(strFieldName, "-")>0 Then
			arrSplitFieldName = Split(strFieldName, "-")
			strFieldName = arrSplitFieldName(0)
			Err.Clear
			If strLastClickedTab <> arrSplitFieldName(1) Then
				Win("Win_TradeDealDetails").NBook("NBook_Tabs").ClickTab arrSplitFieldName(1)
				strLastClickedTab = arrSplitFieldName(1)
			End If
			Call WaitForObject(Win("Win_TradeDealDetails"),20)
			If Err.Number = 0 Then
				If NOT dictDealTabsClicked.Exists(strLastClickedTab) Then
					dictDealTabsClicked.Add strLastClickedTab, "Tab"
				End If
				Call ReportEvent("Click Tab in Trade Detail Page", "Clicked on Tab " & Chr(34) & arrSplitFieldName(1) & Chr(34) &  " to fill the field " & Chr(34) & arrSplitFieldName(0 & Chr(34)), "PASS")
			Else
				flagTabClick = False
			End If
		Else
'			If strLastClickedTab <> "Primary Input" Then
'				Win("Win_TradeDealDetails").NBook("NBook_Tabs").ClickTab "Primary Input"
'				strLastClickedTab = "Primary Input"
'			End If
		End If
		 
		If flagTabClick Then
		
			flagFieldFound = false
			strNameProp = fn_FindDealField(strFieldName)
							
			If strNameProp <> "" Then
				
				Set oDescTEdit = Description.Create
				oDescTEdit("Class").value = "TEdit"
				oDescTEdit("name").value = strNameProp
				Set objTEdit = Win("Win_TradeDealDetails").ChildObjects(oDescTEdit)
				If objTEdit.Count > 1 Then
					Set TEditObj = objTEdit(0)
				Else
					Win("Win_TradeDealDetails").TEdit("Edit_TradeDetailEditFields").SetTOProperty "name",strNameProp
					wait 1
					Set TEditObj = Win("Win_TradeDealDetails").TEdit("Edit_TradeDetailEditFields")
				End If
				wait 1
				TEditObj.Highlight
				If strFieldName = "Trader" or strFieldName = "Trader ID" Then
					TEditObj.setValue fieldValue
					Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
					Reporter.ReportEvent micPass,"Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34)
					flagFieldFound = True
					Exit for
				End If
				If Instr(strInsType,"EO-CLIQUET")>0 Then
					strInputText = ""
				Else
					'strInputText = TEditObj.GetROProperty("content")
				End If

				tempCounter = 1
				While TEditObj.GetROProperty("enabled") <> 1 And tempCounter < 10
					wait 1
					tempCounter = tempCounter + 1
				Wend
				strInputText = TEditObj.GetROProperty("content")
				
				If (strInputText <> fieldValue)  Then
					strTempFieldName_Temp = LCase(strFieldName)
					
					If Instr(strFieldName,"Action")>0 OR strFieldName = "Type" Then
						TEditObj.RightClick
						If Win("Win_ListWindow").LBox("LBox_List").Exist(10) Then
							Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",fieldValue
						End If
					Else
						TEditObj.Click
						wait 1
						TEditObj.SetValue fieldValue
					End If
					
					wait 3
				    Call WaitForObject(Win("Win_TradeDealDetails"),20)
				    
				    flagContinue = True
				    If strFieldName = "Type" Then
				    'when Type is changed fields get reshuffled and hence need to capture field NameProp again
				    	strNewNameProp = fn_FindDealField(strFieldName)
				    	
				    	If strNewNameProp <> "" Then

				    		Set oDescNewTEdit = Description.Create
							oDescNewTEdit("Class").value = "TEdit"
							oDescNewTEdit("name").value = strNewNameProp
							Set objTEdit = Win("Win_TradeDealDetails").ChildObjects(oDescTEdit)
							If objTEdit.Count > 1 Then
								Set TEditObj = objTEdit(0)
							Else
								Win("Win_TradeDealDetails").TEdit("Edit_TradeDetailEditFields").SetTOProperty "name",strNewNameProp
								wait 1
								Set TEditObj = Win("Win_TradeDealDetails").TEdit("Edit_TradeDetailEditFields")
							End If
							wait 1
				    		
				    	Else
				    		flagContinue = False
				    	End If
				    End If
				    If strFieldName = "Start Date" or strFieldName = "End Date" Then
				    	strInputText = TEditObj.GetROProperty("content")
				    	If strInputText <> "" Then
				    		If (strInputText <> fieldValue) Or Instr(strInputText,fieldValue)<=0 Then
							  Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
							  Reporter.ReportEvent micPass,"Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) 
							  flagFieldFound = True
							  Exit for
						    End if
				    	End If
				
				    End if
				    If flagContinue Then

						If Instr(strTempFieldName_Temp,"folio")>0 Or Instr(strTempFieldName_Temp,"book")>0 Or Instr(strTempFieldName_Temp,"type")>0 Or Instr(strTempFieldName_Temp,"unit")>0 Then
							'TEditObj.WaitProperty "content",fieldValue,10
							'wait 
						End If
						tempCounter = 1
						While TEditObj.GetROProperty("enabled") <> 1 And tempCounter < 10
							wait 1
							tempCounter = tempCounter + 1
						Wend
						TEditObj.Click
						TEditObj.RefreshObject				
	
						strInputText = TEditObj.GetROProperty("content")
						if strFieldName = "Premium" or strFieldName = "Strike" or fieldName = "Fixed Px/FLT Spread" Then
						eLSE
						
							If (strInputText <> fieldValue) Or Instr(strInputText,fieldValue)<=0 Then
								TEditObj.Click
								wait 1
								TEditObj.SetValue fieldValue
								wait 3
								Call WaitForObject(Win("Win_TradeDealDetails"),20)
								If Instr(strTempFieldName_Temp,"folio")>0 Or Instr(strTempFieldName_Temp,"book")>0 Or Instr(strTempFieldName_Temp,"type")>0 Or Instr(strTempFieldName_Temp,"unit")>0 Then
									wait 5
								End If
								tempCounter = 1
								While TEditObj.GetROProperty("enabled") <> 1 And tempCounter < 20
									wait 1
									tempCounter = tempCounter + 1
								Wend
								TEditObj.Click
								strInputText = TEditObj.GetROProperty("content")
							 End IF
						End If
					
							If (strInputText=fieldValue) Or Instr(strInputText,fieldValue)>0 Then
								Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
								Reporter.ReportEvent micPass,"Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34)
							Else
								Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is not set in the field " & Chr(34) & strFieldName & Chr(34) & " the value which is set to is " & Chr(34) & strInputText & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34),"FAIL") 
								reporter.ReportEvent micFail,"Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is not set in the field " & Chr(34) & strFieldName & Chr(34) & " the value which is set to is " & Chr(34) & strInputText & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34)
							End If
						
					Else
						Call ReportEvent("Entering Field Value ","When " & Chr(34) & fieldValue & Chr(34) & " was set in the field " & Chr(34) & strFieldName & Chr(34) & ", new position of the field " & Chr(34) & strFieldName & Chr(34) & " was not found  for instrument type " &  Chr(34) & strInsType &  Chr(34),"FAIL") 
						reporter.ReportEvent micFail,"Entering Field Value ","When " & Chr(34) & fieldValue & Chr(34) & " was set in the field " & Chr(34) & strFieldName & Chr(34) & ", new position of the field " & Chr(34) & strFieldName & Chr(34) & " was not found  for instrument type " &  Chr(34) & strInsType &  Chr(34)
					End If
					
				Else
					Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
					Reporter.ReportEvent micPass,"Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) 
				End If
				flagFieldFound = true
			End If


				
			If flagFieldFound=false Then
				Win("Win_TradeDealDetails").Activate
				Set oDesc = Description.Create
				oDesc("Class").value = "LBox"
				Set obj = Win("Win_TradeDealDetails").ChildObjects(oDesc)
				
				For l = 0 to obj.Count - 1
					strNameProp = obj(l).GetROProperty("name") 
					Win("Win_TradeDealDetails").LBox("LBox_TranInfo").SetTOProperty "name",strNameProp
					wait 1
					intTempMaxRow = Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetROProperty("maxrow")
					For m = 1 to intTempMaxRow
						strRowNo = CStr(m)
						strAppFieldName = Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndx",strRowNo,"1")
						'Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndx",strRowNo,"1").highlight
						If  strAppFieldName<>"" Then
							If strAppFieldName=strFieldName Or Instr(strAppFieldName,strFieldName)>0 Then
'								strAppFieldValue =  Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndxByTitle",strRowNo,"Value")
								strAppFieldValue =  Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndx",strRowNo,"2")
								If strAppFieldValue<>fieldValue Then
									Win("Win_TradeDealDetails").Activate
									wait 1
									Win("Win_TradeDealDetails").LBox("LBox_TranInfo").RefreshObject
									wait 1
'									If Instr(strFieldName, "Proj Index")>0 Then
'									
'										Win("Win_TradeDealDetails").LBox("LBox_TranInfo").SetCellValue "ByIndx",strRowNo,"3",fieldValue
'									Else
										Win("Win_TradeDealDetails").LBox("LBox_TranInfo").SetCellValue "ByIndx",strRowNo,"2",fieldValue
'									End if
'									If Instr(strLastClickedTab, "SDR")>0 Then
'										Win("Win_TradeDealDetails").LBox("LBox_TranInfo").SetCellValue "ByIndxByTitle",strRowNo,"side 1",fieldValue
'										wait 2
'										WShell.SendKeys "{ENTER}"
'									ElseIf Instr(strLastClickedTab, "Primary Input")>0 Then
'										Win("Win_TradeDealDetails").LBox("LBox_TranInfo").SetCellValue "ByIndxByTitle",strRowNo,"Value",fieldValue
'										wait 2
'										WShell.SendKeys "{ENTER}"
'									End If
'									wait 1	
'									strAppFieldValue =  Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndxByTitle",strRowNo,"Value")
'									If Instr(strFieldName, "Proj Index")>0 Then
'											strAppFieldValue =  Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndx",strRowNo,"3")
'									Else
											strAppFieldValue =  Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndx",strRowNo,"2")
'									End If
								
									
										If (strAppFieldValue=fieldValue) Or Instr(strAppFieldValue,fieldValue)>0 Then
											Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 									
											Reporter.ReportEvent micPass,"Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) 
										Else
											Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is not set in the field " & Chr(34) & strFieldName & Chr(34) & " the value which is set to is " & Chr(34) & strInputText & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34),"FAIL")
											reporter.ReportEvent micFail,"Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is not set in the field " & Chr(34) & strFieldName & Chr(34) & " the value which is set to is " & Chr(34) & strInputText & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34)
										End If
									
								Else
									Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
									Reporter.ReportEvent micPass,"Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " for the fresh deal of instrument type " &  Chr(34) & strInsType &  Chr(34) 
								End If	
								flagFieldFound = true								
								Exit For
							End If
						End If
					Next
	
'					If flagFieldFound=true Then
'						Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
'						Exit For
'					End If
				Next
			Else
				Exit For
			End If
		Else
			Call ReportEvent("Click on Tab in Trade Detail Page", "Error while clicking the tab - " & arrSplitFieldName(1) & ". Kindly check", "FAIL")
		End If
	Next

	If flagFieldFound=false Then
		Call ReportEvent("Object recognition","The object " & Chr(34) & fieldName & Chr(34) & " is not present in the Application for the deal no " & Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) & " , Kindly check","INFO") 
	End If
	

End Function





''************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: ClickSaveInAllTabs
' Purpose					: visits all the tabs where the data has been entered and clicks on Save button if there is any
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************
Function ClickSaveInAllTabs()

   For each strTab in dictDealTabsClicked.Keys
		Win("Win_TradeDealDetails").NBook("NBook_Tabs").ClickTab strTab
		Call WaitForObject(Win("Win_TradeDealDetails"),20)
		Wait 3
		Select Case strTab

			Case "SDR":
				Win("Win_TradeDealDetails").TBut("TBut_Save_SDR").Click
				Call WaitForObject(Win("Win_TradeDealDetails"),20)
				Wait 3
				Call ReportEvent("Click on Save Button in tab SDR", "Successfully clicked on Save button in the tab SDR for the deal " & Chr(34) & strDealTrackingNo & Chr(34) & " for INS_TYPE " & Chr(34) & strInsType & Chr(34), "PASS")
		End Select
   Next
	Win("Win_TradeDealDetails").Activate
	Win("Win_TradeDealDetails").NBook("NBook_Tabs").ClickTab "Primary Input"
	Call WaitForObject(Win("Win_TradeDealDetails"),20)
	Wait 3

End Function



'************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: handleAlerts
' Purpose					: handle the allert windows that pops up in the application while processing deals
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function handleAlerts()

	flagLockDeal = True
	If Win("Win_TradeDealDetails").Exist(1) Then
		Win("Win_TradeDealDetails").RefreshObject
	End If
	If SwfWindow("Win_DealEditorSaveAlert").Exist(3) Then
		strAlertText = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
		If Instr(strAlertText, "part of Composer Deal")>0 Then
			Call ReportEvent("Validate Child deal", "Child deal validated with the text message: " & Chr(34) & strAlertText & Chr(34), "PASS")
		ElseIf Instr(strAlertText, "Do you want to lock the deal until you process or save it?") > 0 Then
			Call ReportEvent("Alert message to keep the deal locked", "Clicking " & Chr(34) & "No" & Chr(34) & " to make sure that the deal is not locked","INFO")
			flagLockDeal = False
		ElseIf Instr(strAlertText, "No Transactions in Query") > 0  Then
			trFlag = true
		ElseIf strDealTrackingNo <> "" Then
			Call ReportEvent("Alert  Message","The deal no " & Chr(34) & strDealTrackingNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34) & " threw a message with following text " & Chr(34) & strAlertText  & Chr(34),"INFO")
		Else
			Call ReportEvent("Alert  Message","Application threw a message with following text " & Chr(34) & strAlertText  & Chr(34),"INFO")
		End If

		If NOT flagLockDeal Then
			If SwfWindow("Win_DealEditorSaveAlert").SwfObject("Button_No").Exist Then
				SwfWindow("Win_DealEditorSaveAlert").SwfObject("Button_No").Click
			End If
		Else
			If SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Exist Then
				SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
				If SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Exist Then
					strAlertText = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
					Call ReportEvent("Alert Message","Application threw a message with following text, " & Chr(34) & strAlertText  & Chr(34),"INFO")
					If Instr(strAlertText, "Do you want to lock the deal until you process or save it?") > 0 Then
						SwfWindow("Win_DealEditorSaveAlert").SwfObject("Button_No").Click
					Else
						SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
					End If
				End If
			ElseIf SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button2").Exist Then
				SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button2").Click
				If SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button2").Exist Then
					strAlertText = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
					Call ReportEvent("Alert Message","Application threw a message with following text, " & Chr(34) & strAlertText  & Chr(34),"INFO")
					If Instr(strAlertText, "Do you want to lock the deal until you process or save it?") > 0 Then
						SwfWindow("Win_DealEditorSaveAlert").SwfObject("Button_No").Click
					Else
						SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button2").Click
					End If
				End If
			ElseIf SwfWindow("Win_DealEditorSaveAlert").SwfObject("PBut_YesButton").Exist Then 
				SwfWindow("Win_DealEditorSaveAlert").SwfObject("PBut_YesButton").Click
				If SwfWindow("Win_DealEditorSaveAlert").SwfObject("PBut_YesButton").Exist Then
					strAlertText = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
					Call ReportEvent("Alert Message","Application threw a message with following text, " & Chr(34) & strAlertText  & Chr(34),"INFO")
					If Instr(strAlertText, "Do you want to lock the deal until you process or save it?") > 0 Then
						SwfWindow("Win_DealEditorSaveAlert").SwfObject("Button_No").Click
					Else
						SwfWindow("Win_DealEditorSaveAlert").SwfObject("PBut_YesButton").Click
					End If
				End If
			End If
		End If
	End If

	If Win("Win_TradeDealDetails").Exist(1) Then
		Win("Win_TradeDealDetails").RefreshObject
	End If
	
End Function



'********************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: fillHeadersInQueryResultSheet
' Purpose					: this function will fill header in the sheet which has deals no and ins types in query result folder
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************
Function fillHeadersInQueryResultSheet(strQueryResultPath,strSheetName,intTempRowNo,intHeaderPos,strHeaderName)
     flagHeader = true
 	Call writeDataIntoExcel(strQueryResultPath,strSheetName,intTempRowNo,intHeaderPos,strHeaderName)
    flagHeader = false
End Function




'********************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: executeCloseDeal
' Purpose					: this function will execute and close a deal from the Tradin Query window
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function executeCloseDeal(strDealNo)

	If flagCompDeal Then
		Call WaitForObject(Win("Win_TradeDealDetails"),20)
		Win("Win_TradeDealDetails").PBut("PBut_Query_Comp").Click
		wait 3
	Else
		Call WaitForObject(Win("Win_TradingManager"),20)
		Win("Win_TradingManager").TEdit("TaskEditBox_TradingManager").Click
		wait 1
        Win("Win_TradingManager").TBut("Button_QuestionMark").Click
		wait 3
		Call WaitForObject(SwfWindow("Win_TradingQueryWindow"),20)
		If Not SwfWindow("Win_TradingQueryWindow").Exist(3) Then
			Win("Win_TradingManager").TBut("Button_QuestionMark").Click
			Call WaitForObject(SwfWindow("Win_TradingQueryWindow"),20)
			wait 3
		End If
	End If
	
	SwfWindow("Win_TradingQueryWindow").Activate
	wait 3
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").highlight
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").ActivateCell "0","0;0"
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").ActivateCell "0","0;0"
	wait 1
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").SetCellData "0","0;0",strDealNo
	wait 1
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").SetCellData "0","0;0",strDealNo
	wait 2
	SwfWindow("Win_TradingQueryWindow").SwfObject("ToolBar_TradingQuery").Click 77,14
	Call handleAlerts()
	Call WaitForObject(Win("Win_TradingManager"),20)
	wait 1
	Call ReportEvent("Execute And Close Deal","The deal " & Chr(34) & strDealNo & Chr(34) & " is successfully opened in the trading manager window","PASS") 

End Function




'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: fetchNewDealTranNo
' Purpose					: This function will fetch the Deal no and Tran no of the new validated deals
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function fetchNewDealTranNo()

	strDealStatus = ""
	Call WaitforObject(Win("Win_TradeDealDetails"),20)
	If Win("Win_TradeDealDetails").Exist Then
		Win("Win_TradeDealDetails").Activate
		If flagCompDeal Then
			Call fetchNewComposerDealNo()
		Else
			flagTAreaFound = false
			Set oDescTArea = Description.Create
			oDescTArea("Class").value = "TArea"
			Set objTArea = Win("Win_TradeDealDetails").ChildObjects(oDescTArea)
			For m = 0 to objTArea.Count - 1				
				strNamePropTArea = objTArea(m).GetROProperty("name") 
				If Instr(strNamePropTArea,"DealNum")>0Then
					flagTAreaFound = true
					strDealNoAfterValidating1 = Split(strNamePropTArea,"DealNum: ")
					strTranNoAfterValidating1 = Split(strNamePropTArea,"TranNum: ")
					strStatus1 = Split(strNamePropTArea, "Status: ")
					strDealNoAfterValidating2 = Split(strDealNoAfterValidating1(1)," ")
					strTranNoAfterValidating2 = Split(strTranNoAfterValidating1(1)," ")
					strStatus2 = Split(strStatus1(1), " ")
					strNewDealTrackingNo = Trim(strDealNoAfterValidating2(0))
					strNewTranTrackingNo = Trim(strTranNoAfterValidating2(0))
					strDealStatus = strStatus2(0)
					Exit for
				End If
			Next
			If flagTAreaFound = false Or strNewDealTrackingNo="" Then
				Call ReportEvent("New Deal Number","Unable to find new deal no. for the validated old deal " & Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34),"INFO") 
			End If
		End If
	End If

End Function



'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: runAdHocQuery
' Purpose					: This function will run and fetch result of a query in AdHoc query window
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function runAdHocQuery(strQuery)
'strQuery="select * from configuration"
	SwfWindow("Window_EndurMainWindow").Activate
	SwfWindow("Window_EndurMainWindow").Highlight
    SwfWindow("Window_EndurMainWindow").SwfObject("swfObject_ScrollBar_MainWindow").Click  11,3
	WShell.SendKeys("^{F9}")
	wait 5
	Call WaitForObject(Win("Win_AdHocQueryViewer"),120)
	Win("Win_AdHocQueryViewer").Activate
	Win("Win_AdHocQueryViewer").MTEd("Edit_AdHocQueryField").SetValue strQuery
	wait 1
	Win("Win_AdHocQueryViewer").PBut("Button_AdHocQueryApply").Click
	wait 2
	If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
		Call handleAlerts()
		Win("Win_AdHocQueryViewer").Terminate
		Call handleAlerts()
	Else
		localCounter = 0
		intMaximumQueryRow = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")
		While intMaximumQueryRow <= 0 AND localCounter<30
			wait 1
			intMaximumQueryRow = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")
			localCounter = localCounter+1
		Wend
		
		If intMaximumQueryRow>0 Then
			Call ReportEvent("Verify AdHoc query execution","The AdHoc query " & Chr(34) & strQuery & Chr(34) & " is executed and results are fetched successfully ","PASS")
		Else
			Call ReportEvent("Verify AdHoc query execution","The AdHoc query " & Chr(34) & strQuery & Chr(34) & " is not executed and results are not fetched ","FAIL")
		End If
	End If

End Function



'***************************************************************************************************************************************************************************************************

' Function/Procedure Name	: SetAuditMessageFields
' Purpose					: This function will enter Audit Messages fields in WoW factory. Called by VerifyDealDeliveryStatusInWOW
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'***************************************************************************************************************************************************************************************************

Function SetAuditMessageFields(strViewType, strName, strTimeFrame, strDealNo, strDealTimestamp)

   Dim arrSplitMultipleDates, arrSplitTimestamp, arrSplitTime

	If Browser("Browser_WowMainWindow").Page("Page_WowPage").Link("Link_ChangeAuditSettings").Exist(2) Then
		Browser("Browser_WowMainWindow").Page("Page_WowPage").Link("Link_ChangeAuditSettings").Click
	Else
		Browser("Browser_WowMainWindow").Page("Page_WowPage").Link("Link_AuditMessages").Click
	End If
	Browser("Browser_WowMainWindow").Page("Page_WowPage").WebRadioGroup("WebRadioGroup_ViewType").Select strViewType
	Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList("WebList_AuditName").Select strName

	If instr(strDealTimestamp, ";") > 0 Then
		arrSplitMultipleDates = Split(strDealTimestamp, " ; ")
		arrSplitTimestamp = Split(arrSplitMultipleDates(0), " ")
		arrTempDay = Split(arrSplitTimestamp(0),"/")
		If CInt(arrTempDay(0)) <10Then
			arrSplitTimestamp(0) = "0" & arrSplitTimestamp(0)
		End If
		arrSplitTime = Split(arrSplitTimestamp(1),":")

	else
		arrSplitTimestamp = Split(strDealTimestamp, " ")
		arrTempDay = Split(arrSplitTimestamp(0),"/")
		If CInt(arrTempDay(0)) <10Then
			arrTempDay(0) = "0" & arrTempDay(0)
			arrSplitTimestamp(0) = "0" & arrSplitTimestamp(0)
		End If
		If CInt(arrTempDay(1)) <10Then
			arrSplitTimestamp(0) = arrTempDay(0) & "/" & "0" & arrTempDay(1) & "/" & arrTempDay(2)
		End If
		arrSplitTime = Split(arrSplitTimestamp(1),":")
	End If

	Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList("WebList_AuditDate").Select arrSplitTimestamp(0)
	Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList("WebList_TimeHr").Select arrSplitTime(0)
	Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList("WebList_TimeMin").Select arrSplitTime(1)
	Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList("WebList_TimeMeridiem").Select arrSplitTimestamp(2)
	Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList("WebList_TimeFrame").Select strTimeFrame
	Browser("Browser_WowMainWindow").Page("Page_WowPage").WebButton("WebButton_AuditSubmit").Click

End Function





'***************************************************************************************************************************************************************************
' Function/Procedure Name	: CheckForDeliveryMsg
' Purpose					: For a given deal, this function goes through each Audit file and locates the Deal no. 
										'If deal found locates the "Delivery" status message and writes the same toAdhocQuery sheet. Called by VerifyDealDeliveryStatusInWOW
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'***************************************************************************************************************************************************************************

Function CheckForDeliveryMsg(strDealNo, tempRowNum, intTempColNum, strTempXMLFilesPath, strTempAuditName, strTempInsType)

	Dim msgFlag, idFound, itemsCount, cnt, message
	msgFlag = False
	idFound = False

	Set objParser = XMLUtil.CreateXML()
	
	If Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList(odescFileNameList).Exist(3) Then
		itemsCount = Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList(odescFileNameList).GetROProperty("items count")

		For i = 1 to itemsCount - 1
			Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList(odescFileNameList).Select "#" & i

			If Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList(odescTimeList).Exist(3) Then
				cnt = Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList(odescTimeList).GetROProperty("items count")
				For j = 0 to cnt - 1
					 Browser("Browser_WowMainWindow").Page("Page_WowPage").WebList(odescTimeList).Select "#" & j
					 strTextPattern = "<tradeId>" & strDealNo & "</tradeId>"
					If Instr(Browser("Browser_WowMainWindow").Page("Page_WowPage").WebEdit("WebEdit_XMLSection").GetROProperty("value"), strTextPattern) > 0 Then
						If UCase(strTempInsType) = "COM" Then
							strOldDealTrackingNum = Trim(readDataFromExcel(strQueryResultPath, "Sheet1", tempRowNum,1))
							
							For each strChild in dictCOMChildDeals.Keys()
								If Instr(strChild, strOldDealTrackingNum)>0 Then
									strChildDealNum = dictCOMChildDeals.Item(strChild)
									strChildPattern = "<child_deal_num>" & strChildDealNum & "</child_deal_num>"
									
									If Instr(Browser("Browser_WowMainWindow").Page("Page_WowPage").WebEdit("WebEdit_XMLSection").GetROProperty("value"), strChildPattern) > 0 Then
										Call ReportEvent("Since Instrument Type is COM, verify if child deal is present in XML content", "Child deal " & Chr(34) & strChildDealNum & Chr(34) & " is present in current XML content", "INFO")
									Else
										Call ReportEvent("Since Instrument Type is COM, verify if child deal is present in XML content", "Child deal " & Chr(34) & strChildDealNum & Chr(34) & " is NOT present in current XML content", "INFO")								
									End If
								End If
							Next
						End If
						strXMLContent = ""
						strXMLContent = Browser("Browser_WowMainWindow").Page("Page_WowPage").WebEdit("WebEdit_XMLSection").GetROProperty("value")
						idFound = True

						If Browser("Browser_WowMainWindow").Page("Page_WowPage").WebElement(odescMsg).Exist(3) Then
							strMsgText = Browser("Browser_WowMainWindow").Page("Page_WowPage").WebElement(odescMsg).GetROProperty("innertext")
							strInfo = Browser("Browser_WowMainWindow").Page("Page_WowPage").WebElement(odescTimeStamp).GetROProperty("innertext")
							arrInfoSplit = Split(strInfo, " : ")
							strArrivalTime = Left(arrInfoSplit(1), 20)
							call writeDataIntoExcel(strQueryResultPath, "Sheet1", tempRowNum, intTempColNum, strMsgText)
							Call writeDataIntoExcel(strQueryResultPath, "Sheet1", tempRowNum, intTempColNum+1, strArrivalTime)
							
							flagExpectedToFail = False
							If dictDealsStatus.Exists(CStr(strDealNo)) Then
								If dictDealsStatus.Item(CStr(strDealNo)) = "to New" Then
									flagExpectedToFail = True
								End If
							End If
							
							CheckForDeliveryMsg = strMsgText
							If strMsgText = "Message was Delivered." AND Not flagExpectedToFail Then
								msgFlag = True
							ElseIf flagExpectedToFail Then
								msgFlag = True
							End If
						End If
					End If
					If msgFlag = True Then
						strXMLFileName = strTempXMLFilesPath & "\" & "Deal_" & Cstr(strDealNo) & "_"& strTempAuditName & ".xml"
						objParser.Load(strXMLContent)
						objParser.SaveFile(strXMLFileName)
						Exit For
					End If
				Next
			End If
			If msgFlag = True Then
				Exit For
			End If
		Next
		If idFound = False Then
			call writeDataIntoExcel(strQueryResultPath, "Sheet1", tempRowNum, intTempColNum, "Deal not Found")
			CheckForDeliveryMsg = "Deal not Found"
		End If
	else
		message = "Following msg displayed for deal No. " & strDealNo & " : " & Browser("Browser_WowMainWindow").Page("Page_WowPage").WebElement("WebElement_Message").GetROProperty("innertext")
		Call ReportEvent("Verify Deal Delivery Status In WOW", message, "FAIL")
		CheckForDeliveryMsg = "FAIL"
	End If
	
	Set objParser = Nothing

End Function






'*********************************************************************************************************************************************************************************************
' Function/Procedure Name	: SetObjDescriptions
' Purpose					: This function sets the object description for checking deal status. Called by VerifyDealDeliveryStatusInWOW
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'**********************************************************************************************************************************************************************************************
Function SetObjDescriptions

	Set odescFileNameList  = Description.Create
	odescFileNameList("micclass").Value = "WebList"
	odescFileNameList("html id").Value = "ctl00_myHubContent_AuditFileDropDownList"
	odescFileNameList("html tag").Value = "SELECT"

	Set odescTimeList = Description.Create
	odescTimeList("micclass").Value = "WebList"
	odescTimeList("html id").Value = "ctl00_myHubContent_MessageList"
	odescTimeList("html tag").Value = "SELECT"

	Set odescMsg = Description.Create
	odescMsg("micclass").value = "WebElement"
	odescMsg("html tag").value = "FONT"

	Set odescTimeStamp = Description.Create
	odescTimeStamp("micclass").value = "WebElement"
	odescTimeStamp("html id").value = "ctl00_myHubContent_viewInfo"
	odescTimeStamp("html tag").value = "SPAN"

End Function





'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: insertColumnTypeInQueryResult
' Purpose										: This function will put the column type at the top and merge the cells
' Author											: WellsFargo
' Parameters								: 
' Return Values								: 
'*******************************************************************************

Function insertColumnTypeInQueryResult(strQueryResultPath)

    err.number = 0
	Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = False
	objExcel.DisplayAlerts = False
	Set objWorkbook = objExcel.WorkBooks.Open(strQueryResultPath)
	Set objDriverSheet = objWorkbook.Worksheets("Sheet1")
'	strRange = strRow & ":1"
	If err.number = 0 Then
		Set objRange = objExcel.Range("1:1")
		objRange.Insert(xlDown)
        objDriverSheet.Cells(1,5).value = strEndurSideHeader
		objDriverSheet.Cells(1,9).value = strTranSideHeader
		
		objDriverSheet.Range(objDriverSheet.Cells(1,5), objDriverSheet.Cells(1,8)).Merge
		objDriverSheet.Range(objDriverSheet.Cells(1,9), objDriverSheet.Cells(1,12)).Merge
		objDriverSheet.Range(objDriverSheet.Cells(1,5), objDriverSheet.Cells(1,12)).Font.Bold=True
		objDriverSheet.Range(objDriverSheet.Cells(1,5), objDriverSheet.Cells(1,12)).Interior.ColorIndex=15
        objDriverSheet.Range(objDriverSheet.Cells(1,5), objDriverSheet.Cells(1,12)).HorizontalAlignment = -4108
		objDriverSheet.Range(objDriverSheet.Cells(1,5), objDriverSheet.Cells(1,8)).Borders.Weight = 4
		objDriverSheet.Range(objDriverSheet.Cells(1,9), objDriverSheet.Cells(1,12)).Borders.Weight = 4
	End If
	
    objWorkbook.Save  'As(strExcelPath)
	objWorkbook.Close
	objExcel.DisplayAlerts = true

End Function



'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: LoadAndRunWac43Tasks
' Purpose					: This function will  take care of running wac43 task
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function loadAndRunWac43Tasks(strTaskToRun,strTaskInputMethod,strEventTypeFields,strEventTypeValues)
    
			Call loadAndRunTasks(strTaskToRun)

            If flagErrorLoadingTask = false Then

				Call selectInputMethodForWac43Task(strTaskInputMethod)
	
				Call fillFieldsInEventTypeWindow(strEventTypeFields,strEventTypeValues)
	
				Call WaitForObject(Win("Win_TradingManager"),20)
				
				Call verifyTaskStatus(strTaskToRun)

			End If
    
End Function




'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: selectInputMethodForWac43Task
' Purpose					: This function will  fill the input type for the deals in the window which appears while executing  wac43 task
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function selectInputMethodForWac43Task(strTaskInputMethod)

    Call WaitForObject(Win("Win_InputMethodOfTaskToRun"),20)

	If  Win("Win_InputMethodOfTaskToRun").Exist(1) Then
		Win("Win_InputMethodOfTaskToRun").Activate
		Call ReportEvent("Task Input Method","The task  input method window is displayed","PASS")
		strAppInputMethod = Win("Win_InputMethodOfTaskToRun").TEdit("WebList_SelecInputMethod").GetROProperty("content")
		If Instr(strAppInputMethod,strTaskInputMethod) > 0 Then
			Call ReportEvent("Task Input Method","The task  input method is already correctly set in the window","INFO")
		Else
			 Win("Win_InputMethodOfTaskToRun").TEdit("WebList_SelecInputMethod").SetValue(strTaskInputMethod)
			strAppInputMethod = Win("Win_InputMethodOfTaskToRun").TEdit("WebList_SelecInputMethod").GetROProperty("content")
			If Instr(strAppInputMethod,strTaskInputMethod) > 0 Then
				Call ReportEvent("Task Input Method","The task  input method is  correctly set in the window","PASS")
			Else
				Call ReportEvent("Task Input Method","The task  input method is not correctly set in the window","FAIL")
			End If
		End If

		Win("Win_InputMethodOfTaskToRun").PBut("Button_OK").Click

	Else
		Call ReportEvent("Task Input Method Window","The task  input method  window for wac 43 task is not displayed","FAIL")
	End If


End Function


'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: fillFieldsInEventTypeWindow
' Purpose					: This function will  fill values in the fields present in the event type window which appears while running wac43 task
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function fillFieldsInEventTypeWindow(strEventTypeFields,strEventTypeValues)

    Call WaitForObject(Win("Win_SelectEventType"),20)

	If Win("Win_SelectEventType").Exist(1) Then

		flagMultipleEventField = false
		If Instr(strEventTypeFields,",")>0 Then
			arrEventTypeFields = Split(strEventTypeFields,",")
			arrEventTypeValues = Split(strEventTypeValues,",")
			flagMultipleEventField = true
			intNoOfField = UBound(arrEventTypeFields)
		End If

		For i = 0 to intNoOfField
		
			If flagMultipleEventField = true Then
				strEventTypeField = MultilineTrim(arrEventTypeFields(i))
				strEventTypeValue = MultilineTrim(arrEventTypeValues(i))
			Else
				strEventTypeField  = strEventTypeFields
				strEventTypeValue = strEventTypeValues
			End If
	
			flagFieldFound = false
			Set oDesc = Description.Create
			oDesc("Class").value = "TEdit"
			Set obj = Win("Win_SelectEventType").ChildObjects(oDesc)
			Win("Win_SelectEventType").Activate
			For j = 0 to obj.Count - 1				
				strNameProp = obj(j).GetROProperty("name") 
				If Instr(strNameProp,strEventTypeField)>0 Then
					Win("Win_SelectEventType").TEdit("TEdit_EventTypeListObject").SetTOProperty "name",strNameProp
					strInputText = Win("Win_SelectEventType").TEdit("TEdit_EventTypeListObject").GetROProperty("content")
					If (strInputText <> strEventTypeValue) And (Instr(strInputText,strEventTypeValue)=0) Then
						Win("Win_SelectEventType").TEdit("TEdit_EventTypeListObject").SetValue strEventTypeValue
						wait 1
						strInputText = Win("Win_SelectEventType").TEdit("TEdit_EventTypeListObject").GetROProperty("content")
						If (strInputText=strEventTypeValue) Or (Instr(strInputText,strEventTypeValue)>0) Then
							Call ReportEvent("Entering Field Value ","The value " & Chr(34) & strEventTypeValue & Chr(34) & " is correctly set in the field " & Chr(34) & strEventTypeField & Chr(34) & " in the event Type window" ,"PASS") 
						Else
							Call ReportEvent("Entering Field Value ","The value " & Chr(34) & strEventTypeValue & Chr(34) & " is not set in the field " & Chr(34) & strEventTypeField & Chr(34)  & " in the event Type window","FAIL") 
						End If
					Else
						Call ReportEvent("Entering Field Value ","The value " & Chr(34) & strEventTypeValue & Chr(34) & " is already set in the field " & Chr(34) & strEventTypeField & Chr(34)  & " in the event Type window","PASS") 
					End If
					flagFieldFound = true
					Exit For
				End If
			Next
	
			If flagFieldFound=false Then
				Call ReportEvent("Object recognition","The object " & Chr(34) & strEventTypeField & Chr(34) & " is not found in the Event type window , Kindly check","INFO") 
			End If
		Next

		Win("Win_SelectEventType").PBut("PBut_OK").Click
		
	Else
		Call ReportEvent("Event type window","The Event type window does not get displayed","FAIL") 
	End If
	
End Function



'*********************************************************************************************************************************************************************************************************


'**************************************************************************************************************************************

' Function/Procedure Name	: UpdateOverAllDealStatus
' Purpose					: This function will update the overall deal status in the query result sheet depending on the tran info values
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'**************************************************************************************************************************************

Function updateOverAllDealStatus(strQueryResultPath)

	If Instr(Environment("currentTestCase"), "ProcessDeals_UserListed")>0 Then
		strDealsDoesNotFlowToScrittua = GetData("ProcessUserListOfDeals","DealsDoesNotFlowToScrittura")
	Else
		strDealsDoesNotFlowToScrittua = GetData("ProcessFetchedDeals","DealsDoesNotFlowToScrittura")
	End If
    
	Set objTempExcel = CreateObject("Excel.Application")
	objTempExcel.Visible = False
	Set objTempWorkbook = objTempExcel.WorkBooks.Open(strQueryResultPath)
	Set objTempDriverSheet = objTempWorkbook.Worksheets("Sheet1")

	objTempDriverSheet.Cells(2,21).Value = "OverAllDealStatus"
	objTempDriverSheet.Cells(2,21).Font.Bold=True
    objTempDriverSheet.Cells(2,21).Interior.ColorIndex=15

	intRowNum = 3
	strTempInsType = objTempDriverSheet.Cells(intRowNum,2).Value
	Do While strTempInsType <> ""
		strNewDealNo = objTempDriverSheet.Cells(intRowNum,3).Value
		If strNewDealNo<>"ERROR" And strNewDealNo<>"SKIPPED" And strNewDealNo<>"" Then
		
			strRcvStatus = objTempDriverSheet.Cells(intRowNum,9).Value
			strSysRef = objTempDriverSheet.Cells(intRowNum,10).Value
			strScritturaResponse =objTempDriverSheet.Cells(intRowNum,11).Value

			If Instr(strRcvStatus,"Success")>0  And Instr(strSysRef,"CDBO")>0 Then
				If   Instr(strScritturaResponse,"Success")>0 Then
					 objTempDriverSheet.Cells(intRowNum,14).Value = "PASS"
					 objTempDriverSheet.Cells(intRowNum,14).Interior.ColorIndex = 43
				Else
					If  Instr(strDealsDoesNotFlowToScrittua,strTempInsType)>0 Then
						objTempDriverSheet.Cells(intRowNum,14).Value = "PASS"
						objTempDriverSheet.Cells(intRowNum,14).Interior.ColorIndex = 43
					Else
						 objTempDriverSheet.Cells(intRowNum,14).Value = "FAIL"
						 objTempDriverSheet.Cells(intRowNum,14).Interior.ColorIndex = 22
					End If				
				End If
			Else
				 objTempDriverSheet.Cells(intRowNum,14).Value = "FAIL"
				 objTempDriverSheet.Cells(intRowNum,14).Interior.ColorIndex = 22
            End If
    		
		End If

		If strNewDealNo="ERROR" OR strNewDealNo="" Then
			objTempDriverSheet.Cells(intRowNum,14).Value = "FAIL"
			objTempDriverSheet.Cells(intRowNum,14).Interior.ColorIndex = 22
		End If

		intRowNum = intRowNum + 1
		strTempInsType = objTempDriverSheet.Cells(intRowNum,2).Value
	Loop

    objTempDriverSheet.UsedRange.EntireColumn.Autofit()
	objTempDriverSheet.UsedRange.Borders.LineStyle = 1
	objTempDriverSheet.UsedRange.Borders.Weight = 2
	objTempDriverSheet.UsedRange.HorizontalAlignment = -4108 	'value of xlCenter

	objTempExcel.DisplayAlerts = false
	objTempWorkbook.Save  'As(strExcelPath)
	objTempWorkbook.Close
	objTempExcel.DisplayAlerts = true

End Function



'*********************************************************************************************************************************************************************************************************


'**************************************************************************************************************************************

' Function/Procedure Name	: getLatestQueryResultSheet
' Purpose					: This function will  find the latest query result sheet present in the Query result folder
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'**************************************************************************************************************************************

Function getLatestQueryResultSheet(strFolderPath)

	  Set objFileResult = Nothing 
	  longDateTime = CDate(0) 

     Set FSO = CreateObject("Scripting.FileSystemObject")
	 Set objFolder = FSO.GetFolder(strQueryResultPath)
	  For Each objFile in objFolder.Files 
          If (Instr(objFile.Name, "AdHocQueryResult_")>0 OR Instr(objFile.Name, "DealsWithSpecifiedStatus_")>0) AND objFile.DateLastModified > longDateTime Then
              Set objFileResult = objFile
              longDateTime = objFile.DateLastModified
	      End If
	  Next

      Set FSO = Nothing
      Set objFolder = Nothing
		
	  strLatestFilePath = strQueryResultPath & "\" & objFileResult.Name
	  getLatestQueryResultSheet = strLatestFilePath

End Function



'*********************************************************************************************************************************************************************************************************


'**************************************************************************************************************************************

' Function/Procedure Name	: findDealRowInQueryResultSheet
' Purpose					: This function will  find the row no where a deal is located in the query result sheet
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'**************************************************************************************************************************************


Function  findDealRowInQueryResultSheet(strQueryResultPath,strDealToProcess)


	If strDealToProcess <> "" Then
		intTempRowNum = 2
		intDealRowNo = 0
		strOldDeal = readDataFromExcel(strQueryResultPath, "Sheet1", intTempRowNum,1)
		Do While strOldDeal <> ""

    		strNewDeal = readDataFromExcel(strQueryResultPath, "Sheet1", intTempRowNum,3)
			If strDealToProcess = CStr(strOldDeal)  Or  strDealToProcess=CStr(strNewDeal) Then
				intDealRowNo = intTempRowNum
				Exit Do
			End If
				
			intTempRowNum = intTempRowNum+1
			strOldDeal = readDataFromExcel(strQueryResultPath, "Sheet1", intTempRowNum,1)
		Loop
		If intDealRowNo<>0 Then
			Call ReportEvent("Find Deal in Query Result Sheet",  "The Deal "  & Chr(34) & strDealToProcess & Chr(34) &  "  is successfully located in the given sheet at row no. " & Chr(34) & intDealRowNo & Chr(34) , "PASS")
		Else
			Call ReportEvent("Find Deal in Query Result Sheet",  "The Deal "  & Chr(34) & strDealToProcess & Chr(34) &  " is not found in the given sheet " & Chr(34) & strQueryResultPath & Chr(34)  , "INFO")
		End If
		findDealRowInQueryResultSheet = intDealRowNo
	Else
		Call ReportEvent("Find Deal in Query Result Sheet",  "The Deal variable is empty , please pass a deal to find its location", "FAIL")
	End If

End Function




'*************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: LoadAndRunTasks
' Purpose					: This function will run all the tasks which are listed in the driver sheet
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function loadAndRunTasks(strTaskName)
    
        If  Not Win("Win_TradingManager").Exist(1) Then
			Call fn_ClickOnMainMenuObject("Trading")
			Call WaitForObject(Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager"),20)
		End If
		
		Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager").Click
		wait 1
		Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strTaskName,"name"
		wait 1
		
		strAppTaskName = Win("Win_TradingManager").TEdit("TaskEditBox_TradingManager").GetROProperty("content")
		If strAppTaskName=strTaskName  Or Instr(strAppTaskName,strTaskName)>0 Then
			Call ReportEvent("Load And Run Task",  "The Task " & Chr(34) & strTaskName & Chr(34) & " is loaded and run Successfully", "PASS")
		Else
			Call ReportEvent("Load And Run Task",  "The Task " & Chr(34) & strTaskName & Chr(34) & " is not loaded properly", "FAIL")
			flagErrorLoadingTask = true
		End If

		Win("Win_TradingManager").PBut("RunTaskButton_TradingManager").Click
		Wait 3	


End Function




'*********************************************************************************************************************************************************************************************************


'**************************************************************************************************************************************

' Function/Procedure Name	: verifyTaskStatus
' Purpose					: This function will  verify the task status inthe trading managet window for a particular task
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'**************************************************************************************************************************************

Function verifyTaskStatus(strTaskName)

			strStatus = Win("Win_TradingManager").TEdit("StatusEditBox_TradingManager").GetROProperty("content")
			If  strStatus = "Running" Or strStatus = "Submitting" Then
				Call ReportEvent("Run Tasks","The task  " & Chr(34) & strTaskName & Chr(34) & " is in " & strStatus & " status","INFO")
			Else
				Wait 5
				strStatus = Win("Win_TradingManager").TEdit("StatusEditBox_TradingManager").GetROProperty("content")
			End If
			If  strStatus="Running" Or strStatus="Succeeded" Or strStatus = "Submitting" Then
                continue = true
				While continue = true
                    If strStatus = "Succeeded" Then
						Call ReportEvent("Run Tasks","The task  " & Chr(34) & strTaskName & Chr(34) & " is  completed Successfully from Trading Manager","PASS")
						strTaskEndTime = Cstr(Now())
						continue = false
					ElseIf strStatus = "Failed" Then
						Call ReportEvent("Run Tasks","The task  " & Chr(34) & strTaskName & Chr(34) & " has  Failed even from Trading Manager","FAIL")
						strTaskEndTime = Cstr(Now())
						continue = false
                    ElseIf strStatus = "Running" Or strStatus = "Submitting" Then
                        wait 5
						strStatus = Win("Win_TradingManager").TEdit("StatusEditBox_TradingManager").GetROProperty("content")
					ElseIf strStatus <> "Running" Then
						Call ReportEvent("Run Tasks","The task  " & Chr(34) & strTaskName & Chr(34) & " is in " & strStatus & " status","FAIL")
						continue = false
                    End If
					strTaskStatus = strStatus
				Wend
			Else
				Call ReportEvent("Run Tasks","The task  " & Chr(34) & strTaskName & Chr(34) & " never goes into Running status, Kindly check the issue, it stays in  " & Chr(34) & strStatus & Chr(34) & " status","FAIL")
				 flagErrorLoadingTask = True
			End If
			
			Win("Win_TradingManager").Terminate
			wait 2

End Function



'*********************************************************************************************************************************************************************************************************


'**************************************************************************************************************************************

' Function/Procedure Name	: openDealDetailPage
' Purpose					: This function will  open the deal detail page for a particular deal
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'**************************************************************************************************************************************

Function openDealDetailPage(strLocalDealTrackingNo)

	flagTempItemFound = false
	Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
	If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
		Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
	End If
    
	If Not Win("Win_QueriedDealsTableWindow").Exist(1) Then
		Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
		If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
			Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
		End If
	End If

	Call WaitForObject(Win("Win_QueriedDealsTableWindow"),20)

	If Win("Win_QueriedDealsTableWindow").Exist(5) Then
		Win("Win_QueriedDealsTableWindow").Activate
		intMaxRow = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetROProperty("maxrow")
		wait 1
		For j = 0 to intMaxRow
			strRowValue = CStr(j)
			strAppDealNo = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Deal #")
			wait 1
			If  Instr(Environment("currentKeyWord"),"ProcessB2BDeal") > 0 or  Instr(Environment("currentKeyWord"),"ProcessB2BAmendmentDeal") > 0Then
				flagTempItemFound = true
				wait 2
				DealTrackingNo  = strAppDealNo
				Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").CellClick "ByTitle",strAppDealNo,"Deal #"
				wait 2
				Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").DblCellClick "ByTitle",strAppDealNo,"Deal #"
                Exit For
			End if
			If strAppDealNo=strLocalDealTrackingNo Or Instr(strAppDealNo,strLocalDealTrackingNo)>0 Then
				flagTempItemFound = true
				wait 2
				Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").CellClick "ByTitle",strAppDealNo,"Deal #"
				wait 2
				Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").DblCellClick "ByTitle",strAppDealNo,"Deal #"
                Exit For
			End If
		Next
		If Win("Win_QueriedDealsTableWindow").Exist(3) Then
			Win("Win_QueriedDealsTableWindow").Terminate
		End If
		If Win("Win_QueriedDealsTableWindow").Exist(1) Then
			Win("Win_QueriedDealsTableWindow").Terminate
		End If
	End IF

    openDealDetailPage = flagTempItemFound
	
End Function



'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: insertWAC43ColumnTypeInQueryResult
' Purpose										: This function will write the coloum type in query result sheet for wac43 datas
' Author											: WellsFargo
' Parameters								: 
' Return Values								: 
'*******************************************************************************

Function insertWAC43ColumnTypeInQueryResult(strQueryResultPath,intTempEndurColNum,intTempTranColNum)

    err.number = 0
	Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = False
	objExcel.DisplayAlerts = False
	Set objWorkbook = objExcel.WorkBooks.Open(strQueryResultPath)
	Set objDriverSheet = objWorkbook.Worksheets("Sheet1")
	If err.number = 0 Then
		If flagWac43ResultSheetCreated = true Then
			Set objRange = objExcel.Range("1:1")
			objRange.Insert(xlDown)
		End if
        objDriverSheet.Cells(1,intTempEndurColNum).value = strEndurSideHeaderWac43
		objDriverSheet.Cells(1,intTempTranColNum).value = strTranSideHeadeWac43
		objDriverSheet.Range(objDriverSheet.Cells(1,intTempEndurColNum), objDriverSheet.Cells(1,intTempEndurColNum+3)).Merge
		objDriverSheet.Range(objDriverSheet.Cells(1,intTempTranColNum), objDriverSheet.Cells(1,intTempTranColNum+2)).Merge
		objDriverSheet.Range(objDriverSheet.Cells(1,intTempEndurColNum), objDriverSheet.Cells(1,intTempTranColNum+2)).Font.Bold=True
		objDriverSheet.Range(objDriverSheet.Cells(1,intTempEndurColNum), objDriverSheet.Cells(1,intTempTranColNum+2)).Interior.ColorIndex=15
        objDriverSheet.Range(objDriverSheet.Cells(1,intTempEndurColNum), objDriverSheet.Cells(1,intTempTranColNum+2)).HorizontalAlignment = -4108
		objDriverSheet.Range(objDriverSheet.Cells(1,intTempEndurColNum), objDriverSheet.Cells(1,intTempEndurColNum+3)).Borders.Weight = 2
		objDriverSheet.Range(objDriverSheet.Cells(1,intTempTranColNum), objDriverSheet.Cells(1,intTempTranColNum+2)).Borders.Weight = 2
	End If

    objWorkbook.Save  'As(strExcelPath)
	objWorkbook.Close
	objExcel.DisplayAlerts = true

End Function




'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: insertWOWColumnTypeInQueryResult
' Purpose										: This function will write the coloum type in query result sheet for wac43 datas
' Author											: WellsFargo
' Parameters								: 
' Return Values								: 
'*******************************************************************************

Function insertWOWColumnTypeInQueryResult(strQueryResultPath,intTempWowColNum, intTempNoOfCols)

    err.number = 0
	Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = False
	objExcel.DisplayAlerts = False
	Set objWorkbook = objExcel.WorkBooks.Open(strQueryResultPath)
	Set objDriverSheet = objWorkbook.Worksheets("Sheet1")
	If err.number = 0 Then
        objDriverSheet.Cells(1,intTempWowColNum).value = strWowHeader
    	objDriverSheet.Range(objDriverSheet.Cells(1,intTempWowColNum), objDriverSheet.Cells(1,intTempWowColNum+intTempNoOfCols-1)).Merge
        objDriverSheet.Range(objDriverSheet.Cells(1,intTempWowColNum), objDriverSheet.Cells(1,intTempWowColNum+intTempNoOfCols-1)).Font.Bold=True
		objDriverSheet.Range(objDriverSheet.Cells(1,intTempWowColNum), objDriverSheet.Cells(1,intTempWowColNum+intTempNoOfCols-1)).Interior.ColorIndex=15
        objDriverSheet.Range(objDriverSheet.Cells(1,intTempWowColNum), objDriverSheet.Cells(1,intTempWowColNum+intTempNoOfCols-1)).HorizontalAlignment = -4108
		objDriverSheet.Range(objDriverSheet.Cells(1,intTempWowColNum), objDriverSheet.Cells(1,intTempWowColNum+intTempNoOfCols-1)).Borders.Weight = 2
		
	End If

    objWorkbook.Save  'As(strExcelPath)
	objWorkbook.Close
	objExcel.DisplayAlerts = true

End Function



'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: createWac43ResultSheet
' Purpose										: This function will  create the result sheet after wac43 task completion if the deals are not present in the latest AdHocQueryResultSheet
' Author											: WellsFargo
' Parameters								: 
' Return Values								: 
'*******************************************************************************
Function createWac43ResultSheet(strTempQueryResultPath)

	Dim oXl,oWb,oWs
	Set oXl = CreateObject("Excel.Application")
	set oWb = oXl.workbooks.Add
	Set oWs = oWb.worksheets("Sheet1")
	oXl.Visible = False
	oWb.SaveAs (strTempQueryResultPath)
	oWb.close
	oXl.quit
	wait 1

End Function




'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: fillDealsInResultSheetWac43
' Purpose										: This function will write the coloum type in query result sheet for wac43 datas
' Author											: WellsFargo
' Parameters								: 
' Return Values								: 
'*******************************************************************************
Function fillDealsInResultSheetWac43(strTempQueryResultPath,strTempDealsToProcess)

	intTempNoOfDealsToProcess = 0
	If Instr(strTempDealsToProcess,",")>0 Then
		tempArrDeals = Split(strTempDealsToProcess,",")
		intTempNoOfDealsToProcess = UBound(tempArrDeals)
	End If
	strTempRowNo = 2
	For m = 0  to intTempNoOfDealsToProcess

		If intTempNoOfDealsToProcess > 0 Then
			strTempDealToProcess = MultilineTrim(tempArrDeals(m))
 		Else
			strTempDealToProcess = strTempDealsToProcess
		End If
		If strTempDealToProcess <> "" Then
            Call writeDataIntoExcel (strTempQueryResultPath,"Sheet1",strTempRowNo,1,strTempDealToProcess)
			strTempRowNo = strTempRowNo + 1
		End If

	Next

End Function


'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: verifyAndCreateNewResultSheetWac43
' Purpose										: This function will create the new result sheet if  any of the deal for wac43 execution is not present in the latest query result sheet
' Author											: WellsFargo
' Parameters								: 
' Return Values								: 
'*******************************************************************************
Function verifyAndCreateNewResultSheetWac43(strQueryResultPath,strDealsToProcess)

	intNoOfDealsToProcess = 0
	If Instr(strDealsToProcess,",")>0 Then
		arrDeals = Split(strDealsToProcess,",")
		intNoOfDealsToProcess = UBound(arrDeals)
	End If

	For i = 0 to intNoOfDealsToProcess

		If  flagWac43ResultSheetCreated = false Then

			If intNoOfDealsToProcess > 0 Then
				strDealToProcess = MultilineTrim(arrDeals(i))
			Else
				strDealToProcess = strDealsToProcess
			End If
	
			If strDealToProcess <> "" Then
				
				intDealRowInQueryResultSheet = findDealRowInQueryResultSheet(strQueryResultPath,strDealToProcess)
				If intDealRowInQueryResultSheet = 0  Then

					flagNewDeal = true
					strQueryResultPath = "\QueryResults\Wac43QueryResult_" & Now
					If Instr(strQueryResultPath,":") Then
						strQueryResultPath = Replace(strQueryResultPath,":","_")
					End If
					If Instr(strQueryResultPath,"/") Then
						strQueryResultPath = Replace(strQueryResultPath,"/","_")
					End If
					If Instr(strQueryResultPath," ") Then
						strQueryResultPath = Replace(strQueryResultPath," ","__")
					End If
					strQueryResultPath = Environment("strResourceRootPath") & strQueryResultPath & ".xlsx"
					intTranInfoColNo = 6
					intXmlColno = 2			
					Call createWac43ResultSheet(strQueryResultPath)
					Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",1,1, "Deal No.")
					Call fillDealsInResultSheetWac43(strQueryResultPath,strDealsToProcess)
                    flagWac43ResultSheetCreated = true
					Call ReportEvent("New result sheet creation","New Result sheet is created at location " & Chr(34) &  strQueryResultPath & Chr(34) &  " to store deals' status since few given deals are not present in the latest query result sheet ","INFO")
				End If
			End If
		End If
	Next	

End Function


''********************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: fn_ClickOnProcess
'' Purpose										: This function click on the process button once all the fileds are filled 
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function fn_ClickOnProcess()

	Win("Win_TradeDealDetails").Activate
	flagProcessButtonFound = false
	Set oDescButton = Description.Create
	oDescButton("Class").value = "PBut"
	Set objButton = Win("Win_TradeDealDetails").ChildObjects(oDescButton)
	For m = 0 to objButton.Count - 1				
		strNameProp = objButton(m).GetROProperty("name") 
		If Instr(strNameProp,"%Process")>0 Then
			flagProcessButtonFound = true
			Win("Win_TradeDealDetails").PBut("Button_Process").SetTOProperty "name",strNameProp
			Win("Win_TradeDealDetails").Activate
			wait 2
			Win("Win_TradeDealDetails").PBut("Button_Process").Click
			wait 10
			Call  handleAlerts()
			Call  handleAlerts()
			Call  handleAlerts()
			Call WaitForObject(Win("Win_TradeDealDetails"),20)
			
			If NOT 	flagTemplate Then
				Call fetchNewDealTranNo()				
			End If
			Exit For
		End If
	Next
	If flagProcessButtonFound=false Then
		Call ReportEvent("Object recognition","The Process button object is not present in the Application for the deal no " & Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34) & " , Kindly check","INFO") 
	End If
End Function



''********************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: CloseXLFile
'' Purpose										: This function closes an excel file in the mentioned path which includes the file name too
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function CloseXLFile(strFilePath)

	Dim objExcel
	CloseXLFile = False
	If strFilePath <> "" AND Instr(strFilePath, "\") <> 0 Then
		arrPathBreak = Split(strFilePath, "\")
		If Instr(arrPathBreak(Ubound(arrPathBreak)), ".") = 0 Then
			strFileName = arrPathBreak(Ubound(arrPathBreak)) & ".xlsx"
		else
			strFileName = arrPathBreak(Ubound(arrPathBreak))
		End If

		On error resume next
		Set objExcel = GetObject("Excel.Application")
		If TypeName(objExcel) <> Nothing Then
			For each wb in objExcel.Workbooks
				If wb.Name = strFileName Then
					wb.DsiplayAlerts = False
					wb.Close(False)
					CloseXLFile = True
					Exit For
				End If
			Next
		Else
			Call ReportEvent("Close File", "File in the path - " & strFilePath & " - could not be closed", "FAIL")
		End If
		On error goto 0
		Set objExcel = Nothing
	Else
		Call ReportEvent("Close File", "File in the path - " & strFilePath & " - could not be closed", "FAIL")
	End If

End Function






'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: readFile
' Purpose										: This function will  read the log file in the folder for error message 
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function readFile(objTempFolder,strTempLogFileName,strTempInsType,strTempNewDealTrackingNo)

	intTempRowNo = 2
	strTempLogFilePath = objTempFolder.Path
	Set ObjFiles = objTempFolder.Files
	For Each ObjFile In ObjFiles

		strFileName = ObjFile.Name
		strModifiedDate = ObjFile.DateLastModified
		If  Instr(strModifiedDate,Date)>0 Then   
			If Instr(strFileName,strTempLogFileName)>0 then
				strFileName = strTempLogFilePath &"\"& strFileName
				Set tempFso = CreateObject("Scripting.FileSystemObject")
				Set fileObject = tempFso.OpenTextFile(strFileName)
				strLogBody = fileObject.ReadAll
				If Instr(strLogBody,strTempNewDealTrackingNo) > 0 Then
					Call writeDataIntoExcel(strQueryResultPath,"Sheet2",intTempRowNo,1,strFileName)
					Call writeDataIntoExcel(strQueryResultPath,"Sheet2",intTempRowNo,2,strTempInsType)
					Call writeDataIntoExcel(strQueryResultPath,"Sheet2",intTempRowNo,3,strTempNewDealTrackingNo)
					Do Until fileObject.AtEndOfStream
						strLine = fileObject.ReadLine
						If Instr(strLine,"ERROR")>0 Then
							Call writeDataIntoExcel(strQueryResultPath,"Sheet2",intTempRowNo,4,strLine)
							intTempRowNo = intTempRowNo + 1
							tempFlag = true
						End If
					Loop
				End If
				fileObject.Close : Set fileObject = Nothing
			End If
		End If
		If tempFlag = true Then
			Exit For
		End If
	Next

	readFile = tempFlag
	
End Function







'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: readLogForXmlError
' Purpose										: This function will  read the log file for error message if xml is not generated for a deal in endure side
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function readLogForXmlError(strTempInsType,strTempNewDealTrackingNo)

	On Error resume Next

    strServer = GetData("ProcessFetchedDeals","ServerName")
	strLogFilePath = GetData("ProcessFetchedDeals","LogFilePath")
	strLogFileName = GetData("ProcessFetchedDeals","LogFileName")

	If strQueryResultPath="" Then
		strQueryResultPath = Environment("strResourceRootPath") &  "\QueryResults"
		strQueryResultPath = getLatestQueryResultSheet(strQueryResultPath)
	End If

	If Instr(strServer,"-")>0 Then
		strServerLocal = Split(strServer,"-")
		strServerLocal = MultilineTrim(strServerLocal(0))
	Else
		strServerLocal = strServer
	End If

	strYear = Year(now)
	strMonth = Left(MonthName(Month(Date)),3)
	strDate = day(Date)
	If  day(Date)<10 Then
		strDate = "0"&day(Date)
	End If

	Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet2",1,1,"LogFileName")
	Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet2",1,2,"IntrumentType")
	Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet2",1,3,"DealNumber")
	Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet2",1,4,"ErrorMessage")

	strIpAddress = mapIPAddress(strServerLocal)
	strLogFilePath = "\\" & strIpAddress & "\" & strLogFilePath
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ObjFolder = fso.GetFolder(strLogFilePath)
	tempFoundFlag = false
	

	Set ObjSubFolders = ObjFolder.SubFolders
	If ObjSubFolders.count > 0 Then
		For each ObjSubFolder in ObjSubFolders
        	Set ObjSubSubFolders = ObjSubFolder.SubFolders
			If ObjSubSubFolders.count > 0 Then
				For each ObjSubSubFolder in ObjSubSubFolders
					If  Instr(UCase(ObjSubSubFolder.name),"OLD")=0 Then
						tempFoundFlag = readFile(ObjSubSubFolder,strLogFileName,strTempInsType,strTempNewDealTrackingNo)
					End If
                    If tempFoundFlag=true Then
						Exit For
					End If
				Next
			End If
			If tempFoundFlag=false Then
				If  Instr(UCase(ObjSubFolder.name),"OLD")=0 Then
					tempFoundFlag = readFile(ObjSubFolder,strLogFileName,strTempInsType,strTempNewDealTrackingNo)
				End If
			End If
			If tempFoundFlag=true Then
				Exit For
			End If
		Next
	End If
	If tempFoundFlag=false Then
		If  Instr(UCase(ObjFolder.name),"OLD")=0 Then
			tempFoundFlag = readFile(ObjFolder,strLogFileName,strTempInsType,strTempNewDealTrackingNo)
		End If
	End If

End Function



'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: processDeal
' Purpose										: This function fills the action field in the deal detail page
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function  processDeal(strFieldValue)

		If flagCompDeal = false then

		'	Call ClickSaveInAllTabs()

			If Instr(strFieldValue,"to New")>0 Then
				Call fn_ClickButton("Win_TradeDealDetails","Run")
				Call fn_FillInTradeEditField("Action", strFieldValue)
				Call fn_ClickOnProcess()
				Call WaitForObject(Win("Win_TradeDealDetails"),20)
				If Win("Win_TradeDealDetails").Exist(1) Then
					Win("Win_TradeDealDetails").Terminate
				End If
				Call executeCloseDeal(strNewDealTrackingNo)
				
				flagItemFound = False
				flagItemFound = openDealDetailPage(strNewDealTrackingNo)
				
				If flagItemFound Then
					ReportEvent "Process to New status", "Deal " & Chr(34) & strDealTrackingNo & Chr(34) & " of INS_TYPE " & Chr(34) & strInsType & Chr(34) & " was processed to New status and reopened successfully. New deal Tracking No is " & Chr(34) & strNewDealTrackingNo & Chr(34), "PASS"
					strDealTrackingNo = strNewDealTrackingNo	
					If Instr(strInsType,"EO-CLIQUET")>0 Then
'						If Win("Win_TradeDealDetails").Exist(1) Then
'							Win("Win_TradeDealDetails").Activate
'                            Win("Win_TradeDealDetails").TBut("TBut_Save").Click
'							wait 3
'							Call WaitForObject(Win("Win_TradeDealDetails"),20)
'							tempCounter = 0
'							While Win("Win_TradeDealDetails").GetROProperty("enabled")<>1 And tempCounter<10
'								wait 1
'								tempCounter = tempCounter + 1
'							Wend
'						End If
'						Call fn_FillInTradeEditField("Marketer", "Michael Jones")
'						Call fn_FillInTradeEditField("Market Desk", "Consumer Energy")
'						Call fn_FillInTradeEditField("Marketing Fee", "10")
					End If	
				End If	

            Else

				'Call ClickSaveInAllTabs()
				Call fn_FillInTradeEditField("Action", strFieldValue)
				Call fn_ClickOnProcess()

			End If
		Else
			Win("Win_TradeDealDetails").PBut("PBut_Action_Comp").Click
			Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strFieldValue,""
			Call fn_ClickOnProcess()
		End If
		
		If Instr(strFieldValue, "Amend")>0 Then
			strExpectedDealStatus = "Validated"
		ElseIf Instr(strFieldValue, "Cancel")>0 Then
			strExpectedDealStatus = "Cancelled"
		Else
			strExpectedDealStatus = strFieldValue
		End If
		
       		
	End Function





'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: processDealBasedOnAction
' Purpose										: This function fills the action field in the deal detail page
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************
Function processDealBasedOnAction(strFieldValue,strNewDealTrackingNo)

		Select Case strFieldValue

				Case "to New":					
                    					
					Win("Win_TradeDealDetails").Terminate

					Call executeCloseDeal(strNewDealTrackingNo)

					If flagCompDeal = false Then
						If strToolSetName="" Then
							Call getToolSetName(strInsType)
						End If
'						Call fn_FillTranInfoFromTradingManager(strFieldNames,strFieldValues)
						flagSaveObjectFound = false
						flagItemFound = False
						flagItemFound = openDealDetailPage(strNewDealTrackingNo)
						
						If flagItemFound Then
							ReportEvent "Process to New status", "Deal " & Chr(34) & strDealTrackingNo & Chr(34) & " of INS_TYPE " & Chr(34) & strInsType & Chr(34) & " was processed to New status and reopened successfully. New deal Tracking No is " & Chr(34) & strNewDealTrackingNo & Chr(34), "PASS"
							strDealTrackingNo = strNewDealTrackingNo
							If Win("Win_TradeDealDetails").Exist(1) Then
                                	Win("Win_TradeDealDetails").Activate
    								Win("Win_TradeDealDetails").TBut("TBut_Save").Click
									wait 3
							End If
						End If
					End If
										
			End Select

End Function

'******************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: FetchNewComposerDealNo
' Purpose										: This function fetches the new deal and tran tracking numbers for new Composer deal
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function fetchNewComposerDealNo()

	Call WaitForObject(Win("Win_TradeDealDetails"),20)
	If Win("Win_TradeDealDetails").Exist(1) Then
		If Win("Win_TradeDealDetails").LBox("LBox_GeneralParams_Comp").Exist(1) Then
			strNewDealTrackingNo = Win("Win_TradeDealDetails").LBox("LBox_GeneralParams_Comp").GetCellValue("ByTitle","Deal Tracking Num","Value")
			strNewTranTrackingNo = Win("Win_TradeDealDetails").LBox("LBox_GeneralParams_Comp").GetCellValue("ByTitle","Tran Num","Value")
			strDealStatus = Win("Win_TradeDealDetails").LBox("LBox_GeneralParams_Comp").GetCellValue("ByTitle","Tran Status","Value")
		Else
			flagCompDeal = false
			Call fetchNewDealTranNo()
			flagCompDeal = true
		End If		
   End If

   If strNewDealTrackingNo = "" Then
		Call ReportEvent("New Deal Number","Unable to find new deal no. for the validated old deal " & Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34),"INFO") 
   End If

End Function




'******************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: CreateSheet
' Purpose										: This function will create a new work book at the given path inside the root path
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function CreateSheet(strTempSheetPath,strTempSheetName)

   If Instr(strTempSheetName,":") Then
		strTempSheetName = Replace(strTempSheetName,":","_")
	End If
	If Instr(strTempSheetName,"/") Then
		strTempSheetName = Replace(strTempSheetName,"/","_")
	End If
	If Instr(strTempSheetName," ") Then
		strTempSheetName = Replace(strTempSheetName," ","__")
	End If

'	strTempSheetName = strTempSheetPath & strTempSheetName & ".xlsx"
	strTempSheetName = strTempSheetPath & strTempSheetName

	Dim xlWBATWorksheet : xlWBATWorksheet = -4167
	Set objectExcel = CreateObject("Excel.Application")
	Set objectWB = objectExcel.Workbooks.Add(xlWBATWorksheet)
	objectExcel.Visible=False
	objectExcel.DisplayAlerts = False
    objectWB.SaveAs(strTempSheetName)
	objectWB.Close
	objectExcel.DisplayAlerts = True
	objectExcel.Quit
	Set objectWB = Nothing
	Set objectExcel = Nothing

	CreateSheet = strTempSheetName

End Function



'******************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: verifyFolderCreation
' Purpose										: This function will  validate whether the folder exist or not , if not then it will create it
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function verifyFolderCreation(strFolderPath,strFolderName)

	strFullFolderPath = strFolderPath & "\" & strFolderName
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	If objFSO.FolderExists(strFullFolderPath) Then
		Call ReportEvent("Validate Folder Creationl", "The folder " & Chr(34) & strFolderName & Chr(34) & " is already created at the path " & Chr(34) & strFolderPath & Chr(34) , "INFO")
	Else
		If objFSO.FolderExists(strFolderPath) Then
			objFSO.CreateFolder(strFullFolderPath)
		Else
			objFSO.CreateFolder(strFolderPath)
			objFSO.CreateFolder(strFullFolderPath)
		End If
		
		wait 1
		If objFSO.FolderExists(strFullFolderPath) Then	
			Call ReportEvent("Validate Folder Creationl", "The folder " & Chr(34) & strFolderName & Chr(34) & " is successfully created at the path " & Chr(34) & strFolderPath & Chr(34) , "INFO")
		Else
			Call ReportEvent("Validate Folder Creationl", "The folder " & Chr(34) & strFolderName & Chr(34) & " is not  created successfully at the path " & Chr(34) & strFolderPath & Chr(34) , "FAIL")
		End if
	End If
    
End Function




'************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: fn_FillEditField
' Purpose					: Fill in the value in the edit field in trade detail window
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function fn_FillEditField(strWindowName,strFieldName,fieldValue)

   
    	strTempFieldName = "%" & strFieldName
        flagFieldFound = false
		Set oDesc = Description.Create
		oDesc("Class").value = "TEdit"
    	Set obj = Win(strWindowName).ChildObjects(oDesc)
		
		For l = 0 to obj.Count - 1				
			strNameProp = obj(l).GetROProperty("name") 
			flagContinue = true
			If Instr(strNameProp,strTempFieldName)>0 Then
				flagFieldFound = true
				Win(strWindowName).TEdit("TEdit_CommonEditFields").SetTOProperty "name",strNameProp
				wait 2
				strInputText = Win(strWindowName).TEdit("TEdit_CommonEditFields").GetROProperty("content")
				If (strInputText <> fieldValue)  Then

					If fieldValue <> ""  And Instr(strTempFieldName,"Ref")<=0 AND Instr(strTempFieldName,"Date")<=0 AND Instr(strTempFieldName,"Our Pfolio")<=0 AND Instr(strTempFieldName,"Our Book")<=0 Then
								Win(strWindowName).Activate
								TEditObj.RefreshObject
								wait 1
								TEditObj.Click
								wait 1
								TEditObj.RightClick
								wait 2
								If Win("Win_ListWindow").LBox("LBox_List").Exist(5) Then
									Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",fieldValue
								Else
									TEditObj.SetValue fieldValue
								End If
								wait 5
								Call WaitForObject(Win(strWindowName),20)
'								If Instr(strFieldName,"Trader")>0 Then
'									Win("Win_TraderSelection").LBox("LBox_List").CellClick "ByTitle",fieldValue,"name"
'								Else
'									Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",fieldValue,""
'								End If
								
								TEditObj.Click
								TEditObj.RefreshObject
							Else
								Win(strWindowName).Activate
								TEditObj.RefreshObject
								wait 1
								TEditObj.SetValue fieldValue
								wait 2
								TEditObj.Click
								TEditObj.RefreshObject
							End If

							If strFieldName = "Type" Then
								Call WaitForObject(Win("Win_TradeDealDetails"),20)
								Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
							Else
								strInputText = TEditObj.GetROProperty("content")
								If (strInputText <> fieldValue) Or Instr(strInputText,fieldValue)<=0 Then
									TEditObj.RefreshObject
									wait 1
									TEditObj.SetValue fieldValue
									wait 1
									TEditObj.Click
									TEditObj.RefreshObject
									strInputText = TEditObj.GetROProperty("content")
								End If
								If (strInputText=fieldValue) Or Instr(strInputText,fieldValue)>0 Then
									Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
								Else
									Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is not set in the field " & Chr(34) & strFieldName & Chr(34) & " the value which is set to is " & Chr(34) & strInputText & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34)  & " of instrument type " &  Chr(34) & strInsType &  Chr(34),"FAIL") 
								End If
							End If

				Else
					Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " for the window " & Chr(34) & strWindowName &  Chr(34),"PASS") 
				End If
				Exit For
			End If
		
   		Next

        If flagFieldFound=false Then
			Win(strWindowName).Activate
			Set oDesc = Description.Create
			oDesc("Class").value = "LBox"
			Set obj = Win(strWindowName).ChildObjects(oDesc)
			
			For l = 0 to obj.Count - 1
            	strNameProp = obj(l).GetROProperty("name") 
				Win(strWindowName).LBox("LBox_CommonLBox").SetTOProperty "name",strNameProp
				wait 1
				intTempMaxRow = Win(strWindowName).LBox("LBox_CommonLBox").GetROProperty("maxrow")
				For m = 0 to intTempMaxRow
					strRowNo = CStr(m)
					strAppFieldName = Win(strWindowName).LBox("LBox_CommonLBox").GetCellValue("ByIndx",strRowNo,"1")
					If  strAppFieldName<>"" Then
						If strAppFieldName=strFieldName Or Instr(strAppFieldName,strFieldName)>0 Then
							strAppFieldValue =  Win(strWindowName).LBox("LBox_CommonLBox").GetCellValue("ByIndxByTitle",strRowNo,"Value")
							If strAppFieldValue<>fieldValue Then
    							Win(strWindowName).Activate
								wait 1
								Win(strWindowName).LBox("LBox_CommonLBox").RefreshObject
								wait 1
								Win(strWindowName).LBox("LBox_CommonLBox").SetCellValue "ByIndxByTitle",strRowNo,"Value",fieldValue
								wait 1
							Else
								Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34),"PASS") 
							End If
							flagFieldFound = true
							Exit For
						End If
					End If
				Next
				
				If flagFieldFound=true Then
                    Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34)  ,"PASS") 
					Exit For
				End If
		Next
	End If
    If flagFieldFound=false Then
		Call ReportEvent("Object recognition","The object " & Chr(34) & fieldName & Chr(34) & " is not present in the Application for the window  " & Chr(34) & strWindowName &  Chr(34) & " Kindly check","INFO") 
	End If
    Call handleAlerts()  

End Function



''********************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: fn_ClickButton
'' Purpose										: This function click on a button based on its name 
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function fn_ClickButton(strWindowName,buttonName)

	tempButtonName = "%" & buttonName
	Win(strWindowName).Activate
	flagButtonFound = false
	Set oDescButton = Description.Create
	oDescButton("Class").value = "PBut"
	Set objButton = Win(strWindowName).ChildObjects(oDescButton)
	For m = 0 to objButton.Count - 1				
		strNameProp = objButton(m).GetROProperty("name") 
		If Instr(strNameProp,tempButtonName)>0 Then
			flagButtonFound = true
			Win(strWindowName).PBut("PBut_CommonButton").SetTOProperty "name",strNameProp
			Win(strWindowName).Activate
			wait 2
			Win(strWindowName).PBut("PBut_CommonButton").Click
			wait 3
			Call  handleAlerts()
            Exit For
		End If
	Next
'	If flagButtonFound=false Then
'		Call ReportEvent("Object recognition","The button object is not present in the Application for the window  " & Chr(34) & strWindowName &  Chr(34) & " Kindly check","INFO") 
'	End If
End Function




''********************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: removeComaAtEnd
'' Purpose										: This function will remove commas at the end of the data value which is read  from the driver sheet
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function removeComaAtEnd(strDataValue)

   intLen = Len(strDataValue)
	For i = intLen to 0 Step -1
		strVal = Right(strDataValue,1)
		if(strVal = ",") Then
			strDataValue = Left(strDataValue,i-1)
		Else
			Exit For
		End if
	Next

End Function




''********************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: CompareResult_EodMinCum
'' Purpose										: This function will  compare the excel sheets created by compare sim task and generate results in result folder
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function CompareResult_EodMinCum(strInPutPath,strResultFilePath)


	resfile = strResultFilePath
	objStartFolder = strInPutPath

	StartTime = Timer() '--------- Start script time
	
	'-------------------------------------- Call function to kill previously opened excel sessions
'	Call Func_KillExcel_Session_Local()
	
	'-------------- Declaring varaibles
	Dim  objExcel1,objSpread1
	
	
	'---------------- Call function to check whether files already exist with given name,if yes then append latest time stamp
	a =  Check_ExeclFile_Existance (resfile)
	IF a = 0 Then
	
		
		'----------------- Define variables
		iDealNumbr = 0
		strDealNumber = ""
		iWatchNPVValue = 0
		strWatchNPV = ""
		FirstSheetName = ""
		iDifference =0
		iRowNumCountr = 7 '-------------------- Specific row number for start entering book name 
		iRowBookNameCounter = 7 '-------------- Specific number for entering book comparison status
		iRowPassCount = 0
		iRowFailCount = 0
		strWatchCptyNpvWBNA = ""
		strWatchCvaWBNA = ""
		strWatchDvaWBNA = ""
		iDealNotMatch = 0
		iRowWarningCounter = 0
		iRowNumExtraDeal = 7
		StrDealNumberExtra = ""
		
		'----------- Multiple tabs name to be compared ( User Defined Column names ,which are required for comparison as per excel sheet)
		sMultipletabsName = "NEW_WachNPV;BASE_WachNPV"
		arrMultipleTabsName = Split(sMultipletabsName,";")
		 
		
		'----------------- Code for retrieving the number of files from folder location
		Set objFSO = CreateObject("Scripting.FileSystemObject")
		Set objFolder = objFSO.GetFolder(objStartFolder)
		Set colFiles = objFolder.Files
		totalfiles = colFiles.count
		For Each objFile in colFiles	
			sFileName = objFile.Name
			sFileNameString = sFileNameString & sSeprator & sFileName 
			sSeprator = ","
		Next
		
		'--------------------- Create excel object for Result sheet
		Set objExcel = CreateObject("Excel.Application")
		objExcel.displayalerts = false
		objExcel.Visible = False
		
		Set resBook = objExcel.Workbooks.Add
		resBook.Sheets(1).Name = "Result"
		Set resWorkSheet = resBook.WorkSheets("Result")
		set resWorkUsedRange = resWorkSheet.UsedRange
		resWorkUsedRange.EntireColumn.Autofit()
		resBook.Save
		
		'msgbox "totalfiles:- " & totalfiles 
		'*************************************************** Preparing the Headers and details in the Result File **************************************
		resWorkSheet.Cells(1,1) = "This is a result file which highlights the differences between the Files ..."
		resWorkSheet.Cells(1,1).Font.Bold = TRUE
		resWorkSheet.Cells(2,1) = "Folder Path For Files : " + objStartFolder
		resWorkSheet.Cells(2,1).Font.Bold = TRUE
		resWorkSheet.Cells(3,1) = "Total Number Of Files to be Compared :"
		resWorkSheet.Cells(3,1).Font.Bold = TRUE
		resWorkSheet.Cells(3,2) = totalfiles
		resWorkSheet.Cells(3,2).Font.Bold = TRUE
		resWorkSheet.Cells(4,1) = "Files Pending for Comparison :"
		resWorkSheet.Cells(4,1).Font.Bold = TRUE
		resWorkSheet.Cells(5,1) = "Comparison Execution Status:"
		resWorkSheet.Cells(5,1).Font.Bold = TRUE
		resWorkSheet.Cells(5,2) = "In Progress"
		resWorkSheet.Cells(5,2).Font.Bold = TRUE
		
		'------------------------------------ Columns for Non WBNA Files
		resWorkSheet.Cells(6,1) = "Book Name"
		resWorkSheet.Cells(6,1).Font.Bold = TRUE
		resWorkSheet.Cells(6,2) = "Status"
		resWorkSheet.Cells(6,2).Font.Bold = TRUE
		resWorkSheet.Cells(6,3) = "Deal Number"
		resWorkSheet.Cells(6,3).Font.Bold = TRUE
		resWorkSheet.Cells(6,4) = "WatchNPV_New"
		resWorkSheet.Cells(6,4).Font.Bold = TRUE
		resWorkSheet.Cells(6,5) = "WatchNPV_Base"
		resWorkSheet.Cells(6,5).Font.Bold = TRUE
		resWorkSheet.Cells(6,6) = "Diff - NPV"
		resWorkSheet.Cells(6,6).Font.Bold = TRUE
		
		'------------------------------ Columns for WBNA Files
		resWorkSheet.Cells(6,7) = "Wach_Cpty_Npv_New"
		resWorkSheet.Cells(6,7).Font.Bold = TRUE
		resWorkSheet.Cells(6,8) = "Wach_Cva_New"
		resWorkSheet.Cells(6,8).Font.Bold = TRUE
		resWorkSheet.Cells(6,9) = "Wach_Dva_New"
		resWorkSheet.Cells(6,9).Font.Bold = TRUE
		resWorkSheet.Cells(6,10) = "Wach_Cpty_Npv_Base"
		resWorkSheet.Cells(6,10).Font.Bold = TRUE
		resWorkSheet.Cells(6,11) = "Wach_Cva_Base"
		resWorkSheet.Cells(6,11).Font.Bold = TRUE
		resWorkSheet.Cells(6,12) = "Wach_Dva_Base"
		resWorkSheet.Cells(6,12).Font.Bold = TRUE
		resWorkSheet.Cells(6,16) = "Analysis"
		resWorkSheet.Cells(6,16).Font.Bold = TRUE
		resWorkSheet.Cells(6,13) = "Diff - WBNA_Cpty_Npv"
		resWorkSheet.Cells(6,13).Font.Bold = TRUE
		resWorkSheet.Cells(6,14) = "Diff - WBNA_CVA"
		resWorkSheet.Cells(6,14).Font.Bold = TRUE
		resWorkSheet.Cells(6,15) = "Diff - WBNA_DVA"
		resWorkSheet.Cells(6,15).Font.Bold = TRUE
		
		'----------------------- Deal not present in New,Base and Row number
		resWorkSheet.Cells(6,17) = "Deals - New"
		resWorkSheet.Cells(6,17).Font.Bold = TRUE
		resWorkSheet.Cells(6,18) = "Deals - Base"
		resWorkSheet.Cells(6,18).Font.Bold = TRUE
		resWorkSheet.Cells(6,19) = "Row Sequence No"
		resWorkSheet.Cells(6,19).Font.Bold = TRUE
		
		'-------------------- Create Legends
		objExcel.Cells(1,4).Interior.ColorIndex = 43
		objExcel.Cells(1,4)= "Passed"
		objExcel.Cells(2,4).Interior.ColorIndex = 46
		objExcel.Cells(2,4)= "Failed"
		objExcel.Cells(3,4).Interior.ColorIndex = 27
		objExcel.Cells(3,4)= "Warning"
		
		resWorkSheet.Cells(1,5) = 0
		resWorkSheet.Cells(2,5) = 0
		resWorkSheet.Cells(3,5) = 0
		
		resWorkSheet.Range(resWorkSheet.Cells(1,7), resWorkSheet.Cells(1,8)).Merge
		resWorkSheet.Cells(1,7) = "Total Execution time (in seconds) :"
		resWorkSheet.SaveAS(resfile)
		
		'**************************************************** Excel Coding for Result & Book file *************************************************************
		
		'--------- Split the total number of Books that needs to be compared
		sSeprator = ""
		arrFileNameArray = Split(sFileNameString,",")
	 
	 '------------------------------------ For Loop for iterating it through total number of Files under folder to be compared
	 For iRow = Lbound(arrFileNameArray) to Ubound(arrFileNameArray)
		iDifference = 0	
		sep = ""
		strDealDifference = ""
		iDealNotMatch = 0
		seprator = "" 	
		strDifference = ""
		iDealNotFoundCounter = 0
		
		'-------------- create Excel object for required Book file (to be compared)
		Set objExcel1 = CreateObject("Excel.Application")
		objExcel1.displayalerts = false
		objExcel1.Visible = False	
	
		If Instr(arrFileNameArray(iRow),"$")<=0 Then
				'------------------------------ save workbook name in result sheet
				resWorkSheet.Cells(iRowBookNameCounter,1) = arrFileNameArray(iRow)
				resWorkSheet.Cells(iRowBookNameCounter,2) = "In Progress"	
				resBook.Save
				sFilePath = objStartFolder &"\"& arrFileNameArray(iRow)	
				Set objSpread1 = objExcel1.Workbooks.Open(sFilePath)  '- open total file names in folder one by one
				
				'-------------------------------- Get the number of worksheets used
				strCount = objSpread1.Worksheets.Count
				strBookName = arrFileNameArray(iRow)
				i = 1	
				
				'------------------------------------ For loop for iteration through total number of worksheets within book
				For i = 1 To strCount		
					FirstSheetName = objExcel1.Sheets(i).Name			
					For iTabCount = Lbound(arrMultipleTabsName) to Ubound(arrMultipleTabsName)
						sSheetFound = 0
						'-------------------------------------- Compare the tab names of worksheet
						IF Lcase(trim(FirstSheetName)) = Lcase(trim(arrMultipleTabsName(iTabCount))) Then
							sFile = arrMultipleTabsName(iTabCount)				
							set sObject = objExcel1.Worksheets(FirstSheetName)				
							'---------- Call functionto retrieve deal number & NPV	
			'				Call func_SearchTab_RetrieveNPV(sFile,sObject,strBookName)
			
							strDealNumber = ""
							strWatchNPV = ""
							sSeprator = ""	
							strWatchCptyNpvWBNA = ""
							strWatchCvaWBNA = ""
							strWatchDvaWBNA = ""
								
							With sObject.UsedRange ''	
								x = .Rows.Count
								y = .Columns.Count		
							End With
							
							'------------------------------ Condition where 'NO Data' found under Tabs
							If Lcase(Trim(sObject.Cells(1,1).Value)) = Lcase(Trim("No Data")) Then
								strDealNumber = "No Data"
								strWatchNPV = "No Data"
							Else
								'--------------------------- Retrieve deal numbers and NPV values
								
								jRowNum = 0
								'---------------------------------------------------- Condition for files starting from WBNA names
								IF Instr(1,UCase(strBookName),Ucase("WBNA"))> 0 Then
									'msgbox "WBNA"
									For jRow = 2 to x								
										iDealNumbr = Trim(sObject.Cells(jRow,1).Value)
										iWatchCptyNpvWBNA = Trim(sObject.Cells(jRow,4).Value)
										iWatchCvaWBPA = Trim(sObject.Cells(jRow,5).Value)
										iWatchDvaWBPA = Trim(sObject.Cells(jRow,6).Value)
										strDealNumber = strDealNumber &	sSeprator & iDealNumbr
										strWatchCptyNpvWBNA = strWatchCptyNpvWBNA &	sSeprator & iWatchCptyNpvWBNA
										strWatchCvaWBNA = strWatchCvaWBNA &	sSeprator & iWatchCvaWBPA
										strWatchDvaWBNA = strWatchDvaWBNA &	sSeprator & iWatchDvaWBPA
										sSeprator = ","
									Next			
								Else
									'msgbox "NON - WBNA"
									For jRow = 2 to x
										'----Retrieve deal number				
										iDealNumbr = Trim(sObject.Cells(jRow,1).Value)
										strDealNumber = strDealNumber & sSeprator & iDealNumbr
										'------ retrieve watch npv value
										iWatchNPVValue = Trim(sObject.Cells(jRow,4).Value)
										strWatchNPV = strWatchNPV & sSeprator & iWatchNPVValue
										sSeprator = ","
									Next
								End IF	
							End If
			
			
			
			
							
							'########################################################## Save deal number and Watch NPV value sheets
							'------------------ For WBNA Sheets
							IF Instr(1,UCase(strBookName),Ucase("WBNA"))> 0 Then
								IF Lcase(trim(FirstSheetName)) = Lcase(trim("NEW_WachNPV")) Then
									strDealNumberNew = strDealNumber
									strWatchCptyNpvWBNANew = strWatchCptyNpvWBNA
									strWatchCvaWBNANew = strWatchCvaWBNA
									strWatchDvaWBNANew = strWatchDvaWBNA
									Exit For
								ElseIf Lcase(trim(FirstSheetName))= Lcase(trim("BASE_WachNPV")) Then
									strDealNumberBase = strDealNumber
									strWatchCptyNpvWBNABase = strWatchCptyNpvWBNA
									strWatchCvaWBNABase = strWatchCvaWBNA
									strWatchDvaWBNABase = strWatchDvaWBNA
									Exit For
								End IF
							Else
								'------------------------ For Non WbNA sheets
								IF Lcase(trim(FirstSheetName)) = Lcase(trim("NEW_WachNPV")) Then					
									strDealNumberNew = strDealNumber					
									strWatchNewNPV = strWatchNPV
									sSheetFound = 1
									Exit For
								ElseIF Lcase(trim(FirstSheetName))= Lcase(trim("BASE_WachNPV")) Then					
									strDealNumberBase = strDealNumber					
									strWatchBaseNPV = strWatchNPV					
									sSheetFound = 1
									Exit For						
								End IF	
							End IF	
						End IF
					Next		
				Next
				
				'------------------------------- Close the Opened Book object	
				objSpread1.Close
				Set objSpread1 = Nothing
				objExcel1.Quit
			
			
			'*************************************************** Code for Comparing deal number and NPV value in both files ****************************
			'---------------- WBNA Sheets
			IF Instr(1,UCase(strBookName),Ucase("WBNA"))> 0 Then
				'------------------ New Sheets
				arrDealNumberNew = Split(strDealNumberNew,",")
				arrWatchCptyNpvWBNANew = Split(strWatchCptyNpvWBNANew,",")
				arrWatchCvaWBNANew = Split(strWatchCvaWBNANew,",")
				arrWatchDvaWBNANew = Split(strWatchDvaWBNANew,",")
				'----------------- Base Sheets
				arrDealNumberBase = Split(strDealNumberBase,",")
				arrWatchCptyNpvWBNABase = Split(strWatchCptyNpvWBNABase,",")
				arrWatchCvaWBNABase = Split(strWatchCvaWBNABase,",")
				arrWatchDvaWBNABase = Split(strWatchDvaWBNABase,",")
			Else
				'############################################### Split New Sheet values
				arrDealNumberNew = Split(strDealNumberNew,",")
				arrWatchNewNPV = Split(strWatchNewNPV,",")
				'################################################# Split Base Sheet values
				arrDealNumberBase = Split(strDealNumberBase,",")
				arrWatchBaseNPV = Split(strWatchBaseNPV,",")
			End IF
			
			'----------- Total count of New Deal number
			iCountDealsTotalNewNum = Ubound(arrDealNumberNew)+1
			'------------ Total Count of base deal number 
			iCountDealtotalBaseNum = Ubound(arrDealNumberBase)+1
			
			'****************************************** Compare the total noumber of rows ****************************	
			IF Ubound(arrDealNumberNew) <> Ubound(arrDealNumberBase) Then		
				resWorkSheet.Cells(iRowBookNameCounter,20) = "No.Deal rows in New Sheet:-"& Ubound(arrDealNumberNew)+1 &vblf& "No.Deal rows in Base:-" & Ubound(arrDealNumberBase)+1
				objExcel.Cells(iRowBookNameCounter,20).Interior.ColorIndex = 27
				IF Ubound(arrDealNumberNew) > Ubound(arrDealNumberBase) Then			
		'			Call func_ReportExtraDeals(arrDealNumberNew,arrDealNumberBase)
					StrDealNumberExtra = ""
					sSeprator = ""
					
					'---------------------------- total number of Deals in new & base -------------
					iCountDealsTotalNew = Ubound(arrDealNumberNew)
					iCountDealtotalBase = 	Ubound(arrDealNumberBase)	
					
					If iCountDealsTotalNew > iCountDealtotalBase Then
						For iRowValDiff = iCountDealtotalBase+1 to iCountDealsTotalNew
							StrDealNumberExtra = StrDealNumberExtra & sSeprator & arrDealNumberNew(iRowValDiff)
							sSeprator = ","
						Next	
					Else
						For iRowValDiff = iCountDealsTotalNew+1 to iCountDealtotalBase
							StrDealNumberExtra = StrDealNumberExtra & sSeprator & arrDealNumberBase(iRowValDiff)
							sSeprator = ","
						Next
					End IF
			
					resWorkSheet.Cells(iRowBookNameCounter,21) = "Extra Deals in New Sheet:-" & StrDealNumberExtra
					objExcel.Cells(iRowBookNameCounter,21).Interior.ColorIndex = 27			
					Redim Preserve arrDealNumberNew(Ubound(arrDealNumberBase))	'-------------- new has more deals	, then it will run only for count of base but report the extra deals in new				
				Else			
		'			Call func_ReportExtraDeals(arrDealNumberNew,arrDealNumberBase)	'''''''''''' Base has more deals
					StrDealNumberExtra = ""
					sSeprator = ""
					
					'---------------------------- total number of Deals in new & base -------------
					iCountDealsTotalNew = Ubound(arrDealNumberNew)
					iCountDealtotalBase = 	Ubound(arrDealNumberBase)	
					
					If iCountDealsTotalNew > iCountDealtotalBase Then
						For iRowValDiff = iCountDealtotalBase+1 to iCountDealsTotalNew
							StrDealNumberExtra = StrDealNumberExtra & sSeprator & arrDealNumberNew(iRowValDiff)
							sSeprator = ","
						Next	
					Else
						For iRowValDiff = iCountDealsTotalNew+1 to iCountDealtotalBase
							StrDealNumberExtra = StrDealNumberExtra & sSeprator & arrDealNumberBase(iRowValDiff)
							sSeprator = ","
						Next
					End IF
		
					resWorkSheet.Cells(iRowBookNameCounter,21) = "Extra Deals in Base Sheet:-" & StrDealNumberExtra
					objExcel.Cells(iRowBookNameCounter,21).Interior.ColorIndex = 27			
				End IF 	
				
			End IF
			
			'----------------------------------------------------------------- Comparison for WBNA files		  ------------------------
			IF Instr(1,UCase(strBookName),Ucase("WBNA"))> 0 Then
			
				'--------------------------------------------------- Comparison values by storing in an array
				For iRowCount = Lbound(arrDealNumberNew) To Ubound(arrDealNumberNew)								
					IF arrDealNumberNew(iRowCount) = arrDealNumberBase(iRowCount) Then
						IF arrDealNumberNew(iRowCount) = "No Data" AND arrDealNumberBase(iRowCount) = "No Data" Then
							resWorkSheet.Cells(iRowBookNameCounter,16) = "Both New & Base sheets are blank."
							resWorkSheet.Range(resWorkSheet.Cells(iRowBookNameCounter,3), resWorkSheet.Cells(iRowBookNameCounter,15)).Merge
							objExcel.Cells(iRowBookNameCounter,1).Interior.ColorIndex = 43
							objExcel.Cells(iRowBookNameCounter,3).Interior.ColorIndex = 16	
							resBook.Save					
						Else				
							IF arrWatchCptyNpvWBNANew(iRowCount) = arrWatchCptyNpvWBNABase(iRowCount) AND _
								arrWatchCvaWBNANew(iRowCount) = arrWatchCvaWBNABase(iRowCount) AND _
								arrWatchDvaWBNANew(iRowCount) = arrWatchDvaWBNABase(iRowCount)  Then
								iWatchNPVCorrect = 2					
							Else						
								'----------------- store difference of deal number and Watch NPV value						
								resWorkSheet.Cells(iRowNumCountr,3) = arrDealNumberNew(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,7) = arrWatchCptyNpvWBNANew(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,8) = arrWatchCvaWBNANew(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,9) = arrWatchDvaWBNANew(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,10) = arrWatchCptyNpvWBNABase(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,11) = arrWatchCvaWBNABase(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,12) = arrWatchDvaWBNABase(iRowCount)
								
								resWorkSheet.Cells(iRowNumCountr,13) = arrWatchCptyNpvWBNANew(iRowCount) - arrWatchCptyNpvWBNABase(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,14) = arrWatchCvaWBNANew(iRowCount) - arrWatchCvaWBNABase(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,15) = arrWatchDvaWBNANew(iRowCount) - arrWatchDvaWBNABase(iRowCount)
								resWorkSheet.Range(resWorkSheet.Cells(iRowNumCountr,4), resWorkSheet.Cells(iRowNumCountr,6)).Merge
								objExcel.Cells(iRowNumCountr,4).Interior.ColorIndex = 16				
								iRowNumCountr = iRowNumCountr + 1
								'-------------- Save the result sheet				
								resBook.Save
								iDifference = iDifference+1								
								strDifference = strDifference & seprator & iDifference
								seprator = ","					
							End If	
						End If	
					Else
						iDealNotMatch = 1
						'-------------------- Create string for deal numbers not present under Base but present under New sheet
						resWorkSheet.Cells(iRowNumExtraDeal,17) = arrDealNumberNew(iRowCount)
						resWorkSheet.Cells(iRowNumExtraDeal,18) = arrDealNumberBase(iRowCount)
						resWorkSheet.Cells(iRowNumExtraDeal,19) = iRowCount+1
						resWorkSheet.Cells(iRowNumExtraDeal,16) = "Some Deals are missing in both sheets"
						resBook.Save
						iDealNotFoundCounter = iDealNotFoundCounter+1
						iRowNumExtraDeal = iRowNumExtraDeal + 1				
					End If			
				Next	
			Else		
				'------------------------------------ Comparison for Non WBNA files
				For iRowCount = Lbound(arrDealNumberNew) To Ubound(arrDealNumberNew)
					iWatchNPVCorrect = 0				
					IF arrDealNumberNew(iRowCount) = arrDealNumberBase(iRowCount) Then
						IF arrDealNumberNew(iRowCount) = "No Data" AND arrDealNumberBase(iRowCount) = "No Data" Then		
							resWorkSheet.Cells(iRowBookNameCounter,16) = "New & Base sheet does not have any data"
							resWorkSheet.Range(resWorkSheet.Cells(iRowBookNameCounter,3), resWorkSheet.Cells(iRowBookNameCounter,15)).Merge
							objExcel.Cells(iRowBookNameCounter,1).Interior.ColorIndex = 43
							objExcel.Cells(iRowBookNameCounter,3).Interior.ColorIndex = 16					
							objExcel.Cells(iRowBookNameCounter,2).Interior.ColorIndex = 43					
						Else
							If  arrWatchNewNPV(iRowCount) = arrWatchBaseNPV(iRowCount) Then
								iWatchNPVCorrect = 1								
							Else		
								'----------------- store difference of deal number and Watch NPV value					
								resWorkSheet.Cells(iRowNumCountr,3) = arrDealNumberNew(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,4) = arrWatchNewNPV(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,5) = arrWatchBaseNPV(iRowCount)
								resWorkSheet.Cells(iRowNumCountr,6) = arrWatchNewNPV(iRowCount) - arrWatchBaseNPV(iRowCount)
								resWorkSheet.Range(resWorkSheet.Cells(iRowNumCountr,7), resWorkSheet.Cells(iRowNumCountr,15)).Merge						
								iRowNumCountr = iRowNumCountr + 1
								'-------------- Save the result sheet				
								resBook.Save
								iDifference = iDifference+1	
								strDifference = strDifference & seprator & iDifference
								seprator = ","
							End If
						End If	
					Else
						iDealNotMatch = 1				
						'-------------------- Create string for deal numbers not present under Base but present under New sheet
						resWorkSheet.Cells(iRowNumExtraDeal,17) = arrDealNumberNew(iRowCount)
						resWorkSheet.Cells(iRowNumExtraDeal,18) = arrDealNumberBase(iRowCount)
						resWorkSheet.Cells(iRowNumExtraDeal,19) = iRowCount+1	
						resWorkSheet.Cells(iRowNumExtraDeal,16) = "Some Deals are missing in both sheets"							
						resBook.Save	
						iRowNumExtraDeal = iRowNumExtraDeal+1
						iDealNotFoundCounter = iDealNotFoundCounter+1		
					End IF
						
				Next
			End IF		
			
			seprator = ""
			'--------------------------------------------- Color coding for files where deal number and Npv value is same for both sheets
			IF strDifference = "" Then
				strDifference = 0
			End IF
		
			IF Instr(1,strDifference,1) = 0 AND arrDealNumberNew(0) = "No Data" AND arrDealNumberBase(0) = "No Data" Then
				resWorkSheet.Cells(iRowBookNameCounter,2) = "Passed"
				objExcel.Cells(iRowBookNameCounter,2).Interior.ColorIndex = 43
				resWorkSheet.Cells(1,5) = iRowPassCount+1
				iRowNumCountr = iRowNumCountr+1
				iRowPassCount = iRowPassCount+1	
				iRowBookNameCounter	= iRowBookNameCounter+1
				iRowNumExtraDeal = iRowNumExtraDeal+1	
				resBook.Save
			Else		
				IF Instr(1,strDifference,1) = 0 AND arrDealNumberNew(0) <> "No Data" AND arrDealNumberBase(0) <> "No Data" Then
					IF iDealNotMatch = 0 Then
						resWorkSheet.Cells(iRowBookNameCounter,16) = "Both New & Base sheet have same data"
						resWorkSheet.Range(resWorkSheet.Cells(iRowBookNameCounter,3), resWorkSheet.Cells(iRowBookNameCounter,15)).Merge
						objExcel.Cells(iRowBookNameCounter,1).Interior.ColorIndex = 43 ' green
						objExcel.Cells(iRowBookNameCounter,3).Interior.ColorIndex = 16 ' grey
						resWorkSheet.Cells(iRowBookNameCounter,2) = "Passed"
						objExcel.Cells(iRowBookNameCounter,2).Interior.ColorIndex = 43		' green
						resWorkSheet.Cells(1,5) = iRowPassCount+1
						iRowBookNameCounter = iRowBookNameCounter+1
						iRowNumCountr = iRowNumCountr+1
						iRowPassCount = iRowPassCount+1
						iRowNumExtraDeal = iRowNumExtraDeal + 1				
						resBook.Save			
					Else						
						'---------------- Yellow colour Warning	
						resWorkSheet.Cells(iRowBookNameCounter,2) = "Warning"
						objExcel.Cells(iRowBookNameCounter,2).Interior.ColorIndex = 27	' YEllow status column
						objExcel.Cells(iRowBookNameCounter,1).Interior.ColorIndex = 27 ' yellow book name column
						resWorkSheet.Cells(3,5) = iRowWarningCounter+1	'------ increment the warning counter
						'---Merge columns				
						resWorkSheet.Range(resWorkSheet.Cells(iRowBookNameCounter,3), resWorkSheet.Cells(iRowBookNameCounter,15)).Merge
						objExcel.Cells(iRowBookNameCounter,3).Interior.ColorIndex = 16 '--- Grey colour
						iRowWarningCounter = iRowWarningCounter+1	
						iRowBookNameCounter = iRowBookNameCounter+iDealNotFoundCounter
						iRowNumCountr = iRowNumCountr+iDealNotFoundCounter
						iRowNumExtraDeal = iRowNumExtraDeal+1
					End If	
				Else			
					resWorkSheet.Cells(2,5) = iRowFailCount+1
					resWorkSheet.Cells(iRowBookNameCounter,2) = "Failed"
					objExcel.Cells(iRowBookNameCounter,2).Interior.ColorIndex = 46  ' Red
					iRowFailCount = iRowFailCount+1
					objExcel.Cells(iRowBookNameCounter,1).Interior.ColorIndex = 46	'Red	
					
					IF iDealNotFoundCounter > iDifference Then				
						iRowNumCountr = iRowBookNameCounter+iDealNotFoundCounter
						iRowNumExtraDeal = iRowBookNameCounter+iDealNotFoundCounter
						iRowBookNameCounter = iRowBookNameCounter+iDealNotFoundCounter	
					Else
						iRowNumCountr = iRowBookNameCounter+iDifference
						iRowNumExtraDeal = iRowBookNameCounter+iDifference
						iRowBookNameCounter = iRowBookNameCounter+iDifference			
					End If				
				End IF	
				resWorkSheet.Cells(4,2) = totalfiles - (iRow+1)	
				resBook.Save
			End If	
		
			'----------- Total count of New Deal number
			If iCountDealsTotalNewNum <> iCountDealtotalBaseNum Then				
				If Lcase(Trim(resWorkSheet.Cells(iRowBookNameCounter-1,2))) = Lcase(Trim("Passed")) Then					
					resWorkSheet.Cells(iRowBookNameCounter-1,16) = "Extra Deals present in sheet but data is same for common deals"
					resWorkSheet.Cells(iRowBookNameCounter-1,2) = "Warning"	
					iRowPassCount = iRowPassCount-1
					resWorkSheet.Cells(1,5) = iRowPassCount
					objExcel.Cells(iRowBookNameCounter-1,2).Interior.ColorIndex = 27	' YEllow status column
					objExcel.Cells(iRowBookNameCounter-1,1).Interior.ColorIndex = 27 ' yellow book name colu
					resWorkSheet.Cells(3,5) = iRowWarningCounter+1
					iRowWarningCounter = iRowWarningCounter+1
					resBook.Save
				End If
			End IF	
		End If
	 Next
	 
		 'objExcel.Cells(iRowBookNameCounter,1).Interior.ColorIndex = 2
		 IF (iRow+1) > totalfiles Then
			resWorkSheet.Cells(5,2) = "Completed"	
		 Else
			resWorkSheet.Cells(5,2) = "In Complete"
			objExcel.Cells(5,2).Interior.ColorIndex = 46
		 End IF
		 
		'-------------- Quit Excel sheet
		EndTime = Timer()
		iTotalDuration = Round(FormatNumber(EndTime - StartTime))
		resWorkSheet.Cells(1,9) = iTotalDuration
		IF iTotalDuration > 60 Then
			resWorkSheet.Cells(1,10) = "Total Minutes:- " & Round((iTotalDuration/60),2)
		End If
		resWorkSheet.Range("A1:I1").Select
		resWorkUsedRange.EntireColumn.Autofit()
		resBook.Save
		resBook.Close
		objExcel.Quit
		Set objExcel = Nothing
		Set resBook = Nothing
	End IF

End Function




'/////////////////////////////// Local Function to Kill Excel session if previously opened //////////////////////////////////
Function Func_KillExcel_Session_Local()
 SET WMIServicesObject = GETOBJECT("winmgmts:" _
 & "{impersonationLevel=impersonate}!\\.\root\cimv2")

 SET qryProcesses = WMIServicesObject.ExecQuery _
 ("Select * from Win32_Process Where Name = 'EXCEL.exe'")

 xCntr = 0
 FOR EACH xlProcess in qryProcesses

  xlProcess.Terminate()
  xCntr = xCntr + 1
  NEXT
End Function


'/////////////////////////////////// Local Function to check for result file existance ///////////////////////
Function Check_ExeclFile_Existance(resfile)
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
	

	If objFSO.FileExists(resfile) Then
		msgbox "Change the Result File Name" &vblf& "Name already exist under path" &vblf& "Path:-" & resfile
		Check_ExeclFile_Existance = 1
	Else
		Check_ExeclFile_Existance = 0
	End If
End Function


'**************************************************************************************************88
Function Check_xmlFile_Existance(xmlfile)

	
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set Wscript = CreateObject("WScript.Shell")

objStartFolder = "C:\temp\Totem\template"

Set objFolder = objFSO.GetFolder(objStartFolder)


Set colFiles = objFolder.Files

For Each objFile in colFiles

    msgbox objFile.Name & " " & "template is downloaded" & " " & objStartFolder

Next
	
End Function




''********************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: createDealInNewStatusAndFillTranInfo
'' Purpose										: This function will  create a deal in new status from the template and  also fill tran info fields from the tran info window
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function createDealInNewStatusAndFillTranInfo(strWindowNames,strFieldNames,strFieldValues)

	If strToolSetName="" Then
		Call getToolSetName(strInsType)
	End If
	Win("Win_TradingManager").MBar("MBar").Select "New &Instrument~" & strToolSetName
	Call WaitForObject(Win("Win_TradeDealDetails"),20)
    Call setWindowTypeAndClearInstrument(strWindowNames)
    Call fn_FillInTradeEditField("Type", strInsType)
    Call EnterDealDetails(strFieldNames,strFieldValues)
	Call executeCloseDeal(strNewDealTrackingNo)
	wait 2
	flagFillTranInfoFromTradingManager = false
    Call fn_FillTranInfoFromTradingManager(strFieldNames, strFieldValues)	
        
End Function





'****************************************************************************************************************************************************************************

''*******************************************************************************
'' Function/Procedure Name	: fn_FillTranInfoFromTradingManager
'' Purpose										: This function will fill the tran info fields if those fields are not present in the deal detail window
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function fn_FillTranInfoFromTradingManager(strFieldNames, strFieldValues)

	Call ReportEvent("Enter deal details", "Tran Info fields of the deal  is not present in the deal detail page for  INS_TYPE " & Chr(34) & strInsType & Chr(34) & " ,So they need to be entered from Trading Manager", "INFO")
	flagMultipleFieldNames = false
	intNoOfFieldNames = 0
	intNoOfFieldValues = 0
	If InStr(strFieldNames,",")>0 Then
		arrFieldNamesTemp = Split(strFieldNames,",")
		intNoOfFieldNames = UBound(arrFieldNamesTemp)
		flagMultipleFieldNames = true
	End If
	If InStr(strFieldValues,",")>0 Then
		arrFieldValuesTemp = Split(strFieldValues,",")
		intNoOfFieldValues = UBound(arrFieldValuesTemp)
	End If
'	For j = 0 to UBound(arrFieldValuesTemp)
'		arrFieldValues(j) = arrFieldValuesTemp(j)
'	Next
	If intNoOfFieldNames<>intNoOfFieldValues Then
		If intNoOfFieldNames>intNoOfFieldValues Then
			For j = 1 to intNoOfFieldNames-intNoOfFieldValues
				arrFieldValuesTemp(intNoOfFieldValues+j) = ""
			Next
		End If
	End If
	intMaxRow = 0
    Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strToolSetName,"94","21" 
	wait 2
	Win("Win_TradingManager").Brows("Brows_TradingManager").NodeRightClick arrFieldValuesTemp(0),"97","17" 
    Win("Win_ListWindow").Menu("Menu").MenuSelect "Tran Info"
	Call WaitForObject(Win("Win_TranInfoWindow"),20)


	j = 0
	lBoxObjectNo = 0
	If Win("Win_TranInfoWindow").Exist(1) Then

		intMaxRow =  Win("Win_TranInfoWindow").LBox("LBox_TranInfoFields").GetROProperty("maxrow")
'		Set oDesc = Description.Create
'		oDesc("Class").value = "LBox"
'		Set lBoxObj = Win("Win_TranInfoWindow").ChildObjects(oDesc)
'
'		For k = 0 to lBoxObj.Count - 1
'			intMaxRow = lBoxObj(k).GetROProperty("maxrow")
'			If intMaxRow>10 Then
'				Exit For
'			End If
'			lBoxObjectNo = lBoxObjectNo+1
'		Next
		
		While j <= intNoOfFieldNames
	
			If flagMultipleFieldNames = true Then
				strFieldName = MultilineTrim(arrFieldNamesTemp(j))
				strFieldValue = MultilineTrim(arrFieldValuesTemp(j))
			Else
				strFieldName = strFieldNames
				strFieldValue = strFieldValues
			End If
			If intMaxRow > 0 Then
				For ind = 0 to intMaxRow
					Win("Win_TranInfoWindow").Activate
					strRowVal = CStr(ind)
					On Error Resume Next
					strAppFieldName = Win("Win_TranInfoWindow").LBox("LBox_TranInfoFields").GetCellValue("ByIndx", strRowVal, "1")
'					strAppFieldName = lBoxObj(lBoxObjectNo).GetCellValue("ByIndx", strRowVal, "1")
					If strAppFieldName <> "" Then
						If strAppFieldName = strFieldName Then
							strAppFieldVal = Win("Win_TranInfoWindow").LBox("LBox_TranInfoFields").GetCellValue("ByIndxByTitle",strRowVal , "Value")
'							strAppFieldVal =  lBoxObj(lBoxObjectNo).GetCellValue("ByIndxByTitle",strRowVal , "Value")
							If strAppFieldVal = strFieldValue Or Instr(strAppFieldVal,strFieldValue)>0 Then
								Call ReportEvent("Fill Tran Info fields from Trading Manager", "Value " & Chr(34) & strFieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " of INS_TYPE " & Chr(34) & strInsType & Chr(34), "PASS")
							Else
								Win("Win_TranInfoWindow").LBox("LBox_TranInfoFields").SetCellValue "ByTitle",strFieldName,"Value",strFieldValue
								wait 1
								strAppFieldVal = Win("Win_TranInfoWindow").LBox("LBox_TranInfoFields").GetCellValue("ByTitle", strFieldName, "Value")
'								strAppFieldVal = lBoxObj(lBoxObjectNo).GetCellValue("ByTitle", strFieldName, "Value")
								If strAppFieldVal = strFieldValue Or Instr(strAppFieldVal, strFieldValue)>0 Then
									Call ReportEvent("Fill Tran Info fields from Trading Manager", "Value " & Chr(34) & strFieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & "  of INS_TYPE " & Chr(34) & strInsType & Chr(34), "PASS")
								Else
									Call ReportEvent("Fill Tran Info fields from Trading Manager", "Value " & Chr(34) & strFieldValue & Chr(34) & " is NOT set in the field " & Chr(34) & strFieldName & Chr(34) & " of INS_TYPE " & Chr(34) & strInsType & Chr(34), "FAIL")
								End If
							End If
							Exit For
						End If
					End If
				Next
			Else
				Call ReportEvent("Fill Tran Info fields from Trading Manager", "Tran Info table not present in the TranInfo Window for  INS_TYPE " & Chr(34) & strInsType & Chr(34), "INFO")
			End If
            
			If SwfWindow("Win_DealEditorSaveAlert").Exist(1) Then
				SwfWindow("Win_DealEditorSaveAlert").SwfObject("Button_No").Click
			End If
			j = j + 1
		Wend

		
'		oDesc("Class").value = "IBut"
'		Set lButObj = Win("Win_TranInfoWindow").ChildObjects(oDesc)
'
'		For k = 0 to lButObj.Count-1
'			If lButObj(k).Exist(1) Then
'				lButObj(k).Click
'				wait 3
'			End If
'		Next
		If Win("Win_TranInfoWindow").IBut("IBut_Save").Exist(3) Then
			Win("Win_TranInfoWindow").IBut("IBut_Save").Click
			wait 3
			Call WaitForObject(Win("Win_TranInfoWindow"),20)
		End If	
		
		If Win("Win_TranInfoWindow").Exist(3) Then
            Win("Win_TranInfoWindow").Activate
            Win("Win_TranInfoWindow").Terminate
			Call handleAlerts()
		End If
        Call executeCloseDeal(strNewDealTrackingNo)
	Else
		Call ReportEvent("Fill Tran Info fields from Trading Manager", "Tran Info window does not exist to fill Tran Info for  INS_TYPE " & Chr(34) & strInsType & Chr(34), "INFO")
    End If
	    
End Function




''********************************************************************************************************************************************************************************

''*******************************************************************************
'' Function/Procedure Name	: setWindowTypeAndClearInstrument
'' Purpose										: This function will  set the type of window depending on the instrument type and clear the instrument type
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function setWindowTypeAndClearInstrument(strWindowNames)
    errflag = 0
	If SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Exist(3) Then
		strPopUpMessage = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
		SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
		Call ReportEvent("Enter Deal Details","The deal no. " & Chr(34) & strDealTrackingNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34) & " is locked right now, the pop up message says " & Chr(34) & strPopUpMessage & Chr(34) ,"INFO")
		Call handleAlerts()
	End If

   intNoOfWindowNames = 0
	If Instr(strWindowNames,",")>0 Then
		arrWindowNames = Split(strWindowNames,",")
		intNoOfWindowNames = UBound(arrWindowNames)
	End If
	For i = 0 to intNoOfWindowNames

		If intNoOfWindowNames>0 Then
			strWindowName = MultilineTrim(arrWindowNames(i))
		Else
			strWindowName = strWindowNames
		End If
		If strWindowName<>"" Then
			strWindowName = strWindowName & ".*"
			Win("Win_TradeDealDetails").SetTOProperty "name",strWindowName
			If Win("Win_TradeDealDetails").Exist(5) Then
				Call ReportEvent("Enter Deal Details","The deal details manager window is opened successfully for deal no " & Chr(34) & strDealTrackingNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34),"PASS")
				If Instr(strWindowName,"composer")>0 Then
					Win("Win_TradeDealDetails").MBar("MBar").Select "&Transaction~&Clear~&All"
					wait 3
					Call WaitForObject(Win("Win_TradeDealDetails"),10)
					Call fetchNewComposerDealNo()
					If strNewDealTrackingNo <> ""  And  strNewDealTrackingNo <> "0" Then
						Win("Win_TradeDealDetails").MBar("MBar").Select "&Transaction~&Clear~&All"
						wait 3
						Call WaitForObject(Win("Win_TradeDealDetails"),10)
					End If							
					Win("Win_TradeDealDetails").IBut("IBut_ProcessIns_Comp").Click
					Win("Win_TradeDealDetails").SetTOProperty "name", "ins_trans.trans_win.*"
					wait 1
					Call ReportEvent("  No","Deal No. cleared for instrument type " & Chr(34) & strInsType & Chr(34) &". New values to be filled now","INFO")
					Reporter.ReportEvent micPass,"  No","Deal No. cleared for instrument type " & Chr(34) & strInsType & Chr(34) &". New values to be filled now"
				Else
					Win("Win_TradeDealDetails").highlight
					Win("Win_TradeDealDetails").activate
					'Win("Win_TradeDealDetails").NBook("Tabs").ClickTab "Option"
					'Win("Win_TradeDealDetails").NBook("Tabs").ClickTab "Primary Input"
					wait 1
					'Win("Win_TradeDealDetails").MBar("MBar").Select "&File~Clear &Tran No."
					Win("Win_TradeDealDetails").InsightObject("InsightObject_File").Click
					Win("Win_TradeDealDetails").InsightObject("InsightObject_ClearTran").Click
					Wait 5 
					Call ReportEvent("Clear Deal No","Deal No. cleared for instrument type " & Chr(34) & strInsType & Chr(34) &"New values to be filled now","INFO")
'					If Win("Win_TradeDealDetails").exist(5) Then
					Win("Win_TradeDealDetails").activate
					WShell.SendKeys("{ESC}")
					wait 2
'						strNameProp = fn_FindDealField("Trade Date")
'						If strNameProp = "" Then
'							errflag = 1
'						End If
'					Else
'						errflag = 1
'					End if
'				
'					If errflag = 1 Then
'						SystemUtil.CloseProcessByName("olisten.exe")
'						SystemUtil.CloseProcessByName("master.exe")
'						wait 60
'						ReLogin()
'						Call fn_ClickOnMainMenuObject("Trading Manager")
'						Call WaitForObject(Win("Win_TradingManager"),20)						
'						Call executeCloseDeal(strDealTrackingNo)
'						flagItemFound = openDealDetailPage(strDealTrackingNo)
'						Call setWindowTypeAndClearInstrument(strWindowNames)
'					End If
					Reporter.ReportEvent micPass,"Clear Deal No","Deal No. cleared for instrument type " & Chr(34) & strInsType & Chr(34) &"New values to be filled now"
					Call WaitForObject(Win("Win_TradeDealDetails"),10)
					Call fetchNewDealTranNo()
					If strNewDealTrackingNo <> ""  And  strNewDealTrackingNo <> "0" Then
						Win("Win_TradeDealDetails").highlight
						Win("Win_TradeDealDetails").NBook("Tabs").ClickTab "Primary Input"
						Win("Win_TradeDealDetails").MBar("MBar").Select "&File~Clear &Tran No."
						wait 3
						Call WaitForObject(Win("Win_TradeDealDetails"),10)
					End If
				End If
				Exit For
			End If
		End IF
	Next
		

End Function






''********************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: getToolSetName
'' Purpose					: This function will  return the tool set name of a particular instrument type
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************

Function getToolSetName(strInsType)

	strQuery = "select * from instruments where name = '" & strInsType & "'"
	Call runAdHocQuery(strQuery)
	Win("Win_AdHocQueryViewer").MTEd("Edit_AdHocQueryField").Click
	WShell.SendKeys("{F9}")
	wait 2
	Win("Win_AdHocQueryViewer").Activate
	WShell.SendKeys("{F9}")
	wait 2

	flagInsFound = false
	Win("Win_AdHocQueryViewer").Activate			
	intMaxQueryRow = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")
	For j = 0 to intMaxQueryRow
		strRowNo = Cstr(j)
		strAppInsType = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"name")
		If strAppInsType=strInsType Or Instr(strAppInsType,strInsType)>0 Then
			flagInstrumentFound =  true
			strAppToolSetName = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"toolset")
			If strAppToolSetName <> "" Then
				Call ReportEvent("Finding toolset name","The  tool set name for the instrument . " & Chr(34) & strInsType & Chr(34) &  " is correctly found which is " & Chr(34) & strAppToolSetName & Chr(34),"PASS") 
			Else
				Call ReportEvent("Finding toolset name","The  tool set name for the instrument . " & Chr(34) & strInsType & Chr(34) &  " is not found , kindly check ","FAIL") 
   			End If           
			Exit For
		End If
	Next
	Win("Win_AdHocQueryViewer").Terminate
	If Win("Win_AdHocQueryViewer").Exist(3) Then
		Win("Win_AdHocQueryViewer").Close
	End If
	strToolSetName = strAppToolSetName
 
End Function

'*************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: fn_SearchInScriptEditor
'' Purpose					: This function searches for search string in the Script Editor box
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************
Function fn_SearchInScriptEditor(strSearchString)

'	Dim intPos
'	int Pos = 0
	fn_SearchInScriptEditor = False
	If Win("Win_ScriptEditor").Exist(2) Then
		wait 2
		Win("Win_ScriptEditor").PBut("PBut_Find").Click
		Call WaitForObject(Win("Win_Find"),10)
		If Win("Win_Find").Exist(2) Then
			Win("Win_Find").TEdit("TEdit_Find").SetValue strSearchString
			wait 1
			Win("Win_Find").PBut("PBut_OK").Click
			If SwfWindow("Win_DealEditorSaveAlert").Exist(1) Then
				wait 1
				SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
			Else
				wait 1
'				intLen = Len(strSearchString)
'				Win("Win_ScriptEditor").MTEd("MTEd").SetFocus
'				WShell.SendKeys "{LEFT " & intLen & "}"
'				intPos = Instr(Win("Win_ScriptEditor").MTEd("MTEd").GetROProperty("content"), strSearchString)
				fn_SearchInScriptEditor = True
			End If
		End If
	End If
'	fn_SearchInScriptEditor = intPos

End Function
'********************************************************************************************************************************************************************************************************************************
'''*******************************************************************************
'' Function/Procedure Name	: fn_CreateFoldersInThisPath
'' Purpose					: This function traverses the complete path and creates folder(s) in the path
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************
Function fn_CreateFoldersInThisPath(strPath)

	Set fso = CreateObject("Scripting.FileSystemObject")
	arrSubFolders = Split(strPath, "\")
	For i = 1 to UBound(arrSubFolders)
		strSubFolderPath = arrSubFolders(0)
		strSubFolderParent = arrSubFolders(0)
		For j = 1 to i
			strSubFolderPath = strSubFolderPath & "\" & arrSubFolders(j)
			If j < i Then
				strSubFolderParent = strSubFolderParent & "\" & arrSubFolders(j)
			End If
		Next
		If Not fso.FolderExists(strSubFolderPath) Then
			Set objParent = fso.GetFolder(strSubFolderParent)
			If Not objParent.Attributes And 1 Then
				fso.CreateFolder(strSubFolderPath)
			Else
				objParent.Attributes = objParent.Attributes - 1
				fso.CreateFolder(strSubFolderPath)
				objParent.Attributes = objParent.Attributes + 1
			End If
		End If
	Next
	Set fso = Nothing

End Function

'******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: fn_MoveMultipleFiles
'' Purpose					: This function moves folders from strFromPath to strToPath, if strToPath doesn't exist it creates the path
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************
Function fn_MoveMultipleFiles(strFromPath, strToPath)

	Set fso = CreateObject("Scripting.FileSystemObject")
	Set objFromFolder = fso.GetFolder(strFromPath)
	If objFromFolder.Files.Count > 0 Then
		fn_CreateFoldersInThisPath(strToPath)
	
		For each objFile In objFromFolder.Files
			strNewPath = strToPath & "\" & objFile.Name
			If fso.FileExists(strNewPath) Then
				objArchiveFile = fso.GetFile(strNewPath)
				arrFileName = Split(objFile.Name, ".")
				If Not objArchiveFile.Attributes And 1 Then
					objArchiveFile.Name = arrFileName(0) & "_AutoArchived_" & Replace(Replace(CStr(Now()), "/", "_"), ":", "_") & "." & arrFileName(1)
				Else
					objArchiveFile.Attributes = objArchiveFile.Attributes - 1
					objArchiveFile.Name = arrFileName(0) & "_AutoArchived_" & Replace(Replace(CStr(Now()), "/", "_"), ":", "_") & "." & arrFileName(1)
					objArchiveFile.Attributes = objArchiveFile.Attributes + 1
				End If
			End If
			If Not objFile.Attributes And 1 Then
				objFile.Move strToPath & "\"
			Else
				objFile.Attributes = objFile.Attributes - 1
				objFile.Move strToPath & "\"
				objFile.Attributes = objFile.Attributes + 1
			End If
		Next
	End If
	Set fso = Nothing

End Function

'******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: fn_RenameFolderOrFile
'' Purpose					: This function renames the file/folder in the path strFromPath to the name specified in strToName
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************
Function fn_RenameFolderOrFile(strFromPath, strToName)

	On Error resume next
	Set fso = CreateObject("Scripting.FileSystemObject")
	If strFromPath <> "" Then
		arrPath = Split(strFromPath, "\")
		strPath = arrPath(0)
		For i = 1 to UBound(arrPath) - 1
			strPath = strPath & "\" & arrPath(i)
		Next
		strNewPath = strPath & "\" & strToName
		If Instr(strToName, ".")>0 Then
			If fso.FileExists(strNewPath) Then
				arrFile = Split(strToName, ".")
				strArchiveName = arrFile(0) & "_AutoArchived_" & Replace(Replace(CStr(Now()), "/", "_"), ":", "_") & "." & arrFile(1)
				Set objFile = fso.GetFile(strNewPath)
				If Not objFile.Attributes And 1 Then
					Err.Clear()
					objFile.Name = strArchiveName
					If Err.Number <> 0 Then
						Call ReportEvent("Rename File", "File already existing in the destination folder. So archiving the file. Encountered following error while renaming the file " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Rename File", "File already existing in the destination folder. So archived the file. Successfully renamed the file " & strToName & " to the name " & strArchiveName, "PASS")
					End If
				Else
					Err.Clear()
					objFile.Attributes = objFile.Attributes - 1
					objFile.Name = strArchiveName
					objFile.Attributes = objFile.Attributes + 1
					If Err.Number <> 0 Then
						Call ReportEvent("Rename File", "File already existing in the destination folder. So archiving the file. Encountered following error while renaming the file " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Rename File", "File already existing in the destination folder. So archived the file. Successfully renamed the file " & strToName & " to the name " & strArchiveName, "PASS")
					End If
				End If
			End If
		Else
			If fso.FolderExists(strNewPath) Then
				strArchiveName = strToName &  "_AutoArchived_" & Replace(Replace(CStr(Now()), "/", "_"), ":", "_")
				Set objFolder = fso.GetFolder(strNewPath)
				If Not objFolder.Attributes And 1 Then
					Err.Clear()
					objFolder.Name = strArchiveName
					If Err.Number <> 0 Then
						Call ReportEvent("Rename Folder", "Folder already existing in the destination folder. So archiving the folder, Encountered following error while renaming the Folder " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Rename Folder", "Folder already existing in the destination folder. So archived the folder, Successfully renamed the Folder " & strToName & " to the name " & strArchiveName, "PASS")
					End If
				Else
					Err.Clear()
					objFolder.Attributes = objFolder.Attributes - 1
					objFolder.Name = strArchiveName
					objFolder.Attributes = objFolder.Attributes + 1
					If Err.Number <> 0 Then
						Call ReportEvent("Rename Folder", "Folder already existing in the destination folder. So archiving the folder. Encountered following error while renaming the folder " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Rename Folder", "Folder already existing in the destination folder. So archived the folder, Successfully renamed the folder " & strToName & " to the name " & strArchiveName, "PASS")
					End If
				End If
			End If
		End If
	End If

	If Instr(strFromPath, "\")>0 Then
		arrFromPath = Split(strFromPath, "\")
	Else
		Call ReportEvent("Rename Folder", "Path of the file/folder - " & Chr(34) & strFromPath & Chr(34) & " - doesn't seem to be correct. Kindly mention the complete path of the file/folder to be renamed", "FAIL")
	End If

	flagFile = "Nothing"
	If IsArray(arrFromPath) Then
		strLastComponent = arrFromPath(UBound(arrFromPath))
		If Instr(strLastComponent, ".")>0 Then
			flagFile = True
			If Instr(strToName, ".")<=0 Then
				Call ReportEvent("Rename File", "New file name " & Chr(34)& strToName & Chr(34) & " is not in the right format. Kindly check", "FAIL")
				flagFile = "Nothing"
			End If
		Else
			flagFile = False
			If strToName = "" Then
				Call ReportEvent("Rename Folder", "New file name " & Chr(34)& strToName & Chr(34) & " is not in the right format. Kindly check", "FAIL")
				flagFile = "Nothing"
			End If
		End If
	End If

	If flagFile <> "Nothing" Then


		If flagFile = True Then
			If fso.FileExists(strFromPath) Then
				Set objFile = fso.GetFile(strFromPath)
				Err.Clear()
				If Not objFile.Attributes And 1 Then
					objFile.Name = strToName
					If Err.Number <> 0 Then
						Call ReportEvent("Rename File", "Encountered following error while renaming the file " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Rename File", "Successfully renamed the file " & strFromPath & " to the name " & strToName, "PASS")
					End If
				Else
					Err.Clear()
					objFile.Attributes = objFile.Attributes - 1
					objFile.Name = strToName
					objFile.Attributes = objFile.Attributes + 1
					If Err.Number <> 0 Then
						Call ReportEvent("Rename File", "Encountered following error while renaming the file " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Rename File", "Successfully renamed the file " & strFromPath & " to the name " & strToName, "PASS")
					End If
				End If
			Else
				Call ReportEvent("Rename File", "File with the path " & strFromPath & " - does not exist. Kindly check", "FAIL")
			End If
		Else
		Err.Clear()
			If fso.FolderExists(strFromPath) Then
				Set objFolder = fso.GetFolder(strFromPath)
				If Not objFolder.Attributes And 1 Then
					objFolder.Name = strToName
					If Err.Number <> 0 Then
						Call ReportEvent("Rename Folder", "Encountered following error while renaming the Folder " & Chr(34) & objFolder.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Rename Folder", "Successfully renamed the folder " & strFromPath & " to the name " & strToName, "PASS")
					End If
				Else
					Err.Clear()
					objFolder.Attributes = objFolder.Attributes - 1
					objFolder.Name = strToName
					objFolder.Attributes = objFolder.Attributes + 1
					If Err.Number <> 0 Then
						Call ReportEvent("Rename Folder", "Encountered following error while renaming the Folder " & Chr(34) & objFolder.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Rename Folder", "Successfully renamed the Folder " & strFromPath & " to the name " & strToName, "PASS")
					End If
				End If
			Else
				Call ReportEvent("Rename Folder", "Folder with the path " & strFromPath & " - does not exist. Kindly check", "FAIL")
			End If
		End If
	End If
	On Error goto 0

	Set objFile = Nothing
	Set objFolder = Nothing
	Set fso = Nothing
End Function

'******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: fn_CopyFolderOrFile
'' Purpose					: This function copies the file/folder in the path strFromPath to the name specified in strToPath
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************
Function fn_CopyFolderOrFile(strFromPath, strToPath)

	Set fso = CreateObject("Scripting.FileSystemObject")
	If strFromPath <> "" AND strToPath <> "" Then
		arrFromPath = Split(strFromPath, "\")
'		arrPath = Split(strToPath, "\")
'		strPath = arrPath(0)
'		For i = 1 to UBound(arrPath)
'			strPath = strPath & "\" & arrPath(i)
'		Next
		strNewPath = strToPath & "\" & arrFromPath(UBound(arrFromPath))
		If Instr(arrFromPath(UBound(arrFromPath)), ".")>0 Then
			If fso.FileExists(strNewPath) Then
				arrFile = Split(arrFromPath(UBound(arrFromPath)), ".")
				strArchiveName = arrFile(0) & "_AutoArchived_" & Replace(Replace(CStr(Now()), "/", "_"), ":", "_") & "." & arrFile(1)
				Set objFile = fso.GetFile(strNewPath)
				If Not objFile.Attributes And 1 Then
					Err.Clear()
					objFile.Name = strArchiveName
					If Err.Number <> 0 Then
						Call ReportEvent("Copy File", "File already exists in destination path. So archiving the file. Encountered following error while renaming the file " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Copy File", "File already exists in destination path. So archived the file. Successfully renamed the file " &  arrFromPath(UBound(arrFromPath)) & " to the name " & strArchiveName, "PASS")
					End If
				Else
					Err.Clear()
					objFile.Attributes = objFile.Attributes - 1
					objFile.Name = strArchiveName
					objFile.Attributes = objFile.Attributes + 1
					If Err.Number <> 0 Then
						Call ReportEvent("Copy File", "File already exists in destination path. So archiving the file. Encountered following error while renaming the file " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Copy File", "File already exists in destination path. So archived the file. Successfully renamed the file " &  arrFromPath(UBound(arrFromPath)) & " to the name " & strArchiveName, "PASS")
					End If
				End If
			End If
		Else
			If fso.FolderExists(strNewPath) Then
				strArchiveName = arrFromPath(UBound(arrFromPath)) &  "_AutoArchived_" & Replace(Replace(CStr(Now()), "/", "_"), ":", "_")
				Set objFolder = fso.GetFolder(strNewPath)
				If Not objFolder.Attributes And 1 Then
					Err.Clear()
					objFolder.Name = strArchiveName
					If Err.Number <> 0 Then
						Call ReportEvent("Copy Folder", "Folder already exists in destination path. So archiving the folder. Encountered following error while renaming the folder " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Copy Folder", "Folder already exists in destination path. So archived the folder. Successfully renamed the folder " &  arrFromPath(UBound(arrFromPath)) & " to the name " & strArchiveName, "PASS")
					End If
				Else
					Err.Clear()
					objFolder.Attributes = objFolder.Attributes - 1
					objFolder.Name = strArchiveName
					objFolder.Attributes = objFolder.Attributes + 1
					If Err.Number <> 0 Then
						Call ReportEvent("Copy Folder", "Folder already exists in destination path. So archiving the folder. Encountered following error while renaming the folder " & Chr(34) & objFile.Name & Chr(34) & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Copy Folder", "Folder already exists in destination path. So archived the file. Successfully renamed the folder " &  arrFromPath(UBound(arrFromPath)) & " to the name " & strArchiveName, "PASS")
					End If
				End If
			End If
		End If
	End If

	If Instr(strFromPath, "\")>0 Then
		arrFromPath = Split(strFromPath, "\")
	Else
		Call ReportEvent("Copy File/Folder", "Path of the file/folder - " & Chr(34) & strFromPath & Chr(34) & " - doesn't seem to be correct. Kindly mention the complete path of the source file/folder to be copied", "FAIL")
	End If

	If Instr(strToPath, "\")<=0 Then
		Call ReportEvent("Copy File/Folder", "Path of the file/folder - " & Chr(34) & strToPath & Chr(34) & " - doesn't seem to be correct. Kindly mention the complete path of the destination file/folder", "FAIL")
	End If

	flagFile = "Nothing"
	If IsArray(arrFromPath) AND Instr(strToPath, "\")>0 Then
		strLastComponent = arrFromPath(UBound(arrFromPath))
		If Instr(strLastComponent, ".")>0 Then
			flagFile = True
		Else
			flagFile = False
		End If
	End If

	If flagFile <> "Nothing" Then

		Call fn_CreateFoldersInThisPath(strToPath)
	
		On Error resume next
		If flagFile = True Then
			If fso.FileExists(strFromPath) Then
				Set objFile = fso.GetFile(strFromPath)
				Set objToFolder = fso.GetFolder(strToPath)
				Err.Clear()
				If NOT objToFolder.Attributes And 1 Then
					objFile.Copy strToPath & "\",True
					If Err.Number <> 0 Then
						Call ReportEvent("Copy File", "Encountered following error while copying the file " &  Chr(34) & objFile.Name & Chr(34) & " from " & strFromPath & " to the location " & strToPath & " : " & Chr(34) & Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Copy File", "Successfully copied the file from " & strFromPath & " to the location " & strToPath, "PASS")
					End If
				Else
					Err.Clear()
					objToFolder.Attributes = objToFolder.Attributes - 1
					objFile.Copy strToPath & "\",True
					objToFolder.Attributes = objToFolder.Attributes + 1
					If Err.Number <> 0 Then
						Call ReportEvent("Copy File", "Encountered following error while copying the file " &  Chr(34) & objFile.Name & Chr(34) & " from " & strFromPath & " to the location " & strToPath & " : " & Chr(34) & Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Copy File", "Successfully copied the file from " & strFromPath & " to the location " & strToPath, "PASS")
					End If
				End If
			Else
				Call ReportEvent("Copy File", "File with the path " & strFromPath & " - does not exist. Kindly check", "FAIL")
			End If
		Else
			Err.Clear()
			If fso.FolderExists(strFromPath) Then
				Set objFromFolder = fso.GetFolder(strFromPath)
				Set objToFolder = fso.GetFolder(strToPath)
				If NOT objToFolder.Attributes And 1 Then
					objFromFolder.Copy strToPath & "\",True
					If Err.Number <> 0 Then
						Call ReportEvent("Copy Folder", "Encountered following error while copying the folder " &  Chr(34) & objFromFolder.Name & Chr(34) & " from " & strFromPath & " to the location " & strToPath & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Copy Folder", "Successfully copied the folder " & strFromPath & " to the location " & strToPath, "PASS")
					End If
				Else
					Err.Clear()
					objToFolder.Attributes = objToFolder.Attributes - 1
					objFromFolder.Copy strToPath & "\",True
					objToFolder.Attributes = objToFolder.Attributes + 1
					If Err.Number <> 0 Then
						Call ReportEvent("Copy Folder", "Encountered following error while copying the folder " &  Chr(34) & objFromFolder.Name & Chr(34) & " from " & strFromPath & " to the location " & strToPath & " : " & Chr(34) &Err.Description & Chr(34) & ". Kindly check", "FAIL")
					Else
						Call ReportEvent("Copy Folder", "Successfully copied the folder " & strFromPath & " to the location " & strToName, "PASS")
					End If
				End If
			Else
				Call ReportEvent("Copy Folder", "Folder with the path " & strFromPath & " - does not exist. Kindly check", "FAIL")
			End If
		End If
		On Error goto 0
	
		Set objFile = Nothing
		Set objFolder = Nothing
	End If
	Set fso = Nothing

    
End Function
'*******************************************************************************************************************************************************************************************************************************8
''*******************************************************************************
'' Function/Procedure Name	: CompareFiles
'' Purpose					: This function compares two given csv file and generate a result file with the difference
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************

Function CompareFiles(strFile1Path,strFile2Path,strComparisonResultPath)

    Set tempObjExcel=CreateObject("Excel.Application")
	tempObjExcel.Visible=False
	tempObjExcel.DisplayAlerts = False

	
	Set wbkActual = tempObjExcel.Workbooks.Open(strFile2Path)
    Set wbResultSheet = tempObjExcel.Workbooks.Open(strComparisonResultPath)
	
	getSheetCount_Act = wbkActual.Worksheets.Count
	intSheetCount_Act = 0
	tempSheetCount = intTotalSheetCount
	
    For k = 1 To getSheetCount_Act
		If wbkActual.Worksheets(k).UsedRange.Rows.Count > 1 Then
			wbkActual.Worksheets(k).UsedRange.EntireColumn.Autofit()
			wbkActual.Save
			wbkActual.Worksheets(k).UsedRange.Copy
			wbResultSheet.WorkSheets.Add(wbResultSheet.Sheets(intTotalSheetCount))
			wbResultSheet.Worksheets(intTotalSheetCount).Range("A1").PasteSpecial 13
			tempSheetName = wbkActual.Worksheets(k).Name
			If Len(tempSheetName)>30 Then
				tempSheetName = Left(tempSheetName,25) & "_" & intTotalSheetCount
			Else
				tempSheetName = tempSheetName & "_" & intTotalSheetCount
			End If
			wbResultSheet.Worksheets(intTotalSheetCount).Name = tempSheetName
			wbResultSheet.Worksheets(intTotalSheetCount).UsedRange.EntireColumn.Autofit()
			wbResultSheet.Worksheets(intTotalSheetCount).UsedRange.EntireColumn.Borders.Weight = 2
			wbResultSheet.Save
			intSheetCount_Act = intSheetCount_Act + 1
			intTotalSheetCount = intTotalSheetCount + 1
		End If
  	Next

    wbkActual.save
	wbkActual.close

	intSheetCount_Exp = 0
	Set wbkExpected = tempObjExcel.Workbooks.Open(strFile1Path)
	getSheetCount_Exp = wbkExpected.Worksheets.Count
	For k = 1 to getSheetCount_Exp
		If wbkExpected.Worksheets(k).UsedRange.Rows.Count > 1 Then
			intSheetCount_Exp = intSheetCount_Exp + 1
		End If
	Next
	
    If (intSheetCount_Act > intSheetCount_Exp) Then
        sheet_count = intSheetCount_Exp
        extraActual_sheet = intSheetCount_Act - intSheetCount_Exp     
    Else
        sheet_count = intSheetCount_Act
        extraExpected_sheet = intSheetCount_Exp - intSheetCount_Act
    End If

	arrWorkBookName(intWorkBookNo) = strFileName
	arrWorkBookSheetCount(intWorkBookNo) = sheet_count
    intWorkBookNo = intWorkBookNo + 1
	flagNewSheet = false
    For k = 1 To sheet_count
            
        getLastRow = 0
        getLastColumn = 0
		intNoOfSheetWiseDiff = 0

		wbkExpected.Worksheets(k).UsedRange.EntireColumn.Autofit()
		wbkExpected.Save

'		strSheetName = wbkExpected.Worksheets(k).Name
'		strConnectionStringDriver_Expected = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strFile1Path + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=2"""
'		Set objConnDriver_Expected = CreateObject("ADODB.Connection")
'		objConnDriver_Expected.Open strConnectionStringDriver_Expected
'		Set objTestDataDriver_Expected = CreateObject("ADODB.Recordset")	
'		objTestDataDriver_Expected.CursorLocation = 3
'		strSqlDriver_Expected = "SELECT * from [" & strSheetName & "$]"
'		objSheetData_Expected.Open strSqlDriver_Expected, objConnDriver_Expected
'		strExpectedSheetValue = objSheetData_Expected.Fields.Item(0)
'
'		strSheetName = wbResultSheet.Worksheets(tempSheetCount).Name
'		strConnectionStringDriver_Result = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strComparisonResultPath + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=2"""
'		Set objConnDriver_Result = CreateObject("ADODB.Connection")
'		objConnDriver_Result.Open strConnectionStringDriver_Result
'		Set objTestDataDriver_Result = CreateObject("ADODB.Recordset")	
'		objTestDataDriver_Result.CursorLocation = 3
'		strSqlDriver_Result = "SELECT * from [" & strSheetName & "$]"
'		objSheetData_Result.Open strSqlDriver_Result, objConnDriver_Result
'		strResultSheetValue = objSheetData_Result.Fields.Item(0)
'
'		If strExpectedSheetValue <> strResultSheetValue Then

			temprow_expected = wbkExpected.Worksheets(k).UsedRange.Rows.Count
			temprow_actual = wbResultSheet.Worksheets(tempSheetCount).UsedRange.Rows.Count
			If (temprow_expected > temprow_actual) Then
				getLastRow = temprow_expected
			Else
				getLastRow = temprow_actual
			End If              
			
			tempcolumn_expected = wbkExpected.Worksheets(k).UsedRange.Columns.Count
			tempcolumn_actual = wbResultSheet.Worksheets(tempSheetCount).UsedRange.Columns.Count
			If (tempcolumn_expected > tempcolumn_actual) Then
				getLastColumn = tempcolumn_expected
			Else
				getLastColumn = tempcolumn_actual
			End If
			
			arrSheetName(intSheetNo) = wbResultSheet.Worksheets(tempSheetCount).Name
			flagNewSheet = true
			wbResultSheet.Worksheets(tempSheetCount).Range(wbResultSheet.Worksheets(tempSheetCount).Cells(1,1), wbResultSheet.Worksheets(tempSheetCount).Cells(1,getLastColumn)).Interior.ColorIndex=15
			wbResultSheet.Worksheets(tempSheetCount).Range(wbResultSheet.Worksheets(tempSheetCount).Cells(1,1), wbResultSheet.Worksheets(tempSheetCount).Cells(1,getLastColumn)).Font.Bold = True
			wbResultSheet.Worksheets(tempSheetCount).Range(wbResultSheet.Worksheets(tempSheetCount).Cells(1,1), wbResultSheet.Worksheets(tempSheetCount).Cells(1,getLastColumn)).Borders.Weight = 2
			wbResultSheet.Worksheets(tempSheetCount).Cells(1,getLastColumn+2).value = "DIFFERENCE"
			wbResultSheet.Worksheets(tempSheetCount).Cells(1,getLastColumn+2).Interior.ColorIndex=15
			wbResultSheet.Worksheets(tempSheetCount).Cells(1,getLastColumn+2).Font.Bold = True
			wbResultSheet.Worksheets(tempSheetCount).Range(wbResultSheet.Worksheets(tempSheetCount).Cells(1,getLastColumn+2), wbResultSheet.Worksheets(tempSheetCount).Cells(getLastRow,getLastColumn+2)).HorizontalAlignment = -4108
			wbResultSheet.Worksheets(tempSheetCount).Range(wbResultSheet.Worksheets(tempSheetCount).Cells(1,getLastColumn+2), wbResultSheet.Worksheets(tempSheetCount).Cells(getLastRow,getLastColumn+2)).Borders.Weight = 2
			wbResultSheet.Worksheets(tempSheetCount).UsedRange.EntireColumn.Autofit()
	
			For i = 1 To getLastRow
			 flagDiffRowFound = true
			 For j = 1 To getLastColumn
			 
					
				  strExpVal = wbkExpected.Worksheets(k).Cells(i, j).Text
				  strActVal = wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Text
				  
				  
				  If (strActVal = "" And strExpVal <> "") Then
					'40 is color code for yelloish pink
					wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Interior.ColorIndex = 40
					If Not (wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Comment Is Nothing) Then
						 wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Comment.Delete
					End If
					wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).AddComment ("Base Sheet : " & strExpVal)
					intNoOfSheetWiseDiff = intNoOfSheetWiseDiff+1
					intTotalNoOfDifference = intTotalNoOfDifference+1
					If flagNewSheet = true Then
						arrSheetRowVal(intSheetNo) = i
						flagNewSheet = false
						flagDiffRowFound = false
					End If
					If flagDiffRowFound = true Then
						arrSheetRowVal(intSheetNo) = arrSheetRowVal(intSheetNo) & " , " & i
						flagDiffRowFound = false		
					End If

					wbResultSheet.Worksheets(tempSheetCount).Cells(i,getLastColumn+2).value = "FALSE"
					wbResultSheet.Worksheets(tempSheetCount).Cells(i,getLastColumn+2).Interior.ColorIndex=40
									
				  ElseIf (strActVal <> "" And strExpVal = "") Then
					wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Interior.ColorIndex = 40
					If Not (wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Comment Is Nothing) Then
						 wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Comment.Delete
					End If
					wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).AddComment ("Base Sheet : No Value")  
					intNoOfSheetWiseDiff = intNoOfSheetWiseDiff+1
					intTotalNoOfDifference = intTotalNoOfDifference+1
					If flagNewSheet = true Then
						arrSheetRowVal(intSheetNo) = i
						flagNewSheet = false
						flagDiffRowFound = false
					End If
					If flagDiffRowFound = true Then
						arrSheetRowVal(intSheetNo) = arrSheetRowVal(intSheetNo) & " , " & i
						flagDiffRowFound = false		
					End If

					wbResultSheet.Worksheets(tempSheetCount).Cells(i,getLastColumn+2).value = "FALSE"
					wbResultSheet.Worksheets(tempSheetCount).Cells(i,getLastColumn+2).Interior.ColorIndex=40
													 
				  ElseIf strActVal <> strExpVal Then
						'22 is color code for Redish pink
						wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Interior.ColorIndex = 22
						If Not (wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Comment Is Nothing) Then 
							wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Comment.Delete
						End If
						If IsNumeric(strActVal) Then
							intDifference = Abs(strExpVal-strActVal)
							wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).AddComment ("Base Sheet : " & strExpVal & vbNewLine & "Difference : " & intDifference)
						Else
							wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).AddComment ("Base Sheet : " & strExpVal)
						End If
					
                        intNoOfSheetWiseDiff = intNoOfSheetWiseDiff+1
						intTotalNoOfDifference = intTotalNoOfDifference+1
						If flagNewSheet = true Then
							arrSheetRowVal(intSheetNo) = i
							flagNewSheet = false
							flagDiffRowFound = false
						End If
						If flagDiffRowFound = true Then
							arrSheetRowVal(intSheetNo) = arrSheetRowVal(intSheetNo) & " , " & i
 							flagDiffRowFound = false		
						End If

						wbResultSheet.Worksheets(tempSheetCount).Cells(i,getLastColumn+2).value = "FALSE"
						wbResultSheet.Worksheets(tempSheetCount).Cells(i,getLastColumn+2).Interior.ColorIndex=40
																
'				  Else
					'43 is color code for Green
'					wbResultSheet.Worksheets(tempSheetCount).Cells(i, j).Interior.ColorIndex = 4
					
				  End If
			 
				Next
			Next

'		End If
		arrSheetNameNoOfDiff(intSheetNo) = intNoOfSheetWiseDiff
		tempSheetCount = tempSheetCount+1
		intSheetNo = intSheetNo+1
	Next


    wbkExpected.Save
    wbkExpected.Close
    wbResultSheet.Save
    wbResultSheet.Close
	
    	
End Function




'******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: buildResultSummerySheet_CFTC
'' Purpose										: This function creates the result summery sheet  for the cftc comparison result
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function buildResultSummerySheet_Comparison(strBaseOutPutFilesPath,strQaOutPutFilesPath,strComparisonResultPath)

	Set tempObjExcel=CreateObject("Excel.Application")
	tempObjExcel.Visible=False
	tempObjExcel.DisplayAlerts = False
    Set wbResultSheet = tempObjExcel.Workbooks.Open(strComparisonResultPath)
    Set reportSummerySheet = wbResultSheet.Worksheets("Sheet1")
	reportSummerySheet.Name = "ComparisonResultSummary"
	reportSummerySheet.Move(wbResultSheet.Worksheets(1))

	reportSummerySheet.Cells(1,1).Value = "Result Summery Report"
	reportSummerySheet.Cells(2,1).Value = "Execution Date"
	reportSummerySheet.Cells(2,2).Value = Date()
	reportSummerySheet.Cells(3,1).Value = "Tester"
	reportSummerySheet.Cells(3,2).Value = Environment("UserName")
	reportSummerySheet.Cells(4,1).Value = "Base Sheet Path"
	reportSummerySheet.Cells(4,2).Value = strBaseOutPutFilesPath
	reportSummerySheet.Cells(5,1).Value = "QA Sheet Path"
	reportSummerySheet.Cells(5,2).Value = strQaOutPutFilesPath
    reportSummerySheet.Cells(6,1).Value = "Total Execution Duration"
	reportSummerySheet.Cells(6,2).Value = totalExecutionTime(comparisonStartTime,comparisonEndTime)
	reportSummerySheet.Cells(7,1).Value = "Total Number Of Difference Found"
	reportSummerySheet.Cells(7,2).Value = intTotalNoOfDifference

	reportSummerySheet.Cells(1,1).Interior.ColorIndex=43
	reportSummerySheet.Cells(1,1).Font.Bold = True
	reportSummerySheet.Cells(1,1).Borders.Weight = 4
	reportSummerySheet.Range(reportSummerySheet.Cells(2,1), reportSummerySheet.Cells(7,1)).Interior.ColorIndex=15
	reportSummerySheet.Range(reportSummerySheet.Cells(2,2), reportSummerySheet.Cells(7,2)).Interior.ColorIndex=40
	reportSummerySheet.Range(reportSummerySheet.Cells(2,2), reportSummerySheet.Cells(7,2)).HorizontalAlignment = -4108
	reportSummerySheet.Range(reportSummerySheet.Cells(2,1), reportSummerySheet.Cells(7,2)).Borders.LineStyle = 1
		
	intReportStartPos = 10

	reportSummerySheet.Cells(intReportStartPos,1).Value = "Work Book Name"
	reportSummerySheet.Cells(intReportStartPos,2).Value = "Work Sheet Name"
	reportSummerySheet.Cells(intReportStartPos,3).Value = "No Of Difference"
	reportSummerySheet.Cells(intReportStartPos,4).Value = "Rows Impacted"
	reportSummerySheet.Range(reportSummerySheet.Cells(intReportStartPos,1), reportSummerySheet.Cells(intReportStartPos,4)).Interior.ColorIndex=15
	reportSummerySheet.Range(reportSummerySheet.Cells(intReportStartPos,1), reportSummerySheet.Cells(intReportStartPos,4)).Font.Bold = True
	reportSummerySheet.Range(reportSummerySheet.Cells(intReportStartPos,1), reportSummerySheet.Cells(intReportStartPos,4)).HorizontalAlignment = -4108
	reportSummerySheet.Range(reportSummerySheet.Cells(intReportStartPos,1), reportSummerySheet.Cells(intReportStartPos,4)).Borders.LineStyle = 1
	reportSummerySheet.Range(reportSummerySheet.Cells(intReportStartPos,1), reportSummerySheet.Cells(intReportStartPos,4)).Borders.Weight = 2
	
	intReportStartPos = intReportStartPos+1
	intTempWorkBookNo = 0
	intTempWorkBookSheetCount = 0
	intTempNo = 0
	reportSummerySheet.Cells(intReportStartPos,1).Value = arrWorkBookName(intTempWorkBookNo)
'	intTempWorkBookNo = intTempWorkBookNo+1
	For i  = 0 to intSheetNo-1
		intTempWorkBookSheetCount = CInt(arrWorkBookSheetCount(intTempWorkBookNo))
		If   intTempWorkBookSheetCount = intTempNo Then
			intReportStartPos = intReportStartPos + 1
			reportSummerySheet.Cells(intReportStartPos,1).Value = arrWorkBookName(intTempWorkBookNo+1)
			intTempWorkBookNo = intTempWorkBookNo+1
			intTempNo = 0
        End If
		reportSummerySheet.Cells(intReportStartPos,2).Value = arrSheetName(i)
		reportSummerySheet.Cells(intReportStartPos,2).Hyperlinks.Add reportSummerySheet.Cells(intReportStartPos,2), wbResultSheet.Name, "'" & arrSheetName(i) & "'" & "!A1"
		reportSummerySheet.Cells(intReportStartPos,3).Value = arrSheetNameNoOfDiff(i)
		If arrSheetRowVal(i)="" Then
			reportSummerySheet.Cells(intReportStartPos,4).Value = "No Difference Found"
		Else
			reportSummerySheet.Cells(intReportStartPos,4).Value = "Row Nos :  " & arrSheetRowVal(i)
		End If		
		reportSummerySheet.Range(reportSummerySheet.Cells(intReportStartPos,1), reportSummerySheet.Cells(intReportStartPos,4)).Interior.ColorIndex=40
		reportSummerySheet.Range(reportSummerySheet.Cells(intReportStartPos,1), reportSummerySheet.Cells(intReportStartPos,4)).Borders.LineStyle = 1
		reportSummerySheet.Range(reportSummerySheet.Cells(intReportStartPos,1), reportSummerySheet.Cells(intReportStartPos,3)).HorizontalAlignment = -4108
		intTempNo = intTempNo + 1
		intReportStartPos = intReportStartPos + 1
	Next


	reportSummerySheet.UsedRange.EntireColumn.Autofit()	
	wbResultSheet.Save
	wbResultSheet.close
	
End Function




'******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: filesToXlsFormat
'' Purpose										: This function converts the files in xls format
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function filesToXlsFormat(strTempFilesPath)

    Dim xlApp, xlWkb, SourceFolder,TargetFolder,file
	Set xlApp = CreateObject("excel.application")
	Set fs = CreateObject("Scripting.FileSystemObject")
	
	Const xlNormal=1
    xlApp.Visible = false
	xlApp.DisplayAlerts = false

	strConvertedFilesPath = strTempFilesPath & "\" & "ConvertedFiles"
	Call fn_CreateFoldersInThisPath(strConvertedFilesPath)
	
	for each file in fs.GetFolder(strTempFilesPath).files
	  
	  BaseName= fs.getbasename(file)
	  tempFullName = fs.GetFileName(file)
	  Set xlWkb = xlApp.Workbooks.OpenXML(file,2,2)
	  FullTargetPath=strConvertedFilesPath & "\" & BaseName & ".xls"
	  xlWkb.SaveAs FullTargetPath, xlNormal
	  xlWkb.close
		
	  Call ReportEvent("Files conversion to XLS", "The file " & Chr(34) & tempFullName & Chr(34) & " is successfully converted in .xls format at the path " & Chr(34) & strTempFilesPath & Chr(34), "PASS")

	next

	Set xlWkb = Nothing
	Set xlApp = Nothing
	Set fs = Nothing

	

End Function





'******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: sortTotemFiles
'' Purpose					: This function sort few columns in the totem files
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************

Function sortColumnsInXlFile(strTempFilesPath,ByVal strTempFileName,strTempColumnsToSort)

    If Instr(strTempColumnsToSort,";")>0 Then
		arrColumnsToSort = Split(strTempColumnsToSort,";")
   	End If

	Set fs = CreateObject("Scripting.FileSystemObject")
	for each file in fs.GetFolder(strTempFilesPath).files
      BaseName= fs.getbasename(file)
	  If Instr(BaseName,strTempFileName)>0 Then
		  strTempFileName = strTempFilesPath & "\" & BaseName & ".xls"
		  Exit For
	  End If
	Next

	Set fs = Nothing

	strColumnsNo = getColumnNoFromName(strTempFileName,strTempColumnsToSort)
	arrColumnsNo = Split(strColumnsNo,",")

	Const xlAscending = 1
	Const xlDescending = 2
    Const xlYes = 1
    Const xlTopToBottom = 1
    	
	Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = False
	objExcel.DisplayAlerts = False
	Set objWorkbook =objExcel.Workbooks.Open(strTempFileName)
	Set objWorksheet = objWorkbook.Worksheets(1)
	objWorksheet.Sort.SortFields.Clear
	For j = 0 to UBound(arrColumnsNo)
		strRange = arrColumnsNo(j) & 1
		objWorksheet.Sort.SortFields.Add objWorksheet.Range(strRange),,xlAscending
	Next
	objWorksheet.Sort.SetRange objWorksheet.UsedRange
	objWorksheet.Sort.Header=xlYes
    objWorksheet.Sort.Orientation = xlTopToBottom
	objWorksheet.Sort.Apply

	objWorkbook.Save
	objWorkbook.close
	objExcel.Quit

	Call ReportEvent("XLS file header sorting", "The headers " & Chr(34) & strTempColumnsToSort & Chr(34) & " is successfully sorted in the file " & Chr(34) & strTempFileName & Chr(34), "PASS")

End Function




'******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: sortTotemFiles
'' Purpose					: This function sort few columns in the totem files
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************

Function getColumnNoFromName(strFileName,strColumnsName)

	If Instr(strColumnsName,";")>0 Then
		arrColumnsName = Split(strColumnsName,";")
	Else
		Dim arrColumnsName(1)
		arrColumnsName(0) = strColumnsName
	End If

	Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = False
	objExcel.DisplayAlerts = False
	Set objWorkbook = objExcel.WorkBooks.Open(strFileName)
	Set objSheet = objWorkbook.Worksheets(1)
	intColumnCount = objSheet.UsedRange.Columns.Count

    strColumnNos = ""
	strSeperator = ""
	For i = 0 to UBound(arrColumnsName)
		For j = 1 to intColumnCount
			strExcelData = objSheet.Cells(1,j).Value
			If Instr(strExcelData,":")>0 Then
				strExcelData = Split(strExcelData,":")(1)
			End If
			If LCase(arrColumnsName(i))=LCase(strExcelData) Then
				intColNo = ConvertNoToAlphabet(j)
				strColumnNos = strColumnNos & strSeperator & intColNo
				strSeperator = ","
				Exit For
			End If
		Next
	Next

    objWorkbook.Close
	objExcel.Quit
    getColumnNoFromName = strColumnNos


End Function



'******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: ConvertNoToAlphabet
'' Purpose					: This function will convert a numerical value into corresponding alphabet
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************

Function ConvertNoToAlphabet(intNo)

	strCorrespondingAlphabet = ""
	strAlphabet = "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z"
	arrAlphabet = Split(strAlphabet,",")
	If intNo <= 26 Then
		strCorrespondingAlphabet = arrAlphabet(intNo-1)
	Else
		intTempNo = intNo-26
		strCorrespondingAlphabet = "A" & arrAlphabet(intTempNo-1)
	End If


	ConvertNoToAlphabet = strCorrespondingAlphabet

End Function


'****************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: ReadFromConfigFile
'' Purpose										: This function reads the param strParamToRead from Totem config file. Config file location is read from global variable strTotemConfigFilePath
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function ReadFromConfigFile(strParamToRead)

   Set fso = CreateObject("Scripting.FileSystemObject")

   If fso.FileExists(strTotemConfigFilePath) Then
	   Set objTextFile = fso.OpenTextFile(strTotemConfigFilePath, 1)
	   strFileContent = objTextFile.ReadAll
	Else
		Exit Function
   End If

	strSubString = Chr(34) & strParamToRead & Chr(34) & " value=" & Chr(34)
	intStartPos = Instr(strFileContent, strSubString)

	If intStartPos = 0 Then
		strSubString = Chr(34) & strParamToRead & Chr(34) & " value = " & Chr(34)
		intStartPos = Instr(strFileContent, strSubString)
	End If

	If intStartPos > 0 Then
		intNewStartPos = intStartPos+Len(strSubString)
		intEndPos = Instr(intNewStartPos, strFileContent, Chr(34))
		intLen = intEndPos - intNewStartPos
		strTarget = Mid(strFileContent, intNewStartPos, intLen)
		ReadFromConfigFile = strTarget
	Else
		Call ReportEvent("Read Param from config file", "Parameter " & Chr(34) & strParamToRead & Chr(34) & " is not found in the config file - " & strTotemConfigFilePath & ". Kindly check", "FAIL")
		ReadFromConfigFile = ""
	End If
	
End Function

'******************************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: fn_ConvertDateFormat
'' Purpose										: This function converts 12hrs date strTimeStamp format into 24 hrs format and vice versa based on the input intFormat
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function fn_ConvertDateFormat(strTimeStamp, intFormat)

	arrSplitTimeStamp  = Split(strTimeStamp, " ")
	arrTimeSplit = Split(arrSplitTimeStamp(1), ":")

	arrSplitDate = Split(arrSplitTimeStamp(0), "/")
	If arrSplitDate(0) < 10 And Len(arrSplitDate(0)) = 1Then
		arrSplitDate(0) = "0" & arrSplitDate(0)
	End If
	If arrSplitDate(1) < 10 AND Len(arrSplitDate(1)) = 1 Then
		arrSplitDate(1) = "0" & arrSplitDate(1)
	End If
	strDate = ""
	For j = 0 to UBound(arrSplitDate)
		strDate = strDate & arrSplitDate(j) & "/"
	Next
	strDate = Left(strDate, Len(strDate) - 1)

	arrSplitTimeStamp(0) = strDate
	If intFormat = 12 Then

		strIndication = "AM"
		fn_ConvertDateFormat = arrSplitTimeStamp(0) & " "
		If arrTimeSplit(0) > 12 Then
			arrTimeSplit(0) = arrTimeSplit(0) - 12
			If arrTimeSplit(0) < 10 Then
				arrTimeSplit(0) = 0 & arrTimeSplit(0)
			End If
			strIndication = "PM"
		End If

		For j = 0 to UBound(arrTimeSplit)
			fn_ConvertDateFormat = fn_ConvertDateFormat & arrTimeSplit(j) & ":"
		Next
		fn_ConvertDateFormat = Left(fn_ConvertDateFormat, Len(fn_ConvertDateFormat)-1) & " " & strIndication

	Else

		If arrSplitTimeStamp(UBound(arrSplitTimeStamp)) = "PM" Then
			arrTimeSplit(0) = arrTimeSplit(0) + 12
		End If
		fn_ConvertDateFormat = arrSplitTimeStamp(0) & " "
		For j = 0 to UBound(arrTimeSplit)
			fn_ConvertDateFormat = fn_ConvertDateFormat & arrTimeSplit(j) & ":"
		Next
		fn_ConvertDateFormat = Left(fn_ConvertDateFormat, Len(fn_ConvertDateFormat)-1)
	End If
End Function

'******************************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: setTime
'' Purpose										: This function performs date operation i.e. ADD or SUBTRACT (in seconds) and returns the result date
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function setTime(strTimeStamp, strSeconds, strOperation)

	If strOperation <> "" Then
		If UCase(strOperation) = "ADD" Then
			setTime = DateAdd("s", Cint(strSeconds), strTimeStamp)
		ElseIf UCase(strOperation)  = "SUBTRACT" Then
			setTime = DateAdd("s", - Cint(strSeconds), strTimeStamp)
		Else
			setTime = ""
			Call ReportEvent("Set Time", "Unable to recognize the operation. Kindly specify the right operation to perform on date", "FAIL")
		End If
	End If

End Function

'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: ReadTotemLogFile()
'' Purpose										: Loads and runs the Totem task by selecting each Template given in the list of templates in data sheet
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function ReadTotemLogFile(strLogFilePath, strTimeStamp)
   Dim strFileContent

	Set fso = CreateObject("Scripting.FileSystemObject")

	If strTimeStamp <> "" Then
			strTimeStampToCheck = fn_ConvertDateFormat(strTimeStamp, 24)

	End If

	If fso.FileExists(strLogFilePath) Then
		Set objTextFile = fso.OpenTextFile(strLogFilePath, 1)
		strFileContent = objTextFile.ReadAll
	End If

	If strFileContent = "" Then
		Exit Function
	End If

	flagContinue = True
	i = 0
	intStartPos = 0
	strBeforeTimeStamp = fn_ConvertDateFormat(CStr(setTime(strTimeStampToCheck, 8, "SUBTRACT")), 24)
	If strBeforeTimeStamp = "" Then
		Exit Function
	End If

	While flagContinue
		intPos = Instr(strFileContent, strBeforeTimeStamp)
		If intPos >0 Then
			intStartPos = intPos
			flagContinue = False
		ElseIf i <= 60 Then
			i = i + 1
			strBeforeTimeStamp = fn_ConvertDateFormat(CStr(setTime(strBeforeTimeStamp, 1 , "SUBTRACT")), 24)
		Else
			flagContinue = False
		End If
	Wend

	If intStartPos = 0 Then
		intStartPos = Instr(strFileContent, strTimeStampToCheck)
		If intStartPos = 0 Then
			intStartPos = 1
		End If
	End If

	intEndPos = Len(strFileContent)
	intLen = intEndPos - intStartPos

	strTarget = Mid(strFileContent, intStartPos, intLen)

	arrSplitTimeStamp =  Split(strTimeStampToCheck, " ")
	arrSplitTarget = Split(strTarget, arrSplitTimeStamp(0))
	strFinal = "<table><tr><td>Please find the error log below : </td></tr><tr><td>" & arrSplitTimeStamp(0)
	For i = 1 to UBound(arrSplitTarget)
		strFinal = strFinal & " " & arrSplitTarget(i) & vbCrLf & "</td></tr><tr><td>" & arrSplitTimeStamp(0)
	Next

	strFinal = Left(strFinal, Len(strFinal) - Len(arrSplitTimeStamp(0))) & "</table>"

	ReadTotemLogFile = strFinal

	Set fso = Nothing
	Set objTextFile = Nothing
End Function





'***************************************************************************************************************************




Function fn_FillInTradeEditField_Alternate(strFieldNames,strFieldValues)


	Call WaitForObject(Win("Win_TradeDealDetails"),20)
	Win("Win_TradeDealDetails").Activate
	flagMultipleFieldNames = false
	intNoOfFieldNames = 0
	intNoOfFieldValues = 0
	
	If InStr(strFieldNames,",")>0 Then
		arrFieldNamesTemp = Split(strFieldNames,",")
		intNoOfFieldNames = UBound(arrFieldNamesTemp)
		flagMultipleFieldNames = true
	End If
	If InStr(strFieldValues,",")>0 Then
		arrFieldValuesTemp = Split(strFieldValues,",")
		intNoOfFieldValues = UBound(arrFieldValuesTemp)
	End If

	If intNoOfFieldNames<>intNoOfFieldValues Then
		Call ReportEvent("Field Names and Field Values","No of field names and no of field values are not matching, kindly check","INFO")
		If intNoOfFieldNames>intNoOfFieldValues Then
			For j = 1 to intNoOfFieldNames-intNoOfFieldValues
				arrFieldValuesTemp(intNoOfFieldValues+j) = ""
			Next
		End If
	End If

	For j = 0 to intNoOfFieldNames
		If flagMultipleFieldNames = true Then
			strFieldName = MultilineTrim(arrFieldNamesTemp(j))
			strFieldValue = MultilineTrim(arrFieldValuesTemp(j))
		Else
			strFieldName = strFieldNames
			strFieldValue = strFieldValues
		End If
	
		If strFieldName = "Action" Then
			strExpectedDealStatus = strFieldValue
			If strStartingInsType = "COM" OR flagFillTranInfoFromTradingManager = True Then
				Call processDeal("to New")
				Exit For
			Else
				Call processDeal(strFieldValue)
			End If
						
		Else
		
			Set oDescTEdit = Description.Create
			oDescTEdit("Class").value = "TEdit"
			oDescTEdit("label").value = strFieldName
			If oDescTEdit.Exist(1) Then
				oDescTEdit.SetValue fieldValue
				oDescTEdit.WaitProperty "content",fieldValue,10
				Call WaitForObject(Win("Win_TradeDealDetails"),10) 
			Else
				
			End If
					
		End If
	Next


	Dim strTabName : strTabName = ""
	Dim TEditObj
    On error Resume Next
	intNoOfField = 0
	If Instr(fieldName,"/") Then
		arrFieldName = Split(fieldName,"/")
		intNoOfField = UBound(arrFieldName)
	End If

	Win("Win_TradeDealDetails").Activate

    For k = 0 to intNoOfField
	
		If intNoOfField>0 Then
			strFieldName = MultilineTrim(arrFieldName(k))
		Else
			strFieldName = MultilineTrim(fieldName)
		End If

		flagTabClick = True
		If Instr(strFieldName, "-")>0 Then
			arrSplitFieldName = Split(strFieldName, "-")
			strFieldName = arrSplitFieldName(0)
			Err.Clear
			If strLastClickedTab <> arrSplitFieldName(1) Then
				Win("Win_TradeDealDetails").NBook("NBook_Tabs").ClickTab arrSplitFieldName(1)
				strLastClickedTab = arrSplitFieldName(1)
			End If
			Call WaitForObject(Win("Win_TradeDealDetails"),10)
			If Err.Number = 0 Then
				If NOT dictDealTabsClicked.Exists(strLastClickedTab) Then
					dictDealTabsClicked.Add strLastClickedTab, "Tab"
				End If
				Call ReportEvent("Click Tab in Trade Detail Page", "Clicked on Tab " & Chr(34) & arrSplitFieldName(1) & Chr(34) &  " to fill the field " & Chr(34) & arrSplitFieldName(0 & Chr(34)), "PASS")
			Else
				flagTabClick = False
			End If
		Else
			If strLastClickedTab <> "Primary Input" Then
				Win("Win_TradeDealDetails").NBook("NBook_Tabs").ClickTab "Primary Input"
				strLastClickedTab = "Primary Input"
			End If
		End If
		 
		If flagTabClick Then

			If flagCompDeal = false Then
				strTempFieldName = "%" & strFieldName
			Else
				If  Instr(strFieldName,"Ctp")>0 Or Instr(strFieldName,"Our")>0 Then
					tempArr = Split(strFieldName," ")
					strTempFieldName = "%" & tempArr(1)
				Else
					strTempFieldName = "%" & strFieldName
				End If
			End If
	
			flagFieldFound = false
'			Set oDesc = Description.Create
'			oDesc("Class").value = "TEdit"
'			Set obj = Win("Win_TradeDealDetails").ChildObjects(oDesc)
'			
'			For l = 0 to obj.Count - 1	
				Set oDescTEdit = Description.Create
				oDescTEdit("Class").value = "TEdit"
				oDescTEdit("label").value = strFieldName
				Set objTEdit = Win("Win_TradeDealDetails").ChildObjects(oDescTEdit)
				wait 1
				strNameProp = TEditObj.GetROProperty("name") 
				flagContinue = true
				If Instr(strNameProp,strTempFieldName)>0 Then
	
					If flagCompDeal = true Then
						If Instr(strFieldName,"Ctp")>0 Then
							If Instr(strNameProp,"ext")>0 Then
								flagContinue = true
							Else
								flagContinue = false
							End If
						End If
					End If					
					
					If  flagContinue = true Then					
						
						strInputText = TEditObj.GetROProperty("content")
						If (strInputText <> fieldValue)  Then

							If fieldValue <> ""  And Instr(strTempFieldName,"Ref")<=0 AND Instr(strTempFieldName,"Date")<=0 AND Instr(strTempFieldName,"Our Pfolio")<=0 AND Instr(strTempFieldName,"Our Book")<=0 And objTEdit.Count = 1 Then
								
								Win("Win_TradeDealDetails").TEdit("Edit_TradeDetailEditFields").SetTOProperty "label",strFieldName
								wait 1
								Set TEditObj = Win("Win_TradeDealDetails").TEdit("Edit_TradeDetailEditFields")
								TEditObj.Click
								wait 1
								TEditObj.RightClick
								wait 3
                                If Win("Win_ListWindow").LBox("LBox_List").Exist(5) Then
									Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",fieldValue
								Else
									TEditObj.SetValue fieldValue
								End If
								wait 3
							    Call WaitForObject(Win("Win_TradeDealDetails"),10)
								TEditObj.Click
								
							Else
								Set TEditObj = objTEdit(0)
								TEditObj.SetValue fieldValue
								wait 3
								Call WaitForObject(Win("Win_TradeDealDetails"),10)
								TEditObj.Click
							End If

							If strFieldName = "Type" Then
								Call WaitForObject(Win("Win_TradeDealDetails"),10)
								Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
							Else
								strInputText = TEditObj.GetROProperty("content")
								If (strInputText <> fieldValue) Or Instr(strInputText,fieldValue)<=0 Then
									wait 1
									TEditObj.SetValue fieldValue
									wait 3
									Call WaitForObject(Win("Win_TradeDealDetails"),10)
									TEditObj.Click
									strInputText = TEditObj.GetROProperty("content")
								End If
								If (strInputText=fieldValue) Or Instr(strInputText,fieldValue)>0 Then
									Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
								Else
									Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is not set in the field " & Chr(34) & strFieldName & Chr(34) & " the value which is set to is " & Chr(34) & strInputText & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34)  & " of instrument type " &  Chr(34) & strInsType &  Chr(34),"FAIL") 
								End If
							End If							
						Else
							Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
						End If
						flagFieldFound = true
						Exit For
					End If
				End If
'			Next

				
			If flagFieldFound=false Then
				Win("Win_TradeDealDetails").Activate
				Set oDesc = Description.Create
				oDesc("Class").value = "LBox"
				Set obj = Win("Win_TradeDealDetails").ChildObjects(oDesc)
				
				For l = 0 to obj.Count - 1
					strNameProp = obj(l).GetROProperty("name") 
					Win("Win_TradeDealDetails").LBox("LBox_TranInfo").SetTOProperty "name",strNameProp
					wait 1
					intTempMaxRow = Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetROProperty("maxrow")
					For m = 0 to intTempMaxRow
						strRowNo = CStr(m)
						strAppFieldName = Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndx",strRowNo,"1")
						If  strAppFieldName<>"" Then
							If strAppFieldName=strFieldName Or Instr(strAppFieldName,strFieldName)>0 Then
								strAppFieldValue =  Win("Win_TradeDealDetails").LBox("LBox_TranInfo").GetCellValue("ByIndxByTitle",strRowNo,"Value")
								If strAppFieldValue<>fieldValue Then
									Win("Win_TradeDealDetails").Activate
									wait 1
									Win("Win_TradeDealDetails").LBox("LBox_TranInfo").RefreshObject
									wait 1
									If Instr(strLastClickedTab, "SDR")>0 Then
										Win("Win_TradeDealDetails").LBox("LBox_TranInfo").SetCellValue "ByIndxByTitle",strRowNo,"side 1",fieldValue
										wait 1
										WShell.SendKeys "{ENTER}"
									ElseIf Instr(strLastClickedTab, "Primary Input")>0 Then
										Win("Win_TradeDealDetails").LBox("LBox_TranInfo").SetCellValue "ByIndxByTitle",strRowNo,"Value",fieldValue
									End If
									wait 1
								Else
									Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
								End If
								flagFieldFound = true
								Exit For
							End If
						End If
					Next
	
					If flagFieldFound=true Then
						Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is correctly set in the field " & Chr(34) & strFieldName & Chr(34) & " for the deal no " &  Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) ,"PASS") 
						Exit For
					End If
				Next
			Else
				Exit For
			End If
		Else
			Call ReportEvent("Click on Tab in Trade Detail Page", "Error while clicking the tab - " & arrSplitFieldName(1) & ". Kindly check", "FAIL")
		End If
	Next

	If flagFieldFound=false Then
		Call ReportEvent("Object recognition","The object " & Chr(34) & fieldName & Chr(34) & " is not present in the Application for the deal no " & Chr(34) & strDealTrackingNo &  Chr(34) & " of instrument type " &  Chr(34) & strInsType &  Chr(34) & " , Kindly check","INFO") 
	End If
	

End Function

'*******************************************************************************************************************************************************************************************

Function fn_FindDealField(strFieldName)

	If flagCompDeal = false Then
		strTempFieldName = "%" & strFieldName
	Else
		If  Instr(strFieldName,"Ctp")>0 Or Instr(strFieldName,"Our")>0 Then
			tempArr = Split(strFieldName," ")
			strTempFieldName = "%" & tempArr(1)
			strTempLabelFieldName = trim( tempArr(1))
		Else
			strTempFieldName = "%" & strFieldName
		End If
	End If
	
	Set oDesc = Description.Create
	oDesc("Class").value = "TEdit"
	Set obj = Win("Win_TradeDealDetails").ChildObjects(oDesc)
	
	fn_FindDealField = ""
	For l = 0 to obj.Count - 1			
		strNameProp = obj(l).GetROProperty("name") 
		strlabelProp = obj(l).GetROProperty("label")
		If strFieldName = "Ref" Then
			If strlabelProp = "" Then
				strlabelProp = "Ref"
			End if	
		End if
		If (Instr(strNameProp,strTempFieldName)>0 And strlabelProp = strFieldName) OR flagCompDeal = True Then
			If strFieldName = "Ref" Then
				
				strchk = right(strNameProp,3)
				If strchk = "Ref" Then
					flagCompDeal = false
				Else
					flagCompDeal = true
				End If
				If strInsType = "ENGY-SO-P" or  strInsType = "ENGY-SO-R" Then
					flagCompDeal = false
				End If
			End If
			If flagCompDeal <> true Then
				If strFieldName = "Trader" Then
				  strchk1 = right(strNameProp,6)
				   If strchk1 = "Trader" Then
					 flagCompDeal = false
				   Else
					flagCompDeal = true
				   End If
			    End If
			End If
			
			If flagCompDeal = true Then
				If (Instr(strNameProp,strTempFieldName)>0 And strlabelProp = strTempLabelFieldName) Then	
					If Instr(strFieldName,"Ctp")>0 Then
						If Instr(strNameProp,"ext")>0 Then
							fn_FindDealField = strNameProp
							Exit For
						End If
					Else
						If strFieldName = "Trader" Then
				 			strchk1 = right(strNameProp,6)
				  				If strchk1 = "Trader" Then
				   					fn_FindDealField = strNameProp
				   					Exit For
				   				End IF
				   		eLSE
						    fn_FindDealField = strNameProp
						    Exit For
					    End If
				    End if
				  End if
			Else
				fn_FindDealField = strNameProp
				Exit For			
			End If
		End If
	Next
	
End Function

'*******************************************************************************************************************************************************************************************

Function fn_GetExternalDealRef(strNewTranTrackingNo)
	
	strAppDealRef = ""
	strQuery = "SELECT type_name, value from ab_tran_info_view where tran_num=" & strNewTranTrackingNo & " and type_name = 'external_deal_ref'"
	Call runAdHocQuery(strQuery)
	Win("Win_AdHocQueryViewer").MTEd("Edit_AdHocQueryField").Click

	Win("Win_AdHocQueryViewer").Activate			
	strMaxQueryRow = CStr(Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow"))

	strAppTypeName = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strMaxQueryRow,"type_name")
	
	If strAppTypeName="external_deal_ref" Or Instr(strAppTypeName,"external_deal_ref")>0 Then
		strAppDealRef = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strMaxQueryRow,"value")
		Call ReportEvent("Fetching external_deal_ref","The external_deal_ref for the Tran No " & Chr(34) & strNewTranTrackingNo & Chr(34) & " of instrument " & Chr(34) & strInsType & Chr(34) &  " is " & Chr(34) & strAppDealRef & Chr(34),"PASS")
	End If
	
	Win("Win_AdHocQueryViewer").Terminate
	If Win("Win_AdHocQueryViewer").Exist(3) Then
		Win("Win_AdHocQueryViewer").Close
	End If
	fn_GetExternalDealRef = strAppDealRef
	
End Function


'**************************************************************************************************************************************



'******************************************************************************************************************************************************************

Function ImportScripts(strArgFolderPath, strArgFileNames, strArgFieldValues, strFieldToSet, strScriptNames)


	strFinalStatus = ""
	arrFileNames = Split(strArgFileNames, ",")
	arrFieldValues = Split(strArgFieldValues, ",")
	arrScriptNames = Split(strScriptNames, ",")
	ImportScripts = False
	
	If (UBound(arrFileNames) <> UBound(arrFieldValues) OR UBound(arrFieldValues) <> UBound(arrScriptNames)) Then
		Call ReportEvent("Check the count of FileNames, Types & ScriptNames", "All three provided data from excel should have same count. Looks like they are not equal. With this, importing scripts is not possible. Kindly check","FAIL")
'		print "data mismatch"
	Else

		For i = 0 to UBound(arrFileNames)
		
			If NOT Win("Win_ScriptEditor").Exist(1) Then
	
				If NOT Win("Win_TradingManager").Exist(1) Then
					Call fn_ClickOnMainMenuObject("Trading")
					Call WaitForObject(Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager"),20)
				End If
			
				If Win("Win_TradingManager").Exist(1) Then
					Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Script Editor"
					Call WaitForObject(Win("Win_ScriptEditor"), 20)
				End If
			End If		

	
		If Win("Win_ScriptEditor").Exist(1) Then
		
				Wait 2
				Win("Win_ScriptEditor").MBar("MBar").Select "&File~&Import"
				
				Window("Win_OIWindow").SetTOProperty "regexpwndtitle", "\[.*\]"
				Window("Win_OIWindow").RefreshObject
				Wait 1
				Call WaitForObject(Window("Win_OIWindow").Dialog("Dialog_Select"), 10)
				flagValSet = False
				If Window("Win_OIWindow").Dialog("Dialog_Select").Exist(2) Then
					Window("Win_OIWindow").Dialog("Dialog_Select").WinEdit("WinEdit_FileName").Set strArgFolderPath & "\" & arrFileNames(i)
					Wait 1
					Window("Win_OIWindow").Dialog("Dialog_Select").WinObject("WinObj_Open").Click
					Wait(5)
				
					If LCase(strFieldToSet) = "type" Then
					
						Wait 1
						
						
						'Call fn_SetEditFieldValue(Win("Win_ScriptEditor"), Win("Win_ScriptEditor").TEdit("TEdt_Type"), "%Type:", arrFieldValues(i))
						Win("Win_ScriptEditor").TEdit("TEdt_Type").RightClick
						Wait 3

						If Win("Win_ListWindow").LBox("LBox_List").Exist(3) Then
							Wait 3

							If LCase(arrFieldValues(i)) = "inlcude" Then
								Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle","Include",""
							Else
								Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",arrFieldValues(i),""
							End If
							
							Wait 2
					
'							sTypeSelected = Win("Win_ScriptEditor").TEdit("TEdt_Type").GetROProperty("content")
'							If LCase(sTypeSelected) = LCase(arrFieldValues(i)) Then
'								Call ReportEvent("Set the value " & Chr(34) & arrFieldValues(i) & Chr(34) & " for the field Type", "Value set successfully","PASS")
''								print "value set successfully"
'								
'							Else
'								Win("Win_ScriptEditor").TEdit("TEdt_Type").RightClick
'								Wait 1
'								Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",arrFieldValues(i),""
'								Wait 1
'								sTypeSelected = Win("Win_ScriptEditor").TEdit("TEdt_Type").GetROProperty("content")
'								If LCase(sTypeSelected) <> LCase(arrFieldValues(i)) Then
'									Call ReportEvent("Set the value " & Chr(34) & arrFieldValues(i) & Chr(34) & " for the field Type", "Value was NOT set","FAIL")
''									print "value not set"
'								Else
'									Call ReportEvent("Set the value " & Chr(34) & arrFieldValues(i) & Chr(34) & " for the field Type", "Value set successfully","PASS")
''									print "value set successfully"
'									flagValSet = True
'								End If
'							End If
						Else
							Call ReportEvent("Select Type of the script", "No options in the list to select","FAIL")
'							print "no option in list"
						End If
						
					ElseIf LCase(strFieldToSet) = "category" Then
						flagValSet = fn_SetMultipleSelectionField("Win_ScriptEditor", "Category", "Choose One or More", arrFieldValues(i))
					End If
				
					flagValSet = True
					If flagValSet Then
						
						If LCase(arrFileNames(i)) = "w_ltrreports_p.mls" Then
							Wait 1
							flagScriptContains = fn_SearchInScriptEditor(Chr(34) & "TESTFILE" & Chr(34) & "          ,  1,    TRUE")
							
							If NOT flagScriptContains Then
								Call ReportEvent("Check for " & Chr(34) & "TESTFILE" & Chr(34) & " flag in W_LTRReport_p script", "Looks like the TESTFILE flag is NOT set to TRUE. Kindly check", "FAIL")
								ImportScripts = False
							Else
								Call ReportEvent("Check for " & Chr(34) & "TESTFILE" & Chr(34) & " flag in W_LTRReport_p script", "TESTFILE flag is set to TRUE", "PASS")
							End If
							
						End If
						
						Win("Win_ScriptEditor").PBut("PBut_Save").Click
						Wait 1
						Call handleAlerts()
						Call WaitForObject(Win("Win_SystemExperationDate"), 10)
						
						If Win("Win_SystemExperationDate").Exist(1) Then
							Win("Win_SystemExperationDate").TEdit("TEdit_ScriptName").SetValue arrScriptNames(i)
							Wait 1

							Call fn_ClickButton_2(Win("Win_SystemExperationDate"), Win("Win_SystemExperationDate").PBut("PBut_GenericButton"), "&OK")
							
							Call handleAlerts()
							
							If Win("Win_SystemExperationDate").Exist(1) Then
								Call fn_ClickButton_2(Win("Win_SystemExperationDate"), Win("Win_SystemExperationDate").PBut("PBut_GenericButton"), "&Cancel")
								ImportScripts = False
							Else
								Call ReportEvent("Import the script", "Import from path - " & strArgFolderPath & "\" & arrFileNames(i) & " was successful","PASS")
'								print "import successful"
								ImportScripts = True								
							End If
						Else
							Call ReportEvent("Import the script", "While Importing from path - " & strArgFolderPath & "\" & arrFileNames(i) & ", popup to enter Script name did not appear","INFO")
'							print "import not successful"
							ImportScripts = False
						End If
					End If
				Else
					Call ReportEvent("Import the script", "While Importing from path - " & strArgFolderPath & "\" & arrFileNames(i) & ", popup to enter script path did not appear","FAIL")
'					print "no popup to enter script name"
					ImportScripts = False
				End If
				
				If ImportScripts Then
					strFinalStatus = strFinalStatus & "true,"
				Else
					strFinalStatus = strFinalStatus & "false,"
				End If
	
			Else
				ImportScripts = False
				Call ReportEvent("Launch Script Editor", "Script Editor is not launched","FAIL")
	'			print "no script editor"
			End If

		
		If Win("Win_ScriptEditor").Exist(1) Then
			Win("Win_ScriptEditor").Terminate
			If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
				Wait 1
				SwfWindow("Win_DealEditorSaveAlert").SwfObject("Button_No").Click
			End If	
		End If
		
		If Win("Win_TradingManager").Exist(2) Then
			Win("Win_TradingManager").Terminate
		End If
	Next
	End If
	

	
	If Instr(strFinalStatus, "false")>0 Then
		ImportScripts = False
	Else
		ImportScripts = True
	End If
	
End Function

'*****************************************************************************************************************************************

Function fn_SetMultipleSelectionField(strParenWindName, strFieldName, strColName, strValuesToSelect)
	
	'strTempFieldName = "%" & strFieldName
    flagFieldFound = true
'	Set oDesc = Description.Create
'	oDesc.Add "Class", "TEdit"
'    Set obj = Win(strParenWindName).ChildObjects(oDesc)
    
    arrValuesToSelect = Split(strValuesToSelect, "+")
    fn_SetMultipleSelectionField = True
		
'	For l = 0 to obj.Count - 1
'		
'		strNameProp = obj(l).GetROProperty("name")
'		If Instr(strNameProp,strTempFieldName)>0 Then
'			flagFieldFound = true
'			Exit For
'		End If
'	Next
	
	If flagFieldFound Then

		'Win(strParenWindName).TEdit("TEdit_CommonEditFields").SetTOProperty "name",strNameProp
		wait 2
		strInputText = Win(strParenWindName).TEdit("TEdit_CommonEditFields").GetROProperty("content")
		If strInputText <> "" Then
			If LCase(strInputText) <> "none" Then
				Win(strParenWindName).TEdit("TEdit_CommonEditFields").RightClick
				Wait 1
						
				If Win("Win_ListWindow").LBox("LBox_List").Exist(2) Then
					arrCurrValues = SPlit(strInputText, "+")
					For each strCurrValue in arrCurrValues
						Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle", strCurrValue, strColName					
					Next
					Win("Win_ListWindow").TBut("TBut_OK").Click
					strInputText = Win(strParenWindName).TEdit("TEdit_CommonEditFields").GetROProperty("content")
				Else
					Call ReportEvent("Deselect already selected values of the field " & Chr(34) & strFieldName & Chr(34), "List box did not appear", "INFO")
				End If
			End If
		End If
			
		Win(strParenWindName).TEdit("TEdit_CommonEditFields").RightClick
		Wait 1
		If Win("Win_ListWindow").LBox("LBox_List").Exist(2) Then
			For each strValToSelect in arrValuesToSelect
				Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle", strValToSelect, strColName					
			Next
			Win("Win_ListWindow").TBut("TBut_OK").Click
		End If
		
		strInputText = Win(strParenWindName).TEdit("TEdit_CommonEditFields").GetROProperty("content")
		
		If UBound(Split(strInputText, "+")) <> UBound(Split(strValuesToSelect, "+")) Then
			Call ReportEvent("Select multiple values for field " & Chr(34) & strFieldName & Chr(34), "Expected = " & strValuesToSelect & ", Actual = " & strInputText, "FAIL")
			fn_SetMultipleSelectionField = False
		Else
			strInputText = strInputText & "+"
			
			For each strValToSelect in arrValuesToSelect
				strSubStr = strValToSelect & "+"
				If Instr(strInputText, strSubStr)<=0 Then
					Call ReportEvent("Select multiple values for field " & Chr(34) & strFieldName & Chr(34), "Field value " & Chr(34) & strValToSelect & Chr(34) & " is not selected", "INFO")
					fn_SetMultipleSelectionField = False
				End If
			Next
		End If
	Else
		Call ReportEvent("Select multiple values for field " & Chr(34) & strFieldName & Chr(34), "Field was NOT found", "FAIL")
		fn_SetMultipleSelectionField = False
	End If
End Function

'**************************************************************************************************************************************

Function fn_SelectVariable_SystemWideConfig(strFoldersList, strVarName)

	arrFoldersList = Split(strFoldersList, ",")
	
	found = False
	Win("Win_SystemWideConfig").Activate

	iMaxRow = Win("Win_SystemWideConfig").LBox("LBox_Groups").GetROProperty("maxrow")
	For i = 0 to iMaxRow
		
		sRowData = Win("Win_SystemWideConfig").LBox("LBox_Groups").GetCellValue("ByIndxByTitle", CStr(i), "Group")
		If sRowData = arrFoldersList(0) Then
			Win("Win_SystemWideConfig").LBox("LBox_Groups").CellClick "ByIndxByTitle", CStr(i), "Group"
			found = True
			Exit For
		End If
	Next

	If found Then
	
		folderFound = False
		iNewMaxRow = Win("Win_SystemWideConfig").LBox("LBox_Groups").GetROProperty("maxrow")
		iAddedRows = iNewMaxRow - iMaxRow
	
		If iAddedRows > 0 Then

			For j = i+1 to i+iAddedRows
				
				sRowData = Win("Win_SystemWideConfig").LBox("LBox_Groups").GetCellValue("ByIndxByTitle", CStr(j), "Group")
				If sRowData = arrFoldersList(1) Then
					Win("Win_SystemWideConfig").LBox("LBox_Groups").CellClick "ByIndxByTitle", CStr(j), "Group"
					folderFound = True
					Exit For
				End If
			next

			If folderFound Then
				iNewestRows = Win("Win_SystemWideConfig").LBox("LBox_Groups").GetROProperty("maxrow")
				
				iAddedRows = iNewestRows - iNewMaxRow
				
				If iAddedRows > 0 Then
					For k = j+1 to j+iAddedRows
						
						sVarName = Win("Win_SystemWideConfig").LBox("LBox_Groups").GetCellValue("ByIndxByTitle", CStr(k), "Variable Name")
						If sVarName = UCase(strVarName) Then
							Win("Win_SystemWideConfig").LBox("LBox_Groups").CellClick "ByIndxByTitle", CStr(k), "Variable Name"
							Exit For
						End If
					Next
				End If
			End If
		End If
	End If
End Function

'***************************************************************************************************************************************************************************************************

Function fn_ClickButton_2(objParentObject, objButtonObject, strNamePattern)
	
	fn_ClickButton_2 = False
	Set odesc = Description.Create()
	odesc.Add "Class", "PBut"

	arrPattern = Split(strNamePattern, ",")

	iCounter = 2
	
	While iCounter > 0

		flagObjFound = False
		Set ChildObjs = objParentObject.ChildObjects(odesc)
		If ChildObjs.Count > 0 Then
			For i = 0 to ChildObjs.Count - 1
				strName = ChildObjs(i).GetROProperty("name")
				
				If Instr(LCase(strName), LCase(arrPattern(0)))>0 Then
					If UBound(arrPattern)>0 Then
						If Instr(LCase(strName), LCase(arrPattern(1)))>0 Then
							flagObjFound = True
						End If
					Else
						flagObjFound = True
					End If
					
					If flagObjFound Then
						objButtonObject.SetTOProperty "name", strName
						Wait 1
						objButtonObject.RefreshObject
						Wait 1
						Err.Clear
						On Error Resume next
						Wait 1
						objButtonObject.Click
						If Err.Number <> 0 Then
							Err.Clear
							Wait 1
							objButtonObject.Click
							
							If Err.Number <> 0 Then
								Call ReportEvent("Click button Object", "Unable to click the button with pattern " & arrPattern(1), "FAIL")
							End If
						End If
						On Error Goto 0
						Exit For					
					End If
	
				End If
			Next
		End If
		If flagObjFound Then
			iCounter = 0
			fn_ClickButton_2 = True
		Else
			iCounter = iCounter - 1
		End If
	WEnd
	
	If NOT flagObjFound Then
		Call ReportEvent("Click Button Object", "Button object with pattern " & Chr(34) & strNamePattern & Chr(34) & " was not found", "FAIL")
	End If
	
	Set odesc = Nothing
	Set ChildObjs = Nothing
End Function

'******************************************************************************************************************************************************************************************************

Function fn_AddServerNodesInEndur(sArgNodeNames, sArgOSLoginNames, sArgHostNames, sArgEndurLoginNames)
	
	strNodeNames = sArgNodeNames & ",LocalNode"
	strOSLoginNames = sArgOSLoginNames & "," & Environment("UserName")
	strHostNames = sArgHostNames & "," & Environment("LocalHostName")
	strEndurLoginNames = sArgEndurLoginNames & "," & strPublicEndurLoginName
	
	arrNodeNames = Split(strNodeNames, ",")
	arrOSLoginNames = Split(strOSLoginNames, ",")
	arrHostNames = Split(strHostNames, ",")
	arrEndurLoginNames = Split(strEndurLoginNames, ",")
	
	strNodesToCheck = "," & strNodeNames & ","
	strNodesPresent = ""
	
	strEachNodeStatus = ""
	
	fn_AddServerNodesInEndur = False
	If UBound(arrNodeNames) = UBound(arrOSLoginNames) AND UBound(arrOSLoginNames) = UBound(arrHostNames) AND UBound(arrHostNames) = UBound(arrEndurLoginNames) Then

		If NOT Win("Win_ServicesManager").Exist(2) Then

			Call fn_ClickOnMainMenuObject("Services Mgr")
			Call WaitForObject(Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement"),20)
			wait 3
		End If

		If Win("Win_ServicesManager").Exist(2) Then

			Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement").ClickTab("Server Management")
			Call WaitForObject(Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement"),20)
			wait 3

			For i = 0 to UBound(arrNodeNames)
				
				intMaxRow = Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").GetROProperty("maxrow")
				
				For j = 1 To intMaxRow
					strAppNodeName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").GetCellValue("ByIndxByTitle", CStr(j), "Server Node Name")
					strAppOSLoginName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").GetCellValue("ByIndxByTitle", CStr(j), "O/S Login Name")
					strAppHostName  = Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").GetCellValue("ByIndxByTitle", CStr(j), "Host Name")
					strAppEndurLoginName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").GetCellValue("ByIndxByTitle", CStr(j), "Endur Login Name")
					
					If (LCase(strAppNodeName) = LCase(arrNodeNames(i))) OR (strAppOSLoginName = arrOSLoginNames(i) AND strAppHostName = arrHostNames(i) AND strAppEndurLoginName = arrEndurLoginNames(i)) Then
						Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").CellClick "ByIndxByTitle", CStr(j), "Status"
						Wait 1
						Win("Win_ServicesManager").MBar("MBar_ServiceManager_MenuBar").Select "&File~&Delete Server Node"
						Wait 1
						If SwfWindow("Win_DealEditorSaveAlert").Exist(1) Then
							Call handleAlerts()
							If Win("Win_ServerUsage").Exist(2) Then
								Win("Win_ServerUsage").Terminate
							End If
							Call ReportEvent("Delete if the Node already exists", "server node " & Chr(34) & strAppNodeName & Chr(34) & " could not be deleted. Editing the same Node for node " & Chr(34) & arrNodeNames(i) & Chr(34), "Info")
							Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").SetCellValue "ByIndxByTitle", CStr(j), "Server Node Name", arrNodeNames(i)
							Wait 1
							Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").SetCellValue "ByIndxByTitle", CStr(j), "O/S Login Name", arrOSLoginNames(i)
							Wait 1
							Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").SetCellValue "ByIndxByTitle", CStr(j), "Host Name", arrHostNames(i)
							Wait 1
							Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").SetCellValue "ByIndxByTitle", CStr(j), "Endur Login Name", arrEndurLoginNames(i)
							Wait 1
							Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").Click
							Call handleAlerts()

							strEachNodeStatus = strEachNodeStatus & "true" & ","
							arrNodeNames(i) = "skip"
						Else
							Call ReportEvent("Delete if the Node already exists", "server node " & Chr(34) & strAppNodeName & Chr(34) & " is deleted successfully", "Info")
						End If
						
						Exit For
					End If
				Next
			Next
			
			For k = 0 to UBound(arrNodeNames)
				If arrNodeNames(k) <> "skip" Then

					Win("Win_ServicesManager").MBar("MBar_ServiceManager_MenuBar").Select "&File~&New Server Node"
					Wait 1
					intMaxRow = CStr(Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").GetROProperty("maxrow"))
		
					Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").SetCellValue "ByIndxByTitle", CStr(intMaxRow), "Server Node Name", arrNodeNames(k)
					Wait 1
					Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").SetCellValue "ByIndxByTitle", CStr(intMaxRow), "O/S Login Name", arrOSLoginNames(k)
					Wait 1
					Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").SetCellValue "ByIndxByTitle", CStr(intMaxRow), "Host Name", arrHostNames(k)
					Wait 1
					Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").SetCellValue "ByIndxByTitle", CStr(intMaxRow), "Endur Login Name", arrEndurLoginNames(k)
					Wait 1
					Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").Click
					Wait 1
					If SwfWindow("Win_DealEditorSaveAlert").Exist(1) Then
						Call handleAlerts()
						Call ReportEvent("Added New Server Node", "New server node " & Chr(34) & arrNodeNames(k) & Chr(34) & " could NOT be added successfully", "Fail")
						strEachNodeStatus = strEachNodeStatus & "false" & ","
					Else
						Call ReportEvent("Added New Server Node", "New server node " & Chr(34) & arrNodeNames(k) & Chr(34) & " added successfully", "Pass")
						strEachNodeStatus = strEachNodeStatus & "true" & ","
					End If
				End If	
			Next
		Else
			Call ReportEvent("Launch Services Manager window", "Services Manager window is not launched", "Fail")
		End If
	Else
		Call ReportEvent("Add New Server Nodes", "Count of ServerNodeNames, OSLoginNames, HostNames & EndurLoginNames provided should be equal. Kindly check the data sheet", "Fail")
	End If
	
	If Instr(strEachNodeStatus, "false")<=0 AND strEachNodeStatus <> "" Then
		fn_AddServerNodesInEndur = True
	End If
	
	If Win("Win_ServicesManager").Exist(2) Then
		Win("Win_ServicesManager").Terminate
		Call handleAlerts()
	End If
End Function

'*************************************************************************************************************************************

Function fn_StartServices(strArgServicesNames, strArgHostNames)
    On Error Resume Next
    Dim strComputer
    Dim objWMIService
    Dim colServiceList
    Dim objService
    
	arrServicesName = Split(strArgServicesNames, ",")
	arrHostNames = Split(strArgHostNames, ",")
		    
	If UBound(arrServicesName) = UBound(arrHostNames) Then

		strPrevComp = ""
		For i = 0 to UBound(arrHostNames)

		    'Get the WMI Service object
		    
		    If strPrevComp <> arrHostNames(i) Then

				Set objWMIService = Nothing
				strComputer = UCase(arrHostNames(i)) & ".ent.wfb.bank.corp"
			    Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\cimv2")
			    
			    If Err.Number <> 0 Then
			        Call ReportEvent("Capturing WMI service object"," Could not capture WMI Service object","FAIL")
			    	Environment("AbortExecution") = True
			    End If
			End If
			
		    Set colServiceList = objWMIService.ExecQuery("SELECT * FROM Win32_Service")
		    'Set colServiceList = objWMIService.ExecQuery("SELECT * FROM Win32_Service WHERE DisplayName = ""ABCD""")
		    If Err.Number <> 0 Then
		        Call ReportEvent("Executing query to get services","Unable to get the list of services","FAIL")'fail msg
		        Environment("AbortExecution") = True
		    End If

		    For each objService In colServiceList
		        If LCase(arrServicesName(i)) = LCase(objService.DisplayName) Then
		            strState = objService.State
		            If strState = "Running" Then
		            	Call ReportEvent("Start Service ","Service:  " & objService.DisplayName & " is already Running","PASS")'Pass Code
		                strRetVal = objService.StopService()
		                Wait(5)
		                If strRetVal = 0 Then
		                    Call ReportEvent("Stop Service","Service:  " & objService.DisplayName & "  is stopped successfully","PASS")'Pass Code
		                    strRetVal = objService.StartService()
		                    If strRetVal = 0 Then
		                        Call ReportEvent("Start Service after stoping it","Service:  " & objService.DisplayName & "  is started again successfully","PASS")'Pass Code
		                    Else
		                        Call ReportEvent("Start Service after stoping it","Service:  " & objService.DisplayName & "  is NOT started","FAIL")'Fail Code
		                        Environment("AbortExecution") = true
		                    End If
		                Else
		                    Call ReportEvent("Stop Service","Service:  " & objService.DisplayName & " could not be stopped successfully","FAIL")'Pass Code'Fail code
		                    Environment("AbortExecution") = true
		                End If
		            Else
		                strRetVal = objService.StartService()
		                Wait(5)
		                If strRetVal = 0 Then
		                    Call ReportEvent("Start Service ","Service:  " & objService.DisplayName & " is started successfully","PASS")'Pass Code
		                Else
		                	strState = objService.State
		                	If strState = "Started" Then
		                		Call ReportEvent("Start Service ","Service:  " & objService.DisplayName & " is started successfully","PASS")'Pass Code
		                	Else
		                    	Call ReportEvent("Start Service ","Service:  " & objService.DisplayName & " could not be started successfully","FAIL")'Pass Code'Fail code
		                    	Environment("AbortExecution") = true
		                    End If
		                End If
		            End If
		        End If
		        
		    Next
	    
	    	strPrevComp = arrHostNames(i)
	    	Set colServiceList = Nothing
	    	Wait 2
		Next
	Else
		Call ReportEvent("Start Service ","No. of ServerNodes & the HostNames should be equal. Kindly check the data sheet","FAIL")'Pass Code'Fail code
		Environment("AbortExecution") = true
	End If
    
End Function

'**************************************************************************************************************************************************

Function  GetDateFolderName(dateDate)
	
	datePrevDate = dateDate
	strMonth = GetMonth(Month(datePrevDate))
	
	strDay = CStr(Day(datePrevDate))
	
	If Len(strDay) = 1 Then
		strDay = "0" & strDay
	End If
	
	GetDateFolderName = Right(Year(datePrevDate), 2) & strMonth & strDay
	
End Function


'**************************************************************************************************************************************************

Function GetMonth(intMonth)
	
	Select Case intMonth
		
		Case 1:
			GetMonth = "Jan"
		Case 2:
			GetMonth = "Feb"
		Case 3:
			GetMonth = "Mar"
		Case 4:
			GetMonth = "Apr"
		Case 5:
			GetMonth = "May"
		Case 6:
			GetMonth = "Jun"
		Case 7:
			GetMonth = "Jul"
		Case 8:
			GetMonth = "Aug"
		Case 9:
			GetMonth = "Sep"
		Case 10:
			GetMonth = "Oct"
		Case 11:
			GetMonth = "Nov"
		Case 12:
			GetMonth = "Dec"
	End Select
End Function


'****************************************************************************************************************************************************************

Function fn_GetStatusInTab(objParentObject, strTabName)

	fn_GetStatusInTab = ""
	Set odesc = Description.Create()
	odesc.Add "Class", "TArea"
	
	flagObjFound = False
	Set ChildObjs = objParentObject.ChildObjects(odesc)
	For i = 0 to ChildObjs.Count - 1
		If Instr(ChildObjs(i).GetROProperty("name"), strTabName)>0 Then
			fn_GetStatusInTab = ChildObjs(i).GetROProperty("name")
			Exit For
		End If
	Next
	
	Set odesc = Nothing
	Set ChildObjs = Nothing

End Function


'***************************************************************************************************************************************************************

Function fn_StopServices(strArgServicesNames, strArgHostNames)

    On Error Resume Next
    Dim strComputer
    Dim objWMIService
    Dim colServiceList
    Dim objService
    
	arrServicesName = Split(strArgServicesNames, ",")
	arrHostNames = Split(strArgHostNames, ",")
		    
	If UBound(arrServicesName) = UBound(arrHostNames) Then
	
		strPrevCompName = ""

		For i = 0 to UBound(arrHostNames)

		    'Get the WMI Service object
		    
		    If strPrevCompName <> arrHostNames(i) Then

				Set objWMIService = Nothing
'				If UCase(arrHostNames(i))=UCase(Environment("LocalHostName")) Then
'					strComputer="."
'				else
				strComputer = UCase(arrHostNames(i)) & ".ent.wfb.bank.corp"
				'End if
				
			    
			    Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\cimv2")
			    If Err.Number <> 0 Then
			        Call ReportEvent("Capturing WMI service object"," Could not capture WMI Service object","FAIL")
			    	Environment("AbortExecution") = True
			    End If
			End If
			
		    Set colServiceList = objWMIService.ExecQuery("SELECT * FROM Win32_Service")
		    'Set colServiceList = objWMIService.ExecQuery("SELECT * FROM Win32_Service WHERE DisplayName = ""ABCD""")
		    If Err.Number <> 0 Then
		        Call ReportEvent("Executing query to get services","Unable to get the list of services","FAIL")'fail msg
		        Environment("AbortExecution") = True
		    End If

		    For each objService In colServiceList
		        If LCase(arrServicesName(i)) = LCase(objService.DisplayName) Then
		            strState = objService.State
		            If strState <> "Stopped" Then
		                strRetVal = objService.StopService()
		                If strRetVal = 0 Then
							Wait(5)
'							strState = objService.State
'							If strState = "Stopped" Then
								Call ReportEvent("Stop Service","Service:  " & objService.DisplayName & " is stopped successfully","PASS")'Pass Code'Fail code
'							Else
'								Call ReportEvent("Stop Service","Service:  " & objService.DisplayName & " could not be stopped successfully","FAIL")'Pass Code'Fail code
'								Environment("AbortExecution") = true
'							End If
							
		                Else
		                    Call ReportEvent("Stop Service","Service:  " & objService.DisplayName & " could not be stopped successfully","FAIL")'Pass Code'Fail code
		                    Environment("AbortExecution") = true
		                End If
					Else
						Call ReportEvent("Stop Service","Service:  " & objService.DisplayName & " is already stopped","PASS")'Pass Code'Fail code
		            End If
		        End If
		        
		    Next
		    strPrevCompName = arrHostNames(i)
	    
	    	
	    	Set colServiceList = Nothing
	    	Wait 2
		Next
	Else
		Call ReportEvent("Stop Service ","No. of ServerNodes & the HostNames should be equal. Kindly check the data sheet","FAIL")'Pass Code'Fail code
		Environment("AbortExecution") = true
	End If
	
End Function

'**************************************************************************************************************************************************

Function CaptureTemplateNames(strQueryResultPath)

Dim strTemplates
strTemplates = ""
	
	
	Set FSO = CreateObject("Scripting.FileSystemObject")
	Set objFolder = FSO.GetFolder(strQueryResultPath)
	Set colFiles = objFolder.Files
	
	For Each objFile in colFiles
		strFileName=objFile.Name
		strTemplates = strTemplates &","&strFileName
		If Err.Number<>0 Then
			Call ReportEvent("Capture Template Name","Template name could not be captured from Folder: "&strQueryResultPath,"FAIL") 'report event Fail
			Environment("AbortExecution") = True
		End If
	Next
	
	Set FSO = Nothing
	Set objFolder = Nothing
	Set colFiles = Nothing
	
	CaptureTemplateNames = strTemplates
End Function

'***************************************************************************************************************************************************

Function ImportTemplate(strQueryResultPath,strExistingTemplate)
	
	
	strTemplatesImported=""
	Set FSO = CreateObject("Scripting.FileSystemObject")
	Set objFolder = FSO.GetFolder(strQueryResultPath)
	Set colFiles = objFolder.Files
	
	For Each objFile in colFiles
		strFileName=objFile.Name
		If Instr(1,strExistingTemplate,strFileName)<=0 Then
			strFileToImport = strQueryResultPath&"\"&strFileName
			
			If Not(Win("Win_TransactionImport").Exist(2)) Then
				Call fn_ClickOnMainMenuObject("Trading")
				Call WaitForObject(Win("Win_TradingManager"),10)
				Win("Win_TradingManager").MBar("MBar").Select "New &Instrument~ComOpt"
				Call WaitForObject(Win("Win_TradeDealDetails"),30)
				Win("Win_TradeDealDetails").MBar("MBar").Select "&File~Import	~&Transaction	"
				Wait(5)				
			End If
				
				
			Win("Win_TransactionImport").TEdit("TEdit_Filename").SetValue strFileToImport
			wait(1)
			
			
			
			Win("Win_TransactionImport").PBut("PBut_Import").Click
			If SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").Exist(30) Then
				strErrorMessage = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")	
			End If
			
	
			If Instr(1,strErrorMessage,"Import successfully completed")>0 Then
				strTemplatesImported = strTemplatesImported &","&strFileName
				Call ReportEvent("Import Template","Template '"&strFileName&"' imported successfully. Imported from Path: "&strFileToImport&"Message: "&strErrorMessage,"PASS") 'report event Pass
			Else
				Call ReportEvent("Import Template","Template '"&strFileName&"' could not be imported successfully. Imported from Path: "&strFileToImport&". Error: "&strErrorMessage,"FAIL") 'report event Fail
				Environment("AbortExecution") = True'Abort execution
			End If
			Call  handleAlerts()
			
		End If		
	Next
	
	If strTemplatesImported = "" Then
		Call ReportEvent("Import Template","No new Templates were imported. Either all of them already existed in the System or Import failed","INFO") 
	End If
	
	If Win("Win_TransactionImport").Exist(2) Then
		Win("Win_TransactionImport").Terminate
		Call  handleAlerts()
	End If
	
	Win("Win_TradeDealDetails").Terminate
	
	If Win("Win_TradeDealDetails").Exist(2) Then
		Win("Win_TradeDealDetails").Terminate
		Call  handleAlerts()		
	End If
	
	If Win("Win_TradingManager").Exist(2) Then
		Win("Win_TradingManager").Terminate
		Call handleAlerts()
	End If
	
	ImportTemplate=strTemplatesImported	
End Function

'***************************************************************************************************************************************************

Function executeCloseDealRefTranStatus(strRef,strTranStatus)
	
	executeCloseDealRefTranStatus = "Failed"
	
	If NOT Win("Win_TradingManager").Exist(2) Then
		Call fn_ClickOnMainMenuObject("Trading")
		Call WaitForObject(Win("Win_TradingManager"),10)
		Win("Win_TradingManager").TEdit("TaskEditBox_TradingManager").Click
		wait 1		
	End If

    Win("Win_TradingManager").TBut("Button_QuestionMark").Click
	wait 3
	Call WaitForObject(SwfWindow("Win_TradingQueryWindow"),10)
	If Not SwfWindow("Win_TradingQueryWindow").Exist(2) Then
		Win("Win_TradingManager").TBut("Button_QuestionMark").Click
		Call WaitForObject(SwfWindow("Win_TradingQueryWindow"),10)
		wait 3
	End If
	
	SwfWindow("Win_TradingQueryWindow").Activate
	wait 3
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").ActivateCell "1","0;0"
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").ActivateCell "1","0;0"
	Wait 1
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").SetCellData "1","0;0",strRef
	wait 1
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").SetCellData "1","0;0",strRef
	wait 2
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").ActivateCell "3","0;0"
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").ActivateCell "3","0;0"
	Wait 1
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").SetCellData "3","0;0",strTranStatus
	wait 1
	SwfWindow("Win_TradingQueryWindow").SwfTable("Table_TradingQuery").SetCellData "3","0;0",strTranStatus
	wait 2
	SwfWindow("Win_TradingQueryWindow").SwfObject("ToolBar_TradingQuery").Click 77,14
	
	If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
		strMsg = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")

		If Instr(LCase(strMsg), "no transactions in query")>0 Then
			executeCloseDealRefTranStatus = "No Templates"
		End If
		SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
	Else
		executeCloseDealRefTranStatus = "Passed"
	End If

	Call WaitForObject(Win("Win_TradingManager"),10)
	wait 1
	Call ReportEvent("Execute And Close Deal","The deal is successfully opened in the trading manager window","PASS") 

End Function

'***************************************************************************************************************************************************

Function openDealDetailPageILTR(strTemplate)

	flagTempItemFound = false
	If strTemplate <> "" Then
	
		Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
		If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
			Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
		End If
	    
		If Not Win("Win_QueriedDealsTableWindow").Exist(1) Then
			Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
			If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
				Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
			End If
		End If
	
		Call WaitForObject(Win("Win_QueriedDealsTableWindow"),20)
	
		flagTemplate = True
		If Win("Win_QueriedDealsTableWindow").Exist(2) Then
			Win("Win_QueriedDealsTableWindow").Activate
			intMaxRow = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetROProperty("maxrow")
			wait 1
			
			For j = 2 to intMaxRow
				strRowValue = CStr(j)
				strReference = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Reference")
				wait 1
				If Ucase(Mid(strReference,1,4)) = "LTR_" And Instr(1,strTemplate,strReference)>0 Then
					strInsSubtype = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Ins Subtype")
					'wait 1
					strInsType = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Ins. Type")
	'				Wait(1)
					strAppDealNo = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Deal #")
	'				Wait(1)
					
					arrSplitReference = Split(strReference,"_")
					
					If arrSplitReference(1)=strInsType  Then
						Call ReportEvent("Verify Instrument type in Reference name", "Instrument type name = " &strInsType& " found in Refernce " & strReference , "PASS")
					Else
						Call ReportEvent("Verify Instrument type in Reference name", "Instrument type name = " &strInsType& " NOT found in Refernce " & strReference , "FAIL")
					End If
					
					If arrSplitReference(2)=strInsSubtype  Then
						Call ReportEvent("Verify Instrument sub type in Reference name", "Instrument sub type name = " &strInsSubtype& " found in Refernce " & strReference , "PASS")
					Else
						Call ReportEvent("Verify Instrument sub type in Reference name", "Instrument sub type name = " &strInsSubtype& " NOT found in Refernce " & strReference , "FAIL")
					End If
					'If strAppDealNo=strLocalDealTrackingNo Or Instr(strAppDealNo,strLocalDealTrackingNo)>0 Then
						flagTempItemFound = true
						wait 2
						Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").CellClick "ByTitle",strAppDealNo,"Deal #"
						wait 2
						Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").DblCellClick "ByTitle",strAppDealNo,"Deal #"
		                'Exit For
		                Call WaitForObject(Win("Win_TradeDealDetails"),20)
		                If UCASE(TypeName(Ubound(arrSplitReference))) = "LONG" Then
		                	strSideCount = arrSplitReference(Ubound(arrSplitReference))
		                	flagSidesAdded = VerifyAndAddSidesToTemplate(strSideCount, strReference)
		                	
		                	If flagSidesAdded AND j <> intMaxRow Then
		                		Win("Win_QueriedDealsTableWindow").Terminate
		                		Wait(3)
		                		Call executeCloseDealRefTranStatus("  LTR%","Template")
		                		Wait 2
		                		
		                		Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
								If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
									Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
								End If
							    
								If Not Win("Win_QueriedDealsTableWindow").Exist(1) Then
									Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
									If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
										Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
									End If
								End If
		                	End If
		                Else
		                	Call ReportEvent("Open Deal ", "Deal did not had a reference ending with a number", "FAIL")'Pass Msg'Fail Msg
		                End If
		                
		            'End If
				End If
			Next
			If Win("Win_QueriedDealsTableWindow").Exist(3) Then
				Win("Win_QueriedDealsTableWindow").Terminate
			End If
			Call  handleAlerts()
			If Win("Win_QueriedDealsTableWindow").Exist(1) Then
				Win("Win_QueriedDealsTableWindow").Terminate
			End If
		End IF
	End If

	flagTemplate = False
    openDealDetailPageILTR = flagTempItemFound
	
End Function

'***************************************************************************************************************************************************

Function openDealDetailPageIAndVerifyTemplateExistLTR(strTemplate)

	strExistingTemplate = ""
	Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
	If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
		Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
	End If
    
	If Not Win("Win_QueriedDealsTableWindow").Exist(1) Then
		Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
		If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
			Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
		End If
	End If

	Call WaitForObject(Win("Win_QueriedDealsTableWindow"),20)

	If Win("Win_QueriedDealsTableWindow").Exist(2) Then
		Win("Win_QueriedDealsTableWindow").Activate
		intMaxRow = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetROProperty("maxrow")
		wait 1
		
		For j = 2 to intMaxRow
			strRowValue = CStr(j)
			strReference = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Reference")
			wait 1
			
			
			If Ucase(Mid(strReference,1,4)) = "LTR_" Then'And Instr(1,strTemplate,strReference)>0 Then
				strInsSubtype = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Ins Subtype")
				'wait 1
				strInsType = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Ins. Type")
'				Wait(1)
				strAppDealNo = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Deal #")
'				Wait(1)
				
				arrSplitReference = Split(strReference,"_")
				
				If arrSplitReference(1)=strInsType  Then
					Call ReportEvent("Verify Instrument type in Reference name", "Instrument type name = " &strInsType& " found in Refernce " & strReference , "PASS")
				Else
					Call ReportEvent("Verify Instrument type in Reference name", "Instrument type name = " &strInsType& " NOT found in Refernce " & strReference , "FAIL")
				End If
				
				If arrSplitReference(2)=strInsSubtype  Then
					Call ReportEvent("Verify Instrument sub type in Reference name", "Instrument sub type name = " &strInsSubtype& " found in Refernce " & strReference , "PASS")
				Else
					Call ReportEvent("Verify Instrument sub type in Reference name", "Instrument sub type name = " &strInsSubtype& " NOT found in Refernce " & strReference , "FAIL")
				End If
				
'				wait 2
				Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").CellClick "ByTitle",strAppDealNo,"Deal #"
				wait 2
				Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").DblCellClick "ByTitle",strAppDealNo,"Deal #"
                Call WaitForObject(Win("Win_TradeDealDetails"),20)
                If UCASE(TypeName(Ubound(arrSplitReference))) = "LONG" Then
                	strSideCount = arrSplitReference(Ubound(arrSplitReference))
                	flagSidesAdded = VerifyAndAddSidesToTemplate(strSideCount, strReference)
                	
                	If flagSidesAdded AND j <> intMaxRow Then
                		Win("Win_QueriedDealsTableWindow").Terminate
                		Wait(3)
                		Call executeCloseDealRefTranStatus("  LTR%","Template")
                		Wait 2
                		
                		Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
						If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
							Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
						End If
					    
						If Not Win("Win_QueriedDealsTableWindow").Exist(1) Then
							Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
							If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
								Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
							End If
						End If
                	End If
                Else
                	Call ReportEvent("Open Deal ", "Deal did not had a reference ending with a number", "FAIL")
                End If
                strExistingTemplate = strExistingTemplate & "," & strReference & ".xml"
			End If
		Next
		If Win("Win_QueriedDealsTableWindow").Exist(3) Then
			Win("Win_QueriedDealsTableWindow").Terminate
		End If
		Call  handleAlerts()
		If Win("Win_QueriedDealsTableWindow").Exist(1) Then
			Win("Win_QueriedDealsTableWindow").Terminate
		End If
	End If
	
	Call ReportEvent("Verify Existing Template", "'"&strExistingTemplate&"' Templates already exist.", "INFO")

    openDealDetailPageIAndVerifyTemplateExistLTR = strExistingTemplate
	
End Function

'***************************************************************************************************************************************************

Function VerifyAndAddSidesToTemplate(strSideCount, strReference)

	Icount = 0

	VerifyAndAddSidesToTemplate = False
	Win("Win_TradeDealDetails").Activate
	
	Set oSidesTable  = Nothing
	If Win("Win_TradeDealDetails").LBox("LBox_SidesTable_1").Exist(2) Then
		Set oSidesTable = Win("Win_TradeDealDetails").LBox("LBox_SidesTable_1")
	ElseIf Win("Win_TradeDealDetails").LBox("LBox_SidesTable_2").Exist(2) Then
		Set oSidesTable = Win("Win_TradeDealDetails").LBox("LBox_SidesTable_2")
	End If
	
	If oSidesTable.Exist(2) Then
		
		intMaxCol = oSidesTable.GetROProperty("maxcol")
		intMaxCol = CStr(intMaxCol)
		strColName = oSidesTable.GetCellValue("ByIndx","1",intMaxCol)
		arrColName = Split(strColName," ")
		
		
		If Instr(1,strColName,"Basket")>0 And (Cint(arrColName(Ubound(arrColName))) = Cint(strSideCount)-1) Then
			Call ReportEvent("Verify and add sides to template - " & strReference, "Sides count found equal to expected. Side count: "&arrColName(Ubound(arrColName))+1, "PASS")'Pass Msg
		ElseIf Instr(1,strColName,"Side")>0 And (Cint(arrColName(Ubound(arrColName))) = Cint(strSideCount)) Then
			Call ReportEvent("Verify and add sides to template - " & strReference, "Sides count found equal to expected. Side count: "&arrColName(Ubound(arrColName)), "PASS")'Pass Msg
		Else
			If Instr(1,strColName,"Basket")>0 Then
				Icount = (Cint(strSideCount)-Cint(arrColName(Ubound(arrColName))))-1
			ElseIf Instr(1,strColName,"Side")>0 Then
				Icount = (Cint(strSideCount)-Cint(arrColName(Ubound(arrColName))))
			End If
			
			Iterator = 0
			If Icount>0 Then
				flagAddSuccess = True
				For Iterator = 1 To Icount
					If flagAddSuccess Then
						Wait(5)
						'Win("Win_TradeDealDetails").PBut("PBut_Add_Side").Click
						flagAddSuccess = fn_ClickButton_2(Win("Win_TradeDealDetails"), Win("Win_TradeDealDetails").PBut("PBut_Add_Side"), "Add Side")
						Wait(1)
						If NOT flagAddSuccess Then
							flagAddSuccess = fn_ClickButton_2(Win("Win_TradeDealDetails"), Win("Win_TradeDealDetails").PBut("PBut_Add_Side"), "Add Side")
						End If
					Else
						Exit For
					End If	
				Next

				Call fn_FillInTradeEditField("Action", "to Template")'Add value
				Call fn_ClickOnProcess()
				VerifyAndAddSidesToTemplate = True
			End If
			
			oSidesTable.RefreshObject
			Wait(1)
			intMaxCol = oSidesTable.GetROProperty("maxcol")
			intMaxCol = CStr(intMaxCol)
			strColName = oSidesTable.GetCellValue("ByIndx","1",intMaxCol)
			arrColName = Split(strColName," ")
			If Err.Number = 0 And Instr(1,strColName,"Basket")>0 And (Cint(arrColName(Ubound(arrColName))) = Cint(strSideCount)-1) Then
				Call ReportEvent("Verify and add sides to template", "Sides count added. Side count added: "&Icount & "; Total side count: "&arrColName(Ubound(arrColName))+1, "PASS")'Pass Msg
			ElseIf Instr(1,strColName,"Side")>0 And (Cint(arrColName(Ubound(arrColName))) = Cint(strSideCount)) Then
				Call ReportEvent("Verify and add sides to template", "Sides count added. Side count added: "&Icount & "; Total side count: "&arrColName(Ubound(arrColName)), "PASS")'Pass Msg
			Else
				Call ReportEvent("Verify and add sides to template", "Sides could not be added. Side count added: "& Iterator & "; Total side count: "&arrColName(Ubound(arrColName)), "FAIL")'Pass Msg'Fail Msg
				Environment("AbortExecution") = True
			End If
		End If

	Else
		Call ReportEvent("Verify and add sides to template", "Unable to locate SidesTable object", "FAIL")'Pass Msg'Fail Msg
	End If
	
	If Win("Win_TradeDealDetails").Exist(2) Then
		Win("Win_TradeDealDetails").Terminate
	End If
	Call  handleAlerts()
	
End Function

'***************************************************************************************************************************************************

Function fn_SetEditFieldValue(objParentWind, objEditObj, strNamePattern, strValueToSet)
	
	Set odesc = Description.Create()
	odesc.Add "Class", "TEdit"
	
	Set ChildObjs = objParentWind.ChildObjects(odesc)
	If ChildObjs.Count>0 Then
		For i = 0 to ChildObjs.Count-1
			strName = ChildObjs(i).GetROProperty("name")
			
			If Instr(strName, strNamePattern)>0 Then
				objEditObj.SetTOProperty "name", strName
				Wait 1
				objEditObj.RefreshObject
				Wait 1
				objEditObj.SetValue
				Exit For
			End If
		Next
	End If

End Function

'*******************************************************************************************************************************************************

Function SendMailViaBlat(strArgMailTo, strArgMailSub, strAttachmentFilePath)
	
	strMailSub = strArgMailSub & " | Env: " & strPublicEnvName & " | Server: " & Environment("LocalHostName")
	SystemUtil.Run "cmd.exe","","C:\WINDOWS\system32","open"
	
	Call WaitForObject(Window("win_Cmd"), 5)
	'Window("win_Cmd")
	If Window("win_Cmd").Exist(2) Then

		Window("win_Cmd").Activate
		strBlatFilePath = "D:\OpenLink\Endur_V15_0_01042017WEL_03092017_1144\uat5\blat.exe"
		
		strCmdLine = strBlatFilePath & " -to " & strArgMailTo & " -subject " & Chr(34) & strMailSub & Chr(34) & " -server cpowhl.wellsfargo.com -f Nur.Mozumder@wellsfargo.com  -body " & Chr(34) & "Please find the result in attached file" & Chr(34) & " -attach " & Chr(34) & strAttachmentFilePath & Chr(34)
		Window("win_Cmd").Type strCmdLine
		Window("win_Cmd").Type micReturn
		Wait(5)
		
		Window("win_Cmd").Activate
		Window("win_Cmd").Close
		Call ReportEvent("Trigger Mail", "Mail sent successfully to the mentioned Stakeholders", "PASS")
	End If
	
'	Set WShell = CreateObject("WScript.Shell")
'	WShell.Run "cmd " & strCmdLine
	
End Function

'*********************************************************************************************************************************************************

Function fn_BulkImportScripts(strArgFilesPath, strArgFilesToImport, strArgFieldToEdit, strArgFieldValues, strNewFileNames)

	arrFileNames = Split(strArgFilesToImport, ",")
	arrFieldValues = Split(strArgFieldValues, ",")
	arrScriptNames = Split(strNewFileNames, ",")
	
	fn_BulkImportScripts = False

	If (UBound(arrFileNames) <> UBound(arrFieldValues) OR UBound(arrFieldValues) <> UBound(arrScriptNames)) Then
		Call ReportEvent("Check the count of FileNames, Types & ScriptNames", "All three provided data from excel should have same count. Looks like they are not equal. With this, importing scripts is not possible. Kindly check","FAIL")
'		print "data mismatch"
	Else
		
		If NOT Win("Win_ScriptEditor").Exist(1) Then

			If NOT Win("Win_TradingManager").Exist(1) Then
				Call fn_ClickOnMainMenuObject("Trading")
				Call WaitForObject(Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager"),20)
			End If
		
			If Win("Win_TradingManager").Exist(1) Then
				Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Script Editor"
				Call WaitForObject(Win("Win_ScriptEditor"), 20)
			End If
		End If
		
		If Win("Win_ScriptEditor").Exist(1) Then
		
			strFullPath = strArgFilesPath & "\"
			For i = 0 to UBound(arrFileNames)
				strFullPath = strFullPath & Chr(34) & arrFileNames(i) & Chr(34) & " "
			Next
			
			strFullPath = Left(strFullPath, Len(strFullPath) - 1)
			Win("Win_ScriptEditor").MBar("MBar").Select "&File~&Bulk Import"
			
			Window("Win_OIWindow").SetTOProperty "regexpwndtitle", "\[.*\]"
			Window("Win_OIWindow").RefreshObject
			Wait 1
			Call WaitForObject(Window("Win_OIWindow").Dialog("Dialog_Select"), 10)
			flagValSet = False
			
			If Window("Win_OIWindow").Dialog("Dialog_Select").Exist(2) Then
				Wait 2
				Window("Win_OIWindow").Dialog("Dialog_Select").WinEdit("WinEdit_FileName").Set strFullPath
				Wait 1
				Window("Win_OIWindow").Dialog("Dialog_Select").WinObject("WinObj_Open").Click
				Wait 2
				Call WaitForObject(Win("Win_ScriptsBulkImport").LBox("LBox_ScriptsList"), 10)
				
				iFilesCount = 0
				If Win("Win_ScriptsBulkImport").LBox("LBox_ScriptsList").Exist(2) Then
					iMaxRows = Win("Win_ScriptsBulkImport").LBox("LBox_ScriptsList").GetROProperty("maxrow")
					
					iFilesCount = 0
					flagOverwriteSet = False
					For j = 0 to UBound(arrFileNames)
						flagFileImported = False
						For k = 2 to iMaxRows
							Wait 2
							strAppFileName = Win("Win_ScriptsBulkImport").LBox("LBox_ScriptsList").GetCellValue("ByIndxByTitle",CStr(k),"File Name")
							If Instr(strAppFileName, arrFileNames(j))>0 Then
								flagFileImported = True
								Wait 2
								Win("Win_ScriptsBulkImport").LBox("LBox_ScriptsList").SetCellValue "ByIndxByTitle",CStr(k),"Plugin Name", arrScriptNames(j)
								Wait 3
								If NOT flagOverwriteSet Then
									Win("Win_ScriptsBulkImport").LBox("LBox_ScriptsList").SetCellValue "ByIndxByTitle",CStr(k), "Overwrite?", "Yes"
									Wait 2
'									Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle","Yes",""
'									Wait 2
									Win("Win_ScriptsBulkImport").KeyDown "F4"
									Wait 1
									flagOverwriteSet = True
								End If
								Win("Win_ScriptsBulkImport").LBox("LBox_ScriptsList").SetCellValue "ByIndxByTitle",CStr(k), "Plugin Type"
								Wait 1
'								Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle", arrFieldValues(j),""
								Exit For
							End If
						Next
						If flagFileImported Then
							iFilesCount = iFilesCount + 1
							Call ReportEvent("Import Scripts", "File " & Chr(34) & arrFileNames(j) & Chr(34) & " imported to the Import window", "PASS")
						Else
							Call ReportEvent("Import Scripts", "File " & Chr(34) & arrFileNames(j) & Chr(34) & " is NOT imported to the Import window", "FAIL")
						End If
					Next

					Wait(5)

					Call fn_ClickButton_2(Win("Win_ScriptsBulkImport"), Win("Win_ScriptsBulkImport").PBut("PBut_GenericButton"), "Process")
					Wait(10)
					strStatus = fn_GetStatusInTab(Win("Win_ScriptsBulkImport"), "Scripts")
					strExpected = "saved " & CStr(UBound(arrFileNames)+1)
					If Instr(LCase(strStatus), strExpected)>0 AND iFilesCount <> UBound(arrFileNames)+1 Then
						Call ReportEvent("Import Scripts", "Import of all " & UBound(arrFileNames)+1 & " scripts successful", "PASS")
						fn_BulkImportScripts = True
					Else
						Call ReportEvent("Import Files", "Not all expected files were imported from location - " & strArgFilesPath & ". Import Status = " & Split(strStatus, "%")(1) & ". Expected = " & strExpected, "FAIL")
					End If

					Call fn_ClickButton_2(Win("Win_ScriptsBulkImport"), Win("Win_ScriptsBulkImport").PBut("PBut_GenericButton"), "Exit")
					Call handleAlerts()
				End If
			End If
			Win("Win_ScriptEditor").Terminate
			Call handleAlerts()
		End If
	
	End If
End Function

'**************************************************************************************************************************************************

Function fn_RunFailedJobs(strArgFailedJobs, strArgMailTo, strArgMailSub, strArgLogFilePath, strInterval)

	Dim dictFailedJobsSeqNumber
	
	Call ReportEvent("Rerun failed jobs", "Few jobs have failed which will be rerun now", "INFO")
	
	Set dictFailedJobsSeqNumber = CreateObject("Scripting.Dictionary")
	
	arrFailedJobs = Split(strArgFailedJobs, ",")
	
	'For i = 0 to UBound(arrFailedJobs)
	
'		
'		
'		If i = UBound(arrFailedJobs) Then
		
'		
'		ElseIf dictWorkflowName.Item(arrFailedJobs(i)) <> dictWorkflowName.Item(arrFailedJobs(i+1)) Then
'			Call setSequences(dictFailedJobsSeqNumber)
'			Call saveAndRunJobs()
'			dictFailedJobsSeqNumber.RemoveAll()
'			Wait 2
'		End If
	
	'Next
	
	'for all the jobs that have failed, get workflow names (unique)
	strWorkflowsToBeVisible = ","
	For each jobName in arrFailedJobs
		If Instr(strWorkflowsToBeVisible, "," & dictWorkflowName.Item(jobName) & ",")<=0 Then
			strWorkflowsToBeVisible = strWorkflowsToBeVisible & dictWorkflowName.Item(jobName) & ","
		End If		
	Next
	
	strInterim = Right(strWorkflowsToBeVisible, Len(strWorkflowsToBeVisible)-1)
	strWorkflowsToBeVisible = Left(strInterim, Len(strInterim)-1)
	
	arrRerunWorkflows = Split(strWorkflowsToBeVisible, ",")
	
	strLastRestarted = ""
	For each strRerunWf in arrRerunWorkflows
		'check the jobs that are from same workflow and run them all at once
		For i = 0 to UBound(arrFailedJobs)
			
			If dictWorkflowName.Item(arrFailedJobs(i)) = strRerunWf Then
				dictFailedJobsSeqNumber.Add arrFailedJobs(i), "1000"
			End If
			
			strJobDispatcher = dictJobDispatcher.Item(arrFailedJobs(i))
			
			If LCase(strJobDispatcher) <> LCase(strLastRestarted) Then
				Call ReportEvent("Restart the service before re-running the job", "Retarting the service for dispatcher - " & strJobDispatcher & ", assigned to job - " & arrFailedJobs(i), "INFO") 
				strServiceName = GetDataFromSheet("GenericDataSheet", "ServiceNames", "Dispatchers='" & strJobDispatcher & "'")
				strHostName = GetDataFromSheet("GenericDataSheet", "HostNames", "Dispatchers='" & strJobDispatcher & "'")
				
				Call fn_StopServices(strServiceName, strHostName)
				Wait 5
				Call fn_StartServices(strServiceName, strHostName)
				Wait 5
				strLastRestarted = strJobDispatcher
			End If
		Next
		
		If LCase(strRerunWf) = "ltr_framework" Then
			Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
		End If
		
		Call setSequences(dictFailedJobsSeqNumber)
		Call saveAndRunJobs()
		dictFailedJobsSeqNumber.RemoveAll()
		Wait 2	
	Next
	
	'start tracking the running jobs
	counterValue =int((strInterval * 60)/30)
	Window("Window_ServicesManager").Activate
	
	strFailedJobs = "," & strArgFailedJobs & ","
	
	For each jobName in arrFailedJobs
		If NOT dictRerunJobsStatus.Exists(jobName) Then		
			dictRerunJobsStatus.Add jobName, "Not Started"
			dictRerunJobsStartTime.Add jobName, ""
			dictRerunJobsEndTime.Add jobName, ""
		End If
	Next
	
	'Call makeJobsVisible(strWorkflowsToBeVisible)

	flagMailSent = False
	
	Continue = True
	Counter = 2
	strArgMailSub = strArgMailSub & " - Rerun of Failed Jobs - "
	
	strAbortIfFails = ",NonLTR_Framework,SWAPLET_DAIRY,SWAPLET_NG2,SWAPLET_NGL,SWAPLET_CRUDE,SWAPLET_METALS,SWAPLET_CRUDE_SWAPS,SWAPLET_BASKET_WFBNA_YIELDS,SWAPLET_BASKET_WFBNA_DERIV,SWAPLET_NG_BASIS2,SWAPLET_NG4,LTR_Framework,SWAPLET_DISTILLATES,ILTR Validation"
'Going forward add this to the above list - LTR_Report,LTR_PROCESS,

	While Continue
	
		flagLTRFolderOpen = False
		For each jobName in dictRerunJobsStatus.Keys
			If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" AND (Not flagLTRFolderOpen) Then
				Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
				flagLTRFolderOpen = True
			End If
			
			jobStatus = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Status")
			dictRerunJobsStatus.Item(jobName) = jobStatus
		Next
	
		If flagLTRFolderOpen Then
			Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
			flagLTRFolderOpen = False						
		End If
	
		For each jobName in dictRerunJobsStatus.Keys
			
			jobStatus = dictRerunJobsStatus.Item(jobName)
			If jobStatus = "Running" Then
	
				If dictRerunJobsStartTime.Item(jobName) = "" Then
					If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
						Wait 1
						executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
					Else
						executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
					End If
	
					dictRerunJobsStartTime.Item(jobName) = executionStartTime
	
				End If
	
			elseif jobStatus = "Failed" OR jobStatus = "Succeeded" Then
	
				If dictRerunJobsStartTime.Item(jobName) = "" Then
	
					If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
						Wait 1
						executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
					Else
						executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
					End If
	
					dictRerunJobsStartTime.Item(jobName) = executionStartTime
	
				End If
	
				If dictRerunJobsEndTime.Item(jobName) = "" Then
	
					If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
						Wait 1								
						executionEndTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last End")
						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
					Else
						executionEndTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last End")
					End If
					dictRerunJobsEndTime.Item(jobName) = executionEndTime
	
					If jobStatus = "Succeeded" Then
						Call ReportEvent("Rerun Failed Jobs & Track","The Job  " & Chr(34) & jobName & Chr(34) & " is  successfully completed ","PASS")
					Else
						Call ReportEvent("Rerun Failed Jobs & Track","The Job  " & Chr(34) & jobName & Chr(34) & " Failed ","FAIL")
						flagJobFailed = true

						Call SendFailureReport(jobName,strArgMailTo,strArgMailSub,strArgLogFilePath)
						If Instr(LCase(strAbortIfFails), "," & LCase(dictWorkflowName.Item(jobName)) & ",")>0 Then
							Environment("AbortTestcase") = true
						End If
					End If
				End If
			End If
		Next
		Wait(30)
		Counter = Counter - 1

		If Counter = 0 Then
			Call sendStatusUpdateMail(strArgMailTo,strArgMailSub, strFailedJobs)
			flagMailSent = True
			Counter = counterValue
		End If
	
		Continue = False
		For each jobName in dictRerunJobsStatus.Keys
			jobStatus = dictRerunJobsStatus.Item(jobName)
			If jobStatus = "Running" OR jobStatus = "Waiting" OR jobStatus = "Msg Requested" Then
				Continue = True
				Exit For
			End If
		Next
	Wend

	Call sendStatusUpdateMail(strArgMailTo,strArgMailSub, strFailedJobs)
	
	If Win("Win_ServicesManager").Exist(2) Then
		Win("Win_ServicesManager").Terminate
	End If
	
	flagiLTRJobsFailed = False
	flagFailedJobsHaveBeenReRun = True
End Function

'*****************************************************************************************************************************************************

Function GetColFromConfig(strColName)
	
	GetColFromConfig = ""
	Call runAdHocQuery("select " & strColName & " from configuration")
	Wait 1
	
	If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").Exist(2) Then
			
		iMaxRows = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")
		GetColFromConfig = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle", CStr(iMaxRows), strColName)
		
		Win("Win_AdHocQueryViewer").Terminate
	End If

End Function


'*****************************************************************************************************************************************************

Function GetTimeDifference_RerunJobs(strJobName,strLogTime)

	If strLogTime=strJobName Then
		
		jobStartTime = dictRerunJobsStartTime.Item(strJobName)
		If jobStartTime<>"" Then
        	strTempTime = Mid(jobStartTime,1,2)
			strTime1 = strTempTime
			If  InStr(strTempTime,":")>0 Then
				strTime1 = "0"&Left(strTempTime,1)
			End If
			
			If Instr(jobStartTime,"pm")>0 And strTime1 <> 12 Then
				strTime1 = strTime1+12
			End If
			intColonPos = Instr(jobStartTime,":") 
			strTempTime = Mid(jobStartTime,intColonPos,3)
			strTime1 = strTime1&strTempTime&":00"
		Else
			Call ReportEvent("Get Time Difference","The Start time for the job " & Chr(34) & strJobName & Chr(34) & " is not recorded correctly","FAIL")
		End If
	Else
		strTime1 = strLogTime
	End If

	jobEndTime = dictRerunJobsEndTime.Item(strJobName)
	If jobEndTime<>"" Then
		strTempTime = Mid(jobEndTime,1,2)
		strTime2 = strTempTime
		If  InStr(strTempTime,":")>0 Then
			strTime2 = "0"&Left(strTempTime,1)
		End If
		
		If Instr(jobEndTime,"pm")>0 And strTime2 <> 12 Then
			strTime2 = strTime2+12
		End If
		intColonPos = Instr(jobEndTime,":") 
		strTempTime = Mid(jobEndTime,intColonPos,3)
		strTime2 = strTime2&strTempTime&":00"
	Else
		Call ReportEvent("Get Time Difference","The End time for the job " & Chr(34) & strJobName & Chr(34) & " is not recorded correctly","FAIL")
	End If

	
	
	GetTimeDifference_RerunJobs = dateDiff("s",strTime1,strTime2)	

End Function

'************************************************************************************************************************************************************

'Function GetPrevBusinessDate(strDate)
'	
'	dPrevDate = CDate(strDate)-1
'	intCounter = 5
'	GetPrevBusinessDate = ""
'	
'	While intCounter > 0
'		strMonth = CStr(Month(dPrevDate))
'		strDay = CStr(Day(dPrevDate))
'		strYear = CStr(Year(dPrevDate))
'		
'		strDateToCheck = "," & strMonth & "-" & strDay & ","
'		
'		If strYear = "2013" Then
'			strHolList = str2013HolidayList
'		ElseIf strYear = "2014" Then
'			strHolList = str2014HolidayList
'		Else
'			strHolList = str2015HolidayList
'		End If
'		
'		If Instr(strHolList, strDateToCheck)>0 OR Weekday(dPrevDate) = 1 OR Weekday(dPrevDate) = 7 Then
'			dPrevDate = dPrevDate-1
'		Else
'			GetPrevBusinessDate = dPrevDate
'			intCounter = 0
'		End If
'		
'		intCounter = intCounter-1
'	Wend
'End Function
'

'*******************************************************************************************************************

Function fn_GetThisSystemIPAddress()
	
	Dim objAdapter
	
	myIPAddress = ""
	Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
	Set colAdapters = objWMIService.ExecQuery("Select IPAddress from Win32_NetworkAdapterConfiguration Where IPEnabled = True")

	For Each objAdapter in colAdapters
	  If Not IsNull(objAdapter.IPAddress) Then 
	  	myIPAddress = trim(objAdapter.IPAddress(0))
	  	exit for
	  End If
	Next

	fn_GetThisSystemIPAddress = myIPAddress
End Function

'********************************************************************************************************************

Function DeleteAllIntermediateResults()
	
'On error resume next

	Set fso = CreateObject("Scripting.FileSystemObject")
	
	Set oFolder = fso.GetFolder(strInterimFilesPath)
	
	For each oFile in oFolder.Files
		oFile.Delete True
	Next
'On error Goto 0

	
End Function

'************************************************************************************
'This function is used in select directory window to compare Base and current.
'**********************************************************************************

 Function fn_FillSelectDirectory(strIndex,strFieldName,fieldValue) 
		
        flagFieldFound = false
        SwfWindow("Window_SelectDirectory").SwfObject("Edit Box").SetTOProperty "Location",strIndex
        Optionalstep.SwfWindow("Window_SelectDirectory").SwfObject("Edit Box").Click

        Set oDesc = Description.Create
		oDesc("micclass").value = "SwfEdit"
    	Set obj = SwfWindow("Window_SelectDirectory").ChildObjects(oDesc)
    	SwfWindow("Window_SelectDirectory").Activate
		For xi = 0 to obj.Count				
			strNameProp = obj(xi).GetROProperty("swfname") 
			print "strNameProp="&strNameProp			
			flagContinue = true
			If Instr(strNameProp,strTempFieldName)>0 Then
				flagFieldFound = true
				wait 2
				obj(xi).Click
				obj(xi).Set fieldValue
				wait 1
				Call ReportEvent("Entering Field Value ","The value " & Chr(34) & fieldValue & Chr(34) & " is already set in the field " & Chr(34) & strFieldName & Chr(34) & " for the window " & Chr(34) & strWindowName &  Chr(34),"PASS") 
				Exit for	
			End if	
		Next
End Function	


'******************************************************************************************************************
Function SendMailViaBlatEndur(strArgMailTo, strArgMailSub,strAttachmentFilePath)
	
	strMailSub = strArgMailSub & " | Env: " & strPublicEnvName & " | Server: " & Environment("LocalHostName")
	SystemUtil.Run "cmd.exe","","C:\WINDOWS\system32","open"
	
	Call WaitForObject(Window("win_Cmd"), 5)
	'Call WaitForObject(Window("Wind_CmdPrompt"), 5)


	'If Window("Wind_CmdPrompt").Exist(2) Then
	       If Window("win_Cmd").Exist(2) Then
          	Window("win_Cmd").Activate
		'Window("Wind_CmdPrompt").Activate
		strBlatFilePath = "D:\OpenLink\Endur_V15_0_01042017WEL_03092017_1144\uat5\blat.exe"
		
		strCmdLine = strBlatFilePath & " -to " & strArgMailTo & " -subject " & Chr(34) & strMailSub & Chr(34) & " -server cpowhl.wellsfargo.com -f chaitanya.kumar@wellsfargo.com -body " & Chr(34) & "Please find the result in attached file" & Chr(34) & " -attach " & Chr(34) & strAttachmentFilePath & Chr(34)
		Window("win_Cmd").Type strCmdLine
		Window("win_Cmd").Type micReturn
		
		
		'Window("Wind_CmdPrompt").Type strCmdLine
		'Window("Wind_CmdPrompt").Type micReturn
		Wait(5)
		Window("win_Cmd").Activate
		Window("win_Cmd").Close
		'Window("Wind_CmdPrompt").Activate
		'Window("Wind_CmdPrompt").Close
		Call ReportEvent("Trigger Mail", "Mail sent successfully to the mentioned Stakeholders", "PASS")
	End If
	
'	Set WShell = CreateObject("WScript.Shell")
'	WShell.Run "cmd " & strCmdLine
	
End Function


'******************************************************************************************************************


end of endur genearic funtion 
************************************************************************************************************************************************************




Set dictTestCaseFailedRow = CreateObject("Scripting.Dictionary")
strGlobalComparisonResultPath = ""
Environment("reportrerunstatusflag")=""
Environment("EnvName")=""
'Eod min cum variables
Dim arrJobName,arrDispatcherName,arrJobSequenceNo,arrLogFileName,arrBatchNames, strInterimFilesPath, strImpFilesPath, intTrackCounter
Dim strWorkFlowName,strJobNames,strDispatcherNames,strJobSequenceNos,strLogFileNames,strRunWorkFlow,strJobsUnderWorkflow,strCurrentJob
Dim intJobCount,intDispatcherCount,intSequenceCount,intLogFileCount
Dim strMailTo, strMailSubject, strErrorLogs
Dim jobList() ,arrWrongBatchSimulation(),arrMemoryExceptionJobs(), arrOnlineScheduler() , arrWorkFlowNames(),fileLinesArr(),sDataArray()
Dim flagJobsSummaryRequired : flagJobsSummaryRequired = false
ReDim jobList(500)
ReDim arrWorkFlowNames(50)
jobCounter = 0
intBatchCount = 0
intWorkFlowCount = 0
proceedFlag = true
multipleJobFlag = false
flagMultipleBatch = false
flagSimulation = true
flagJobFailed = false
flagMemoryException = false
tempFlagMemoryException = false
intMemoryExceptionJobsSize=1
Set WShell = CreateObject("WScript.Shell")
Set dictWorkflowName = CreateObject("Scripting.Dictionary")
Set dictJobStatus = CreateObject("Scripting.Dictionary")
Set dictJobStartTime = CreateObject("Scripting.Dictionary")
Set dictJobEndTime =  CreateObject("Scripting.Dictionary")
Set dictJobDispatcher = CreateObject("Scripting.Dictionary")
Set dictJobSequenceNo = CreateObject("Scripting.Dictionary")
Set dictLogFileName = CreateObject("Scripting.Dictionary")
Set dictMemoryExceptionJobsStatus = CreateObject("Scripting.Dictionary")
Set dictMemoryExceptionJobsStartTime = CreateObject("Scripting.Dictionary")
Set dictMemoryExceptionJobsEndTime = CreateObject("Scripting.Dictionary")
Set selectedColumnNameDict = CreateObject("Scripting.Dictionary")
Set availableColumnNameDict = CreateObject("Scripting.Dictionary")
Set dictDealTabsClicked = CreateObject("Scripting.Dictionary")
intTrackCounter = 0


'Cdbo variables
Dim strDealTrackingNo,strInsType,strNewDealTrackingNo,strNewTranTrackingNo, strDealStatus, strExpectedDealStatus,strStartingInsType,strProcessingInsType
Dim strQueryResultPath,strTempFilePath, strListedInsTypeResultPath,strToolSetName
Dim rowNo,intTotalSheetCount
Dim strLastClickedTab,strCurrentTab

Set dictCOMChildDeals = CreateObject("Scripting.Dictionary")

'Dim arrFieldValues(100)
Dim odescFileNameList, odescTimeList, odescMsg, odescTimeStamp
Dim strQAOutputFilePath
strEndurSideHeader = "Endur Side Info"
strTranSideHeader =  "Deal Transaction Info"
strEndurSideHeaderWac43 = "WAC43 Task Endur Side Info"
strTranSideHeadeWac43 = "WAC43 Task Deal Transaction Info"
strWowHeader = "WOW Apllication Information"
strWowMessageHeader = "From_"
strWowTimeHeader = "Msg Delivered Time"
flagWac43ResultSheetCreated = false
flagErrorLoadingTask = false
flagNewDeal = false
tempFoundFlag = false
flagB2BLockNotPresent = false
flagB2BLockIsParent = false
flagFillTranInfoFromTradingManager = False
flagCompDeal = false
ReDim arrDealsWithNoTranInfoInDetails(50)
flagHeader = false

'CFTC Report  variables
Dim comparisonStartTime,comparisonEndTime , strBaseOutPutFilesPath , strQaOutPutFilesPath, strFileName
intTotalSheetCount = 1
intWorkBookNo = 0
intSheetNo = 0
intTotalNoOfDifference = 0
flagDifferenceFound = false
Dim arrWorkBookName(50),arrWorkBookSheetCount(100),arrSheetName(100),arrSheetNameNoOfDiff(100),arrSheetRowVal(100)

'Totem Report variable
Dim strTaskStatus, strTaskEndTime, strTotemConfigFilePath,strProdFilesPath,strQaFilesPath,strTotemLogFilePath


'Process Deals In Specified Status
Dim strSpecifiedDealStatus
Set dictDealExportStatus = CreateObject("Scripting.Dictionary")
dictDealExportStatus.Add "to Validated", "Success"
dictDealExportStatus.Add "to New", "OutBound"
dictDealExportStatus.Add "To One Step Amend", "Success"
dictDealExportStatus.Add "To One Step Cancel", "Success"
Dim strExternalDealRef

Set dictExternalDealRef = CreateObject("Scripting.Dictionary")
Set dictDealsStatus = CreateObject("Scripting.Dictionary")

'iLTR variables
Dim strPublicEnvName, strPublicEndurLoginName, strPublicBusinessDate
flagiLTRJobsFailed = False
flagTemplate = False
flagFailedJobsHaveBeenReRun = False
Set dictRerunJobsStatus = CreateObject("Scripting.Dictionary")
Set dictRerunJobsStartTime = CreateObject("Scripting.Dictionary")
Set dictRerunJobsEndTime = CreateObject("Scripting.Dictionary")
str2013HolidayList = ""
str2014HolidayList = ""
str2015HolidayList = ""


'*******************************************************************************
' Function/Procedure Name	: Login
' Purpose					: Login to Endur application
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function Login()

'	strAppPath = GetData(Environment("currentKeyWord"),"AppPath")
'	strUid = GetData(Environment("currentKeyWord"),"UserId")
'	  'strUid = Environment("UserName")
'	strPassword = GetData(Environment("currentKeyWord"),"Password")
'	
'	strEnvName = FindEnvironment(strAppPath)
'	strPublicEnvName = strEnvName
'	strPublicEndurLoginName = strUid
'	
'	flagLaunchEnv = true
'
'	If SwfWindow("Window_EndurMainWindow").Exist(1) Then
'		strProperty = SwfWindow("Window_EndurMainWindow").GetROProperty("regexpwndtitle") 
'		strProperty = LCase(strProperty)	
'		If Instr(strProperty,LCase(strUid))>0 And Instr(LCase(strProperty),LCase(strEnvName))>0 And strEnvName<> "" Then
'			Call ReportEvent("Login","User " & strUid & " is already logged in to the environment " & strEnvName,"INFO")
'			flagLaunchEnv = false
'		Else
'			Call ReportEvent("Login","User  is already logged in , logging out first","INFO")
'			Call Logout()
'		End If
'	End If
'
'	If flagLaunchEnv = true Then
'		arrAppPath = Split(strAppPath, "\")
'		strRootPath = ""
'        For k = 0 to UBound(arrAppPath) - 1
'            strRootPath =strRootPath&arrAppPath(k)&"\"
'		Next
'		strRootPath = Left(strRootPath, Len(strRootPath)-1)
'		'msgbox strRootPath
'        strApp = arrAppPath(UBound(arrAppPath)) 
'		'msgbox strApp
'		
'		SystemUtil.Run "cmd.exe"
'        Call WaitForObject(Window("Win_CmdPrompt"),120)
'
'		If Window("Win_CmdPrompt").Exist(2) Then
'            Window("Win_CmdPrompt").Activate
'          
'            'WShell.SendKeys "cd " & strRootPath
'            WShell.SendKeys "pushd " & strRootPath
'            WShell.SendKeys "{ENTER}"
'            Wait 1
'            Window("Win_CmdPrompt").Activate
'            WShell.SendKeys strApp
'            WShell.SendKeys "{ENTER}"
'            Wait 1
'		End if
'
'		'
'		'SystemUtil.Run strAppPath,,"C:\Users\U574350\Desktop"
'		
'		Call WaitForObject(Window("OpenLink Endur"),5000)
'		Window("OpenLink Endur").Click 105,112
'		Window("OpenLink Endur").Type strUid
'		Window("OpenLink Endur").Click 308,110
'		Window("OpenLink Endur").Type strPassword
'		Window("OpenLink Endur").Click 135,160
'		
'		Call WaitForObject(Window("OpenLink"),1000)
'		'14-4-2017:Deep i hope these if conditions are not required 
'		If Window("OpenLink").Exist(1) Then
'			Window("OpenLink").Click 161,94
'			wait  2
'			If Window("OpenLink").Exist(5) Then
'				Window("OpenLink").Click 235,87
'			End If
'			If Window("OpenLink").Exist(3) Then
'				Window("OpenLink").Click 161,94
'				wait 2
'				If Window("OpenLink").Exist(5) Then
'					Window("OpenLink").Click 235,87
'				End If
'			End If
'		End If
'		
''		If Win("Win_SystemExperationDate").Exist(500) Then
''			'Win("Win_SystemExperationDate").PBut("Button_OK").Click
''			Window("OpenLink").Click 177,89
''		End If
'
'		If  SwfWindow("Window_EndurMainWindow").Exist(1000) Then
'			Call ReportEvent("Login","User  "&struid& "  is Logged in Successfully","PASS")
'		Else
'			Call ReportEvent("Login","User  "&struid& "  is not Logged in  Successfully","FAIL")
'		End If
'	End If	
'       If Window("Win_CmdPrompt").Exist(2) Then
'            Window("Win_CmdPrompt").Activate
'         Window("Win_CmdPrompt").Close
'         End if 
'****************
strAppPath = GetData(Environment("currentKeyWord"),"AppPath")
	strUid = GetData(Environment("currentKeyWord"),"UserId")
	  'strUid = Environment("UserName")
	strPassword = GetData(Environment("currentKeyWord"),"Password")
	
	strEnvName = FindEnvironment(strAppPath)
	strPublicEnvName = strEnvName
	Environment("EnvName")=strEnvName
	strPublicEndurLoginName = strUid
	
	flagLaunchEnv = true

	If SwfWindow("Window_EndurMainWindow").Exist(1) Then
		strProperty = SwfWindow("Window_EndurMainWindow").GetROProperty("regexpwndtitle") 
		strProperty = LCase(strProperty)	
		If Instr(strProperty,LCase(strUid))>0 And Instr(LCase(strProperty),LCase(strEnvName))>0 And strEnvName<> "" Then
			Call ReportEvent("Login","User " & strUid & " is already logged in to the environment " & strEnvName,"INFO")
			flagLaunchEnv = false
		Else
			Call ReportEvent("Login","User  is already logged in , logging out first","INFO")
			Call Logout()
		End If
	End If

	If flagLaunchEnv = true Then
		arrAppPath = Split(strAppPath, "\")
		strRootPath = ""
        For k = 0 to UBound(arrAppPath) - 1
            strRootPath =strRootPath&arrAppPath(k)&"\"
		Next
		strRootPath = Left(strRootPath, Len(strRootPath)-1)
		'msgbox strRootPath
        strApp = arrAppPath(UBound(arrAppPath)) 
		'msgbox strApp
		
		SystemUtil.Run "cmd.exe"
        Call WaitForObject(Window("Win_CmdPrompt"),120)

		If Window("Win_CmdPrompt").Exist(2) Then
            Window("Win_CmdPrompt").Activate
          
            'WShell.SendKeys "cd " & strRootPath
            WShell.SendKeys "pushd " & strRootPath
            WShell.SendKeys "{ENTER}"
            Wait 1
            Window("Win_CmdPrompt").Activate
            WShell.SendKeys strApp
            WShell.SendKeys "{ENTER}"
            Wait 1
		End if

		'
		'SystemUtil.Run strAppPath,,"C:\Users\U574350\Desktop"
		
		Call WaitForObject(Window("OpenLink Endur"),5000)
		Window("OpenLink Endur").Click 105,112
		Window("OpenLink Endur").Type strUid
		Window("OpenLink Endur").Click 308,110
		Window("OpenLink Endur").Type strPassword
		Window("OpenLink Endur").Click 135,160
		
		Call WaitForObject(Window("OpenLink"),1000)
		'14-4-2017:Deep i hope these if conditions are not required 
		If Window("OpenLink").Exist(1) Then
			Window("OpenLink").Click 161,94
			wait  2
			If Window("OpenLink").Exist(5) Then
				Window("OpenLink").Click 235,87
			End If
			If Window("OpenLink").Exist(3) Then
				Window("OpenLink").Click 161,94
				wait 2
				If Window("OpenLink").Exist(5) Then
					Window("OpenLink").Click 235,87
				End If
			End If
		End If
		
'		If Win("Win_SystemExperationDate").Exist(500) Then
'			'Win("Win_SystemExperationDate").PBut("Button_OK").Click
'			Window("OpenLink").Click 177,89
'		End If

		If  SwfWindow("Window_EndurMainWindow").Exist(1000) Then
			Call ReportEvent("Login","User  "&struid& "  is Logged in Successfully","PASS")
		Else
			Call ReportEvent("Login","User  "&struid& "  is not Logged in  Successfully","FAIL")
		End If
	End If	
	
	If Window("Win_CmdPrompt").Exist(2) Then
            Window("Win_CmdPrompt").Activate
             Window("Win_CmdPrompt").Close
             End if 
    
End Function

'***************************************************************************************************
'*******************************************************************************
' Function/Procedure Name	: SimulationBackup_Reval
' Purpose					: This function is created to do Simnulation Back -up for Reval during Sanity Test
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function SimulationBackupReval()

Dim StrInsValuetoSet

instrumenttype = GetData("SimulationBackupReval", "Instrumenttype")
StrInsValuetoSet=instrumenttype&"NU1"
Call fn_ClickOnMainMenuObject("Trading Manager")
Call WaitForObject(Win("Win_TradingManager"),30)
Win("Win_TradingManager").TBut("TBut_Reval").Click 
if SwfWindow("Win_TradingQueryWindow").Exist(20) then 
   SwfWindow("Win_TradingQueryWindow").Close
End if
Win("Win_Reval").InsightObject("File").Click
Win("Win_Reval").InsightObject("Load").Click
wait 2
Win("Win_Ins_Type").LBox("LBox").CellClick "ByTitle",instrumenttype,""
wait 3
Win("Win_Reval").MBar("MBar").Select "&File~Save &As"
wait 3
Win("Win_SimDef_SaveAs").TEdit("Name:").SetValue StrInsValuetoSet
wait 2
Win("Win_SimDef_SaveAs").PBut("Save").Click 

'Validation Step
if Win("Win_Reval").TEdit("Name").Exist(10) then
strAppinstrumenttype=Win("Win_Reval").TEdit("Name").GetROProperty("content")
End if
If (StrInsValuetoSet = strAppinstrumenttype) Then
	Call ReportEvent("SimulationBackup_Reval", "Instument type " & Chr(34) & instrumenttype & Chr(34) & " backup creates as " & chr(34) & StrInsValuetoSet & chr(34) & "Successfully","PASS")
else
   Call ReportEvent("SimulationBackup_Reval", "Instument type " & Chr(34) & instrumenttype & Chr(34) & " backup not created as " & chr(34) & strAppinstrumenttype & chr(34) & "UnSuccessfull","FAIL")
End If

Win("Win_Reval").Terminate
Win("Win_TradingManager").Terminate

End Function




'*******************************************************************************************************************************
Function VerifyRefreshDate()
	
	
	strBusinessDate = GetData(Environment("currentKeyWord"),"BusinessDate")
	strTradingDate = GetData(Environment("currentKeyWord"),"TradingDate")
	strProcessingDate = GetData(Environment("currentKeyWord"),"ProcessingDate")

SwfWindow("win_EndurMainWin").SwfToolbar("tbarSystem").Press 2
wait 2
strPanelContent = Win("Win_AboutOpenlinkWin").TArea("panelmessage").GetROProperty("content")
'msgbox x

If instr(strPanelContent,"Current Date:") Then
   
    posDate = instr(strPanelContent,"Current Date:")
	strAppCurrentDate = trim(mid(strPanelContent,posDate+len("Current Date:"),11))
End If
If instr(strPanelContent,"Processing Date:") Then
   
    posDate = instr(strPanelContent,"Processing Date:")
	strAppProcessingDate = trim(mid(strPanelContent,posDate+len("Processing Date:"),11))
	If strProcessingDate = strAppProcessingDate Then
	Call ReportEvent("VerifyRefreshDate", "Processing Date " & Chr(34) & strProcessingDate & Chr(34) & " verified Successfully in Endur info window", "PASS")
	Else 
	Call ReportEvent("VerifyRefreshDate", "Processing Date " & Chr(34) & strProcessingDate & Chr(34) & " is incorrect Endur info window", "FAIL")
	End If
End If

If instr(strPanelContent,"Business Date:") Then
   
    posDate=instr(strPanelContent,"Business Date:")
	strAppBusinessDate = trim(mid(strPanelContent,posDate+len("Business Date:"),11))
	If strBusinessDate = strAppBusinessDate Then
	Call ReportEvent("VerifyRefreshDate", "Business Date " & Chr(34) & strBusinessDate & Chr(34) & " verified Successfully Endur info window", "PASS")
	Else 
	Call ReportEvent("VerifyRefreshDate", "Business Date " & Chr(34) & strBusinessDate & Chr(34) & " is incorrect Endur info window", "FAIL")
	End If
End If

If instr(strPanelContent,"Trading Date:") Then
   
    posDate = instr(strPanelContent,"Trading Date:")
	strAppTradingDate = trim(mid(strPanelContent,posDate+len("Trading Date:"),11))
	If strTradingDate = strAppTradingDate Then
	Call ReportEvent("VerifyRefreshDate", "Trading Date " & Chr(34) & strTradingDate & Chr(34) & " verified Successfully Endur info window", "PASS")
	Else 
	Call ReportEvent("VerifyRefreshDate", "Trading Date " & Chr(34) & strTradingDate & Chr(34) & " is incorrect Endur info window", "FAIL")
	End If
End If

Win("Win_AboutOpenlinkWin").PBut("OK").click


    Call fn_ClickOnMainMenuObject("Operations")
	
	Call WaitForObject(Win("Win_Operations"),10)
	

	

SwfWindow("Win_Operation").SwfObject("SystemDateRoll").Click

strAppCurrentBussinessDate = left(trim(Win("Win_System Date Roll").TEdit("CurrentBussinessDate").GetROProperty("content")),10)
If strBusinessDate = strAppCurrentBussinessDate Then
	Call ReportEvent("VerifyRefreshDate", "Business Date " & Chr(34) & strBusinessDate & Chr(34) & " verified Successfully in System Date Roll window", "PASS")
	Else 
	Call ReportEvent("VerifyRefreshDate", "Business Date " & Chr(34) & strBusinessDate & Chr(34) & " is incorrect in System Date Roll window", "FAIL")
End If


NewBusinessDate = left(trim(Win("Win_System Date Roll").TEdit("New Business Date").GetROProperty("content")),10)


strAppCurrentTradingDate = left(trim(Win("Win_System Date Roll").TEdit("Current Trading Date").GetROProperty("content")),10)
If strTradingDate = strAppCurrentTradingDate Then
	Call ReportEvent("VerifyRefreshDate", "Trading Date " & Chr(34) & strTradingDate & Chr(34) & " verified Successfully in System Date Roll window ", "PASS")
	Else 
	Call ReportEvent("VerifyRefreshDate", "Trading Date " & Chr(34) & strTradingDate & Chr(34) & " is incorrect in System Date Roll window", "FAIL")
End If

NewTradingDate = left(trim(Win("Win_System Date Roll").TEdit("New Trading Date").GetROProperty("content")),10)


strAppCurrentProcessingDate = left(trim(Win("Win_System Date Roll").TEdit("Current Processing Date").GetROProperty("content")),10)
If strProcessingDate = strAppCurrentProcessingDate Then
	Call ReportEvent("VerifyRefreshDate", "Processing Date " & Chr(34) & strProcessingDate & Chr(34) & " verified Successfully in System Date Roll window", "PASS")
	Else 
	Call ReportEvent("VerifyRefreshDate", "Processing Date " & Chr(34) & strProcessingDate & Chr(34) & " is incorrect in System Date Roll window", "FAIL")
End If



NewProcessingDate = left(trim(Win("Win_System Date Roll").TEdit("New Processing Date").GetROProperty("content")),10)
'Win("Win_System Date Roll").TBut("Close")
Win("Win_System Date Roll").TBut("Close").click
Win("Win_Operations").terminate
'Call ReportEvent("VerifyRefreshDate", "Business Date, Trading Date , Processing Date " & Chr(34) & strAppBusinessDate & Chr(34) & " verified Successfully", "PASS")




End Function







'******************************************************************************************************************************

Function FindEnvironment(strTempAppPathToLaunch)

strEnvToLaunch = ""
If Instr(LCase(strTempAppPathToLaunch),"ethanol")>0 Then
strEnvToLaunch = "ethanol"
ElseIf Instr(LCase(strTempAppPathToLaunch),"uat")>0 Then
strEnvToLaunch = "uat"
ElseIf Instr(LCase(strTempAppPathToLaunch),"coffee")>0 Then
strEnvToLaunch = "coffee"
ElseIf Instr(LCase(strTempAppPathToLaunch),"zinc")>0 Then
strEnvToLaunch = "zinc"
ElseIf Instr(LCase(strTempAppPathToLaunch),"opal")>0 Then
strEnvToLaunch = "opal"
ElseIf Instr(LCase(strTempAppPathToLaunch),"garnet")>0 Then
strEnvToLaunch = "garnet"
ElseIf Instr(LCase(strTempAppPathToLaunch),"titanium")>0 Then
strEnvToLaunch = "titanium"
ElseIf Instr(LCase(strTempAppPathToLaunch),"tin")>0 Then
strEnvToLaunch = "tin"
ElseIf Instr(LCase(strTempAppPathToLaunch),"silver")>0 Then
strEnvToLaunch = "silver"
ElseIf Instr(LCase(strTempAppPathToLaunch),"d011ltr")>0 Then
strEnvToLaunch = "D011LTR"
ElseIf Instr(LCase(strTempAppPathToLaunch),"d021ltr")>0 Then
strEnvToLaunch = "D021LTR"
ElseIf Instr(LCase(strTempAppPathToLaunch),"d031ltr")>0 Then
strEnvToLaunch = "D031LTR"
ElseIf Instr(LCase(strTempAppPathToLaunch),"d041ltr")>0 Then
strEnvToLaunch = "D041LTR"
ElseIf Instr(LCase(strTempAppPathToLaunch),"d051ltr")>0 Then
strEnvToLaunch = "D051LTR"
ElseIf Instr(LCase(strTempAppPathToLaunch),"d061ltr")>0 Then
strEnvToLaunch = "D061LTR"
End If
FindEnvironment = strEnvToLaunch

End Function




'*********************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: Logout
' Purpose					: Logout of  the Endure application
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function Logout()

'    SwfWindow("Window_EndurMainWindow").SwfToolbar("SwfToolbar_MinClose_MainWindow").Press 4
'	WaitForObject(Window("OpenLink"),120)
'	Window("OpenLink").Click 143,91
'	wait 1
'    If  Window("OpenLink").Exist(1) = False Then
'		Call ReportEvent("Logout","User is Logged out Successfully","PASS")
'	Else
'		Call ReportEvent("Logout","User  is not Logged out  Successfully","FAIL")
'	End If

SystemUtil.CloseProcessByName("olfpres.exe")
SystemUtil.CloseProcessByName("olisten.exe")
Call WaitForObject(Window("OpenLink"),120)
Window("OpenLink").Click 143,91
wait 1
If  Window("OpenLink").Exist(1) = False Then
Call ReportEvent("Logout","User is Logged out Successfully","PASS")
Else
Call ReportEvent("Logout","User  is not Logged out  Successfully","FAIL")
End If

End Function




'*******************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: VerifyServerStatus
' Purpose					: Verifies if the server status is as expected
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************
Function VerifyServerStatus()

strServerNames = GetData(Environment("currentKeyWord"),"DispatcherName")
strExpectedServerStatus = GetData(Environment("currentKeyWord"), "ServerStatus")


flagMultipleServer = false
flagMultipleServerStatus = false
intNoOfServer = 0
intNoOfServerStatus = 0
Dim arrServerNames,arrServerStatus

If Instr(strServerNames,",")>0 Then
arrServerNames = Split(strServerNames,",")
flagMultipleServer = true
intNoOfServer = UBound(arrServerNames)
End If
If Instr(strExpectedServerStatus,",")>0 Then
arrServerStatus = Split(strExpectedServerStatus,",")
flagMultipleServerStatus = true
intNoOfServerStatus = UBound(arrServerStatus)
End If

Call WaitForObject(SwfWindow("Window_EndurMainWindow"),10) 
Call fn_ClickOnMainMenuObject("Services Mgr")
Call WaitForObject(Window("Window_ServicesManager"),10)
Window("Window_ServicesManager").Activate
Win("Win_ServicesManager").NBook("Tabs_ServiceManager_ServerManagement").ClickTab "Server Management"

For i = 0 to intNoOfServer

If flagMultipleServer = true Then
serverName = MultilineTrim(arrServerNames(i))
Else
serverName = strServerNames
End If
If flagMultipleServerStatus = true Then
expectedServerStatus = MultilineTrim(arrServerStatus(i))
else
expectedServerStatus = strExpectedServerStatus
End If

actualServerStatus = Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").GetCellValue("ByTitle",serverName,"Status")
If Ucase(actualServerStatus) = Ucase(expectedServerStatus) Then
Call ReportEvent("VerifyServerStatus", "Server "  & Chr(34) & serverName & Chr(34) &  " status as expected - " & Chr(34) & actualServerStatus & Chr(34) ,"PASS")
else
Call ReportEvent("VerifyServerStatus", "Server "  & Chr(34) & serverName & Chr(34) &  " status NOT as expected: Expected - " & Chr(34) & expectedServerStatus & Chr(34) & " ; Actual - " & Chr(34) & actualServerStatus & Chr(34) & ", Kindly change server status by logging in to the server manually","FAIL")
Environment("AbortExecution") = True
End If
Next

Window("Window_ServicesManager").Close

End Function


'********************************************************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: SetDefaultDispatcher
' Purpose					: Set the given Dispatcher as default
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************
Function SetDefaultDispatcher()

	dispatcherName = GetData("SetDefaultDispatcher", "DispatcherName")
	
	Call WaitForObject(SwfWindow("Window_EndurMainWindow"),10)	
	Call fn_ClickOnMainMenuObject("Services Mgr")
	
	Call WaitForObject(Window("Window_ServicesManager"),10)
	
	Window("Window_ServicesManager").Activate
	Win("Win_ServicesManager").NBook("Tabs_ServiceManager_ServerManagement").ClickTab "Server Management"
	Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement").CellClick "ByTitle", dispatcherName,"Default"
	Call WaitForObject(Win("Win_ServicesManager").IBut("SaveButton_ServiceManager"),10)
	wait 3
	Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").RefreshObject
	Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").Click
	
	Call ReportEvent("SetDefaultDispatcher", "Dispatcher " & Chr(34) & dispatcherName & Chr(34) & " set to Default", "PASS")
	
	Window("Window_ServicesManager").Close

End Function




'**********************************************************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: RunJobsDriver
' Purpose					: This function is created to differentiate between workflo name in driver sheet and call RunJob function with one set of data at a time
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function RunJobsDriver()

	strAllWorkFlowName 	= GetData(Environment("currentKeyWord"),"WorkFlowName")
	'msgbox strAllWorkFlowName
	strAllJobNames 		= GetData(Environment("currentKeyWord"),"JobsName")
	strAllDispatcherNames 	= GetData(Environment("currentKeyWord"),"DispatcherName")
	strAllJobSequenceNos 	= GetData(Environment("currentKeyWord"),"JobSequenceNo")
	strAllRunWorkFlow 		= GetData(Environment("currentKeyWord"),"RunEntireWorkFlow")
	strAllLogFileNames 	= GetData(Environment("currentKeyWord"),"LogFileName")

	'	If Instr(strAllWorkFlowName,",")>0 Then
	arrTempWorkFlow = Split(strAllWorkFlowName,",")
	intTempWorkFlowCount = UBound(arrTempWorkFlow)
	'	End If
	'If Instr(strAllJobNames,",")>0 Then
	arrTempJobName = Split(strAllJobNames,",")
	intTempJobCount = UBound(arrTempJobName)
	'End If
	'If Instr(strAllDispatcherNames,",")>0 Then
	arrTempDispatcherName = Split(strAllDispatcherNames,",")
	intTempDispatcherCount = UBound(arrTempDispatcherName)
	'End If
	'If Instr(strAllJobSequenceNos,",")>0 Then
	arrTempSequenceNo = Split(strAllJobSequenceNos,",")
	intTempSequenceCount = UBound(arrTempSequenceNo)
	'End If
	'If Instr(strAllRunWorkFlow,",")>0 Then
	arrTempRunWorkFlow = Split(strAllRunWorkFlow,",")
	intTempRunWorkFlowCount = UBound(arrTempRunWorkFlow)
	'End If
	'If Instr(strAllLogFileNames,",")>0 Then
	arrTempLogFileNames = Split(strAllLogFileNames,",")
	intTempLogFileNamesCount = UBound(arrTempLogFileNames)
	'End If

	strJobNames = arrTempJobName(0)
	strWorkFlowName = arrTempWorkFlow(0)
	strDispatcherNames = arrTempDispatcherName(0)
	strJobSequenceNos = arrTempSequenceNo(0)
	strRunWorkFlow = arrTempRunWorkFlow(0)
	strLogFileNames = arrTempLogFileNames(0)
	strSeperator = ","
	
	If intTempJobCount = 0 Then
		Call removeComaAtEnd(strJobNames)
		Call removeComaAtEnd(strWorkFlowName)
		Call removeComaAtEnd(strDispatcherNames)
		Call removeComaAtEnd(strJobSequenceNos)
		Call removeComaAtEnd(strRunWorkFlow)
		Call removeComaAtEnd(strLogFileNames)

		Call RunJobs()
	Else
	
		For noOfJob = 1 to intTempJobCount
		
			If intTempWorkFlowCount >= noOfJob Then
				If   arrTempWorkFlow(noOfJob) <> "" Then
					Call removeComaAtEnd(strJobNames)
					Call removeComaAtEnd(strWorkFlowName)
					Call removeComaAtEnd(strDispatcherNames)
					Call removeComaAtEnd(strJobSequenceNos)
					Call removeComaAtEnd(strRunWorkFlow)
					Call removeComaAtEnd(strLogFileNames)
	
					Call RunJobs()
					
					strJobNames = ""
					strWorkFlowName = ""
					strDispatcherNames = ""
					strJobSequenceNos = ""
					strRunWorkFlow = ""
					strLogFileNames = ""
					strSeperator = ""
				End If	
			End If
	
	
			strJobNames = strJobNames & strSeperator & arrTempJobName(noOfJob)
			If  intTempWorkFlowCount >= noOfJob Then
				strWorkFlowName = strWorkFlowName & strSeperator &  arrTempWorkFlow(noOfJob)
			Else
				strWorkFlowName = arrTempWorkFlow(intTempWorkFlowCount)
			End If
		
			If  intTempDispatcherCount >= noOfJob Then
				strDispatcherNames = strDispatcherNames  & strSeperator &  arrTempDispatcherName(noOfJob)
			Else
				strDispatcherNames = arrTempDispatcherName(intTempWorkFlowCount)
			End If
			If  intTempSequenceCount >= noOfJob Then
				strJobSequenceNos = strJobSequenceNos & strSeperator &  arrTempSequenceNo(noOfJob)
			Else
				strJobSequenceNos = arrTempSequenceNo(intTempWorkFlowCount)
			End If
			If  intTempRunWorkFlowCount >= noOfJob Then
				strRunWorkFlow = strRunWorkFlow  & strSeperator &  arrTempRunWorkFlow(noOfJob)
			Else
				strRunWorkFlow = arrTempRunWorkFlow(intTempWorkFlowCount)
			End If
			If  intTempLogFileNamesCount >= noOfJob Then
				strLogFileNames = strLogFileNames & strSeperator &  arrTempLogFileNames(noOfJob)
			Else
				strLogFileNames = arrTempLogFileNames(intTempWorkFlowCount)
			End If
	
			strSeperator = ","
			
			If noOfJob = intTempJobCount Then
				Call removeComaAtEnd(strJobNames)
				Call removeComaAtEnd(strWorkFlowName)
				Call removeComaAtEnd(strDispatcherNames)
				Call removeComaAtEnd(strJobSequenceNos)
				Call removeComaAtEnd(strRunWorkFlow)
				Call removeComaAtEnd(strLogFileNames)
				
				Call RunJobs()
			End If
	
		Next
	End If

'	'remove Folders from the jobName list
'	If Instr(LCase(Environment("driverSheet")), "_iltr.xls")> 0 Then
'	
'		'check if LTR_Framework is also being executed. If so, collapse it
'		If dictWorkflowName.Exists("SWAPLET_NGL")>0 Then
'			Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'		End If
'
'		For i = 0 to jobCounter-1
'			jobName = jobList(i)
'			If (LCase(dictWorkflowName.Item(jobName)) = "ltr_framework" AND Instr(jobName, "W_SWAPLET")<=0) OR (LCase(dictWorkflowName.Item(jobName)) = "ltr_process" AND Instr(jobName, "W_LTR")<=0) Then
'				jobList(i) = "skip"
'				dictWorkflowName.Remove(jobName)
'				
'				If dictJobDispatcher.Exists(jobName) Then
'					dictJobDispatcher.Remove(jobName)
'				End If
'					
'				If dictJobSequenceNo.Exists(jobName) Then
'					dictJobSequenceNo.Remove(jobName)
'				End If
'				
'				If dictLogFileName.Exists(jobName) Then
'					dictLogFileName.Remove(jobName)
'				End If
'					
'			End If
'		Next
'	End If


End Function



'**********************************************************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: RunJobs
' Purpose					: Run a Job in   the Endure application
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function RunJobs()

ReDim Preserve arrWorkFlowNames(50)

If (Instr(strWorkFlowName,"EOD - SKEWSENSITIVITIES")>0 OR Instr(strWorkFlowName,"EOD - SKEWSENSITIVITIES - Move Risk to VaR")>0 ) And flagJobFailed = true Then
	Call ReportEvent (strWorkFlowName & " execution", "Few jobs in MR failed , hense aborting the execution without running the EOD - SKEWSENSITIVITIES workflow", "FAIL")
	Environment("AbortTestcase") = true	
	flagJobFailed = false
Else
	If strWorkFlowName = "" Then
		strWorkFlowName 	= 	GetData("RunJobs","WorkFlowName")
		strJobNames 		= 	GetData("RunJobs","JobsName")
		strDispatcherNames 	= GetData("RunJobs","DispatcherName")
		strJobSequenceNos 	= GetData("RunJobs","JobSequenceNo")
		strRunWorkFlow 		= GetData("RunJobs","RunEntireWorkFlow")
		strLogFileNames 	= GetData("RunJobs","LogFileName")
	End If
	Set dictCurrentJobDispatcher = CreateObject("Scripting.Dictionary")
	Set dictCurrentJobSequenceNo = CreateObject("Scripting.Dictionary")
	
	
	arrWorkFlowNames(intWorkFlowCount) = strWorkFlowName
	intWorkFlowCount = intWorkFlowCount+1
	flagJobsSummaryRequired = True
	multipleJobFlag = false
	proceedFlag = true
	
	If Not Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").Exist(2) Then
		Call fn_ClickOnMainMenuObject("Services Mgr")
		Call WaitForObject(Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement"),20)
		wait 3
		Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement").ClickTab("Workflow Management")
		Call WaitForObject(Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement"),20)
	End If
	
	If lCase(strRunWorkFlow)="true"  Or lCase(strRunWorkFlow)="yes" Then
		multipleJobFlag = true
		Call getJobNamesFromWorkFlow(dictCurrentJobDispatcher,dictCurrentJobSequenceNo)
' getJobNamesFromWorkFlow(dictCurrentJobDispatcher, dictCurrentJobSequenceNo)
'getJobNamesFromWorkFlow
		Call setDispatchers(dictCurrentJobDispatcher)
		Call setSequences(dictCurrentJobSequenceNo)
		If Environment("currentTestCase") <> "SetDispatcherSequence" Then
			Call runEntireWorkFlow()
		End If
	Else
		Call checkParametersCount()
		If proceedFlag =true Then
			Call buildDictionaries(dictCurrentJobDispatcher,dictCurrentJobSequenceNo)
			Call setDispatchers(dictCurrentJobDispatcher)
			Call setSequences(dictCurrentJobSequenceNo)
			If Environment("currentTestCase") <> "SetDispatcherSequence" Then
				Call saveAndRunJobs()
			End If
		End If
	End If

End If


End Function


'****************************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: makeJobsVisible
' Purpose					: Make all thr jobs visible before job monitoring starts
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function makeJobsVisible(strWorkflowsList)

	ReDim Preserve arrWorkFlowNames(intWorkFlowCount-1)
	
	If Instr(strWorkflowsList,",")>0 Then
		arrWorkflowsToBeVisible = Split(strWorkflowsList, ",")
	Else
		ReDim arrWorkflowsToBeVisible(0)
		arrWorkflowsToBeVisible(0) = strWorkflowsList
	End If
	
	
	If Instr(LCase(strWorkflowsList), ",ltr_framework")>0 Then
		Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle","LTR_Framework"
		wait 2
	End If
	
	For i=0 to UBound(arrWorkflowsToBeVisible)
		strMaxRow = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetROProperty("maxrow")
		For j = 1 to strMaxRow - 1 
			strRowValue = CStr(j)
			strAppWorkFlowName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByIndx",strRowValue,"1")
			If UCase(strAppWorkFlowName) = UCase(arrWorkflowsToBeVisible(i)) Then
				If LCase(strAppWorkFlowName) <> "ltr_framework" AND LCase(strAppWorkFlowName) <> "ltr_process" Then
					jobPosition = j+1
					strRowValue = CStr(jobPosition)
					strAppJobName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByIndx",strRowValue,"1")
					If Instr(strAppJobName,"WAC")<=0 And Instr(strAppJobName,"Basket")<=0 And Instr(strAppJobName,"BASKET")<=0 AND Instr(strAppJobName,"W_")<=0 AND Instr(strAppJobName,"Framework_")<=0 Then
						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",arrWorkflowsToBeVisible(i)
						wait 2
					End If
					Exit For
				ElseIf LCase(strAppWorkFlowName) = "ltr_framework" Then
					strRowValue = CStr(j+1)
					strAppJobName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByIndx",strRowValue,"1")
					If Instr(strAppJobName,"_NGL")<=0 Or Instr(strAppJobName,"_DAIRY")>0 Then
			  			Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",arrWorkflowsToBeVisible(i)
						wait 2
						Exit For
					End IF
				End if
			End If
		Next 
	Next

End Function



'****************************************************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: TrackRunningJobs
' Purpose					: Track  the Job status when the job is given for execution
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function TrackRunningJobs()

Dim jobName, jobStatus, flagRunWholeWorkFlow, counterValue, WorkFlowName, strJobsToTrack
	Dim executionStartTime, executionEndTime, jobListType, Continue, intervalFromDataSheet
	Dim strFailedJobs
	If jobCounter>0 then
		ReDim Preserve jobList(jobCounter-1)
		multipleJobFlag = true
	End If

	strAbortIfFails = ",EOD - MRScenario_VAR simuilation,EOD - MRScenario Stress,"

	strMailTo = GetData(Environment("currentKeyWord"),"MailTo")
	strMailSubject = GetData(Environment("currentKeyWord"),"MailSubject")
	strLogFilePath = GetData(Environment("currentKeyWord"),"LogFilePath")
	intervalFromDataSheet = GetData(Environment("currentKeyWord"), "MailInterval_Mins")

	counterValue =int((intervalFromDataSheet * 60)/30)
	
	'Call fn_ClickOnMainMenuObject("Services Mgr")
	
	Window("Window_ServicesManager").Activate
	
	strJobsToTrack = ","
	strWorkflowsToBeVisible = ","
	If IsNull(jobList) Then
		Call ReportEvent (Environment("currentTestcase"), "There are no jobs in the JobName field of RunJobs keyword", "FAIL")
		Environment("AbortTestcase") = True
	
	elseif multipleJobFlag = true Then
		For each jobName in jobList
			If NOT dictJobStatus.Exists(jobName) Then		
				dictJobStatus.Add jobName, "Not Started"
				dictJobStartTime.Add jobName, ""
				dictJobEndTime.Add jobName,""
				strJobsToTrack = strJobsToTrack & jobName & ","
				If Instr(strWorkflowsToBeVisible, "," & dictWorkflowName.Item(jobName) & ",")<=0 Then
					strWorkflowsToBeVisible = strWorkflowsToBeVisible & dictWorkflowName.Item(jobName) & ","
				End If
			End If
		Next
	elseif multipleJobFlag = false Then
		jobName  = jobList(0)
		If not dictJobStatus.Exists(jobName) Then
		
			dictJobStatus.Add jobName, "Not Started"
			dictJobStartTime.Add jobName, ""
			dictJobEndTime.Add jobName,""
			strJobsToTrack = jobName & ","
			strWorkflowsToBeVisible = strWorkflowsToBeVisible & dictWorkflowName.Item(jobName) & ","
		End If
	End If
	
	strInterim = Right(strWorkflowsToBeVisible, Len(strWorkflowsToBeVisible)-1)
	strWorkflowsToBeVisible = Left(strInterim, Len(strInterim)-1)
	
	'Call makeJobsVisible(strWorkflowsToBeVisible)

	Win("Win_ServicesManager").Maximize
	Wait 1
	flagMailSent = False
	If Environment("AbortTestcase") = False Then
	
		Continue = True
		Counter = 2
		While Continue
		
			flagLTRFolderOpen = False
			For each jobName in dictJobStatus.Keys
				If Instr(strJobsToTrack, "," & jobName & ",")>0 Then
					If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" AND (Not flagLTRFolderOpen) Then
						Wait 2
'						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
						Call makeJobsVisible("LTR_Framework")
						flagLTRFolderOpen = True
						
					End If
					
					jobStatus = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Status")
					dictJobStatus.Item(jobName) = jobStatus
				End If
			Next
		
			If flagLTRFolderOpen Then
				Wait 2
				Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
				flagLTRFolderOpen = False						
			End If
		
			For each jobName in dictJobStatus.Keys
				If Instr(strJobsToTrack, "," & jobName & ",")>0 Then
				
					jobStatus = dictJobStatus.Item(jobName)
					If jobStatus = "Running" Then
			
						If dictJobStartTime.Item(jobName) = "" Then
							If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
								Wait 1
								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
								Wait 1
								executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
							Else
								Wait 1
								executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
							End If
			
							dictJobStartTime.Item(jobName) = executionStartTime
			
						End If
			
					elseif jobStatus = "Failed" OR jobStatus = "Succeeded" Then
			
						If dictJobStartTime.Item(jobName) = "" Then
			
							If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
								Wait 1
								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
								Wait 1
								executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
							Else
								Wait 1
								executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
							End If
			
							dictJobStartTime.Item(jobName) = executionStartTime
			
						End If
			
						If dictJobEndTime.Item(jobName) = "" Then
			
							If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
								Wait 1
								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
								Wait 1								
								executionEndTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last End")
								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
							Else
								Wait 1
								executionEndTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last End")
							End If
							dictJobEndTime.Item(jobName) = executionEndTime
			
							If jobStatus = "Succeeded" Then
								Call ReportEvent("TrackRunningJobs","The Job  " & Chr(34) & jobName & Chr(34) & " is  successfully completed ","PASS")
							Else
								Call ReportEvent("TrackRunningJobs","The Job  " & Chr(34) & jobName & Chr(34) & " Failed ","FAIL")
								flagJobFailed = true
								Wait 1
								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",jobName,"Status"
								Wait 1
								
								Call SendFailureReport(jobName,strMailTo,strMailSubject,strLogFilePath)
								If Instr(LCase(strAbortIfFails), "," & LCase(dictWorkflowName.Item(jobName)) & ",")>0 Then
									Environment("AbortTestcase") = true
								End If
								strFailedJobs = strFailedJobs & jobName & ","
							End If
						End If
					End If
				End If
			Next
			Wait(30)
			Counter = Counter - 1
		
			If Counter = 0 Then
				Call sendStatusUpdateMail(strMailTo,strMailSubject, strJobsToTrack)
				flagMailSent = True
				Counter = counterValue
			End If
		
			Continue = False
			For each jobName in dictJobStatus.Keys
				jobStatus = dictJobStatus.Item(jobName)
				If jobStatus = "Running" OR jobStatus = "Waiting" OR jobStatus = "Msg Requested" Then
					Continue = True
					Exit For
				End If
			Next
		Wend
		
		Call sendStatusUpdateMail(strMailTo,strMailSubject, strJobsToTrack)
		
		If flagMemoryException=true AND Instr(LCase(Environment("driverSheet")), "_iltr.xls")<=0 Then
			Win("Win_ServicesManager").Terminate
			Call runMemoryExceptionJobs(strMailTo,strMailSubject)
		End If
		
		If Instr(LCase(Environment("driverSheet")), "_iltr.xls")>0 AND strFailedJobs <> "" Then
			flagiLTRJobsFailed = True
			Call removeComaAtEnd(strFailedJobs)
			Call fn_RunFailedJobs(strFailedJobs, strMailTo, strMailSubject, strLogFilePath, intervalFromDataSheet)
        ElseIf strFailedJobs <> "" Then		
            flagJobFailed = true  
            Call removeComaAtEnd(strFailedJobs)
			Call fn_RunFailedJobs(strFailedJobs, strMailTo, strMailSubject, strLogFilePath, intervalFromDataSheet)         
		End If
		
		If Win("Win_ServicesManager").Exist(2) Then
			Win("Win_ServicesManager").Minimize
			Win("Win_ServicesManager").Terminate
		End If
		
		If Win("Win_ServicesManager").Exist(2) Then
			Win("Win_ServicesManager").Terminate
		End If
	End If
'
'''''''''''''''''''''*****************************************************************************
'	Dim jobName, jobStatus, flagRunWholeWorkFlow, counterValue, WorkFlowName, strJobsToTrack
'	Dim executionStartTime, executionEndTime, jobListType, Continue, intervalFromDataSheet
'	Dim strFailedJobs
'	If jobCounter>0 then
'		ReDim Preserve jobList(jobCounter-1)
'		multipleJobFlag = true
'	End If
'
'	strAbortIfFails = ",EOD - MRScenario_VAR simuilation,EOD - MRScenario Stress,"
'
'	strMailTo = GetData(Environment("currentKeyWord"),"MailTo")
'	strMailSubject = GetData(Environment("currentKeyWord"),"MailSubject")
'	strLogFilePath = GetData(Environment("currentKeyWord"),"LogFilePath")
'	intervalFromDataSheet = GetData(Environment("currentKeyWord"), "MailInterval_Mins")
'
'	counterValue =int((intervalFromDataSheet * 60)/30)
'	
'	'Call fn_ClickOnMainMenuObject("Services Mgr")
'	
'	Window("Window_ServicesManager").Activate
'	
'	strJobsToTrack = ","
'	strWorkflowsToBeVisible = ","
'	If IsNull(jobList) Then
'		Call ReportEvent (Environment("currentTestcase"), "There are no jobs in the JobName field of RunJobs keyword", "FAIL")
'		Environment("AbortTestcase") = True
'	
'	elseif multipleJobFlag = true Then
'		For each jobName in jobList
'			If NOT dictJobStatus.Exists(jobName) Then		
'				dictJobStatus.Add jobName, "Not Started"
'				dictJobStartTime.Add jobName, ""
'				dictJobEndTime.Add jobName,""
'				strJobsToTrack = strJobsToTrack & jobName & ","
'				If Instr(strWorkflowsToBeVisible, "," & dictWorkflowName.Item(jobName) & ",")<=0 Then
'					strWorkflowsToBeVisible = strWorkflowsToBeVisible & dictWorkflowName.Item(jobName) & ","
'				End If
'			End If
'		Next
'	elseif multipleJobFlag = false Then
'		jobName  = jobList(0)
'		If not dictJobStatus.Exists(jobName) Then
'		
'			dictJobStatus.Add jobName, "Not Started"
'			dictJobStartTime.Add jobName, ""
'			dictJobEndTime.Add jobName,""
'			strJobsToTrack = jobName & ","
'			strWorkflowsToBeVisible = strWorkflowsToBeVisible & dictWorkflowName.Item(jobName) & ","
'		End If
'	End If
'	
'	strInterim = Right(strWorkflowsToBeVisible, Len(strWorkflowsToBeVisible)-1)
'	strWorkflowsToBeVisible = Left(strInterim, Len(strInterim)-1)
'	
'	Call makeJobsVisible(strWorkflowsToBeVisible)
'
'	Win("Win_ServicesManager").Maximize
'	Wait 1
'	flagMailSent = False
'	If Environment("AbortTestcase") = False Then
'	
'		Continue = True
'		Counter = 2
'		flagLTRFolderOpen = True
'		While Continue
'		     if Counter = 2 then 
'		           flagLTRFolderOpen = True
'		     else
'		           flagLTRFolderOpen = False
'		     End if
'			
'			For each jobName in dictJobStatus.Keys
'				If Instr(strJobsToTrack, "," & jobName & ",")>0 Then
'					If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework"  AND (Not flagLTRFolderOpen) Then
'						Wait 2
'						Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'						flagLTRFolderOpen = True
'						wait 2
'					End If
'					
'					jobStatus = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Status")
'					dictJobStatus.Item(jobName) = jobStatus
'				End If
'			Next
'		
'			If flagLTRFolderOpen Then
'				
'				Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'				flagLTRFolderOpen = False
'                Wait 2				
'			End If
'		
'			For each jobName in dictJobStatus.Keys
'				If Instr(strJobsToTrack, "," & jobName & ",")>0 Then
'				
'					jobStatus = dictJobStatus.Item(jobName)
'					If jobStatus = "Running" Then
'			
'						If dictJobStartTime.Item(jobName) = "" Then
'							If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
'								'Wait 1
'								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'								Wait 2
'								executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
'								wait 1
'								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'								wait 2
'							Else
'								Wait 1
'								executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
'							End If
'			
'							dictJobStartTime.Item(jobName) = executionStartTime
'			
'						End If
'			
'					elseif jobStatus = "Failed" OR jobStatus = "Succeeded" Then
'			
'						If dictJobStartTime.Item(jobName) = "" Then
'			
'							If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
'								'Wait 1
'								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'								Wait 2
'								executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
'								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'							    wait 2
'							
'							Else
'								Wait 1
'								executionStartTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last Start")
'							End If
'			
'							dictJobStartTime.Item(jobName) = executionStartTime
'			
'						End If
'			
'						If dictJobEndTime.Item(jobName) = "" Then
'			
'							If LCase(dictWorkflowName.Item(jobName))  = "ltr_framework" Then
'								'Wait 1
'								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'								Wait 2								
'								executionEndTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last End")
'								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle", "LTR_Framework"
'							  wait 2
'							
'							Else
'								Wait 1
'								executionEndTime = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Last End")
'							End If
'							dictJobEndTime.Item(jobName) = executionEndTime
'			
'							If jobStatus = "Succeeded" Then
'								Call ReportEvent("TrackRunningJobs","The Job  " & Chr(34) & jobName & Chr(34) & " is  successfully completed ","PASS")
'							Else
'								Call ReportEvent("TrackRunningJobs","The Job  " & Chr(34) & jobName & Chr(34) & " Failed ","FAIL")
'								flagJobFailed = true
'								Wait 1
'								Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",jobName,"Status"
'								Wait 1
'								
'								Call SendFailureReport(jobName,strMailTo,strMailSubject,strLogFilePath)
'								If Instr(LCase(strAbortIfFails), "," & LCase(dictWorkflowName.Item(jobName)) & ",")>0 Then
'									Environment("AbortTestcase") = true
'								End If
'								strFailedJobs = strFailedJobs & jobName & ","
'							End If
'						End If
'					End If
'				End If
'			Next
'			Wait(30)
'			Counter = Counter - 1
'		
'			If Counter = 0 Then
'				Call sendStatusUpdateMail(strMailTo,strMailSubject, strJobsToTrack)
'				flagMailSent = True
'				Counter = counterValue
'			End If
'		
'			Continue = False
'			For each jobName in dictJobStatus.Keys
'				jobStatus = dictJobStatus.Item(jobName)
'				If jobStatus = "Running" OR jobStatus = "Waiting" OR jobStatus = "Msg Requested" Then
'					Continue = True
'					Exit For
'				End If
'			Next
'		Wend
'		
'		Call sendStatusUpdateMail(strMailTo,strMailSubject, strJobsToTrack)
'		
'		If flagMemoryException=true AND Instr(LCase(Environment("driverSheet")), "_iltr.xls")<=0 Then
'			Win("Win_ServicesManager").Terminate
'			Call runMemoryExceptionJobs(strMailTo,strMailSubject)
'		End If
'		
'		If Instr(LCase(Environment("driverSheet")), "_iltr.xls")>0 AND strFailedJobs <> "" Then
'			flagiLTRJobsFailed = True
'			Call removeComaAtEnd(strFailedJobs)
'			Call fn_RunFailedJobs(strFailedJobs, strMailTo, strMailSubject, strLogFilePath, intervalFromDataSheet)
'        ElseIf strFailedJobs <> "" Then		
'            flagJobFailed = true  
'            Call removeComaAtEnd(strFailedJobs)
'			Call fn_RunFailedJobs(strFailedJobs, strMailTo, strMailSubject, strLogFilePath, intervalFromDataSheet)         
'		End If
'		
'		If Win("Win_ServicesManager").Exist(2) Then
'			Win("Win_ServicesManager").Minimize
'			Win("Win_ServicesManager").Terminate
'		End If
'		
'		If Win("Win_ServicesManager").Exist(2) Then
'			Win("Win_ServicesManager").Terminate
'		End If
'	End If

End Function




'****************************************************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: runEntireWorkFlow
' Purpose					: If RunEntireWorkFlow column in driver sheet is true , it will run entire workflow
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function runEntireWorkFlow()

Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").Click
wait 3
Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName
wait 1
Win("Win_ServicesManager").IBut("RunButton_ServiceManager").Click
Wait 2
strStatusRun = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",strWorkFlowName,"Status")
If  strStatusRun="Running" Then
Call ReportEvent("Run Job","The given workflow " & Chr(34) & strWorkFlowName & Chr(34) & " is run successfully ","PASS")
Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName
Else
Call ReportEvent("Run Job","The given workflow "  & Chr(34) & strWorkFlowName  & Chr(34) & " is not run successfully ","FAIL")
End If


End Function





'****************************************************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: checkParametersCount
' Purpose					: This function will check if the no. of parameters in DispatherName and JobSequenceNo column in driver sheet is equall to JobsName column(**if more than one dispatcher and sequence is used)
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function checkParametersCount()

intJobCount = 0
intDispatcherCount = 0
intSequenceCount = 0
intLogFileCount = 0

If Instr(strJobNames,",")>0 Then
arrJobName = Split(strJobNames,",")
intJobCount = UBound(arrJobName)
multipleJobFlag = True
End If

If Instr(strDispatcherNames,",")>0 Then
arrDispatcherName = Split(strDispatcherNames,",")
intDispatcherCount = UBound(arrDispatcherName)
If intDispatcherCount<>intJobCount Then 
Call ReportEvent("Run Job","The no of dispatcher provided is not matching the no. of Job given for execution","FAIL")
Environment("AbortTestcase") = True
proceedFlag = false
End If
End If

If Instr(strJobSequenceNos,",")>0 Then
arrJobSequenceNo = Split(strJobSequenceNos,",")
intSequenceCount = UBound(arrJobSequenceNo)
If intSequenceCount<>intJobCount Then
Call ReportEvent("Run Job","The no of sequence provided is not matching the no. of Job given for execution","FAIL")
Environment("AbortTestcase") = True
proceedflag = false
End If
End If

If Instr(strLogFileNames,",")>0 Then
arrLogFileName = Split(strLogFileNames,",")
intLogFileCount = UBound(arrLogFileName)
If intLogFileCount<>intDispatcherCount Then
Call ReportEvent("Run Job","The no of log file name provided is not matching the no. of dispatcher given for execution","FAIL")
Environment("AbortTestcase") = True
proceedflag = false
End If
End If


End Function





'***************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: BuildDictionaries
' Purpose					: This function will build all the necessary dictionaries for the jobs to run
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function buildDictionaries(dictCurrentJobDispatcher,dictCurrentJobSequenceNo)

ReDim Preserve jobList(500)

For i = 0 to intJobCount 

If multipleJobFlag = false Then
strJobName = strJobNames
jobList(jobCounter) = strJobName
jobCounter = jobCounter + 1
dictWorkflowName.Add strJobName,strWorkFlowName
Else 
strJobName = MultilineTrim(arrJobName(i))
jobList(jobCounter) = strJobName
jobCounter = jobCounter + 1
If not dictWorkflowName.Exists(strJobName) then 
	dictWorkflowName.Add strJobName,strWorkFlowName
End If
End If

If multipleJobFlag = True And intDispatcherCount>0 Then
strDispatcherName = MultilineTrim(arrDispatcherName(i))
If strDispatcherName<>"" And Not dictJobDispatcher.Exists(strJobName) Then
dictJobDispatcher.Add strJobName,strDispatcherName
End If

dictCurrentJobDispatcher.Add strJobName,strDispatcherName
ElseIf strDispatcherNames="" Then
strDispatcherName = "Default"
If Not dictJobDispatcher.Exists(strJobName) Then
dictJobDispatcher.Add strJobName,strDispatcherName
End If
dictCurrentJobDispatcher.Add strJobName,strDispatcherName
Else
strDispatcherName = strDispatcherNames
If Not dictJobDispatcher.Exists(strJobName) Then
dictJobDispatcher.Add strJobName,strDispatcherName
End If
dictCurrentJobDispatcher.Add strJobName,strDispatcherName
End If

If multipleJobFlag = True And intLogFileCount>0 Then
strLogFileName = MultilineTrim(arrLogFileName(i))
strDispatcherName = dictJobDispatcher.Item(strJobName)
If strDispatcherName<>"" And Not dictLogFileName.Exists(strDispatcherName) Then
dictLogFileName.Add strDispatcherName,strLogFileName
intdispCount = intdispCount+1
End If
Else
strLogFileName = strLogFileNames
If Not dictLogFileName.Exists(strDispatcherName) Then
dictLogFileName.Add strDispatcherName,strLogFileName
End If
End If

If multipleJobFlag = True And intSequenceCount>0 Then
strJobSequenceNo = MultilineTrim(arrJobSequenceNo(i))
If strJobSequenceNo<>"" And Not dictJobSequenceNo.Exists(strJobName) Then
dictJobSequenceNo.Add strJobName,strJobSequenceNo
End If
dictCurrentJobSequenceNo.Add strJobName,strJobSequenceNo
Else
strJobSequenceNo = strJobSequenceNos
If strJobSequenceNo<>"" And Not dictJobSequenceNo.Exists(strJobName) Then
dictJobSequenceNo.Add strJobName,strJobSequenceNo
End If
dictCurrentJobSequenceNo.Add strJobName,strJobSequenceNo
End If

Next

End Function




'*******************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: setDispatchers
' Purpose					: This function will set the dispathers name given in driver sheet to their respective jobs
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function setDispatchers(dictCurrentJobDispatcher)


Win("Win_ServicesManager").Maximize
Wait 1
Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName

    wait 2
   For each jobName in dictCurrentJobDispatcher.Keys
   
   Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName,"Primary Server Node" 'job'Primary
   wait 1
   strDispatcherName = dictCurrentJobDispatcher.Item(jobName)
   Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strDispatcherName,""
   wait 2
   Exit for
    Next
    For each jobName in dictCurrentJobDispatcher.Keys
        
        strDispatcherName = dictCurrentJobDispatcher.Item(jobName)
        If strDispatcherName<>"" Then
        
       ' Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitleByIndx","EOD - MRScenario_VAR simulation","1"
        
        
        
'Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitleByIndx","EOD - MRScenario_VAR simulation","1"
'Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitleByIndx","W_CreatMrVaRDeltaVegaSimDef","1"

           Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",JobName
            
            strAppDispatcherName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",JobName,"Job Server Node") 'job'Primary
            If  strAppDispatcherName <> strDispatcherName Then
                Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",JobName,"Job Server Node" 'job'Primary
                Wait 2

'                dispatcherLen = Len(strDispatcherName)
'                For j = 1 to dispatcherLen
'                    strChar = mid(strDispatcherName,j,1)
'                    WShell.SendKeys(strChar)
'                    Wait 1
'                Next                
'                WShell.SendKeys("{ENTER}")
                
                Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strDispatcherName,""
                wait 3
                Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",JobName
              wait 2
                strAppDispatcherName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",JobName,"Job Server Node") 'job'Primary
                If  strAppDispatcherName = strDispatcherName Then
                        Call ReportEvent("Set Dispatcher","The Dispatcher Name " & Chr(34) & strDispatcherName & Chr(34) & " is  successfully Set","PASS")
                Else
                        Call ReportEvent("Set Dispatcher","The Dispatcher Name " & Chr(34) & strDispatcherName & Chr(34) & " is  not set correctly , it is set as " & Chr(34) & strAppDispatcherName & Chr(34),"FAIL")
                End If
            Else
                Call ReportEvent("Set Dispatcher","The Dispatcher Name " & Chr(34) & strDispatcherName & Chr(34) & " for the job " & Chr(34) & jobName & Chr(34) & " is  already Set","PASS")
            End If
            
        Else
            Call ReportEvent("Set Dispatcher","As there is no dispatcher name provided for the job " & Chr(34) & jobName & Chr(34) & " the dispatcher is not set","INFO")                
        End If
   Next
   Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").Click
  wait 2

'**************************************
'Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName
'wait 2
'
''workflow Dispatcher should be set to any of the online services
'Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName,"Job Server Node" '"Dispatcher"
'Wait 2
'Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle","Default",""
'wait 2
''Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName
'
'For each jobName in dictCurrentJobDispatcher.Keys
'
'strDispatcherName = dictCurrentJobDispatcher.Item(jobName)
'If strDispatcherName<>"" Then
'
'Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",jobName
'strAppDispatcherName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Job Server Node")   '"Dispatcher"
'If  strAppDispatcherName <> strDispatcherName Then
'Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",jobName,"Job Server Node"
'Wait 2
'
''				dispatcherLen = Len(strDispatcherName)
''				For j = 1 to dispatcherLen
''					strChar = mid(strDispatcherName,j,1)
''					WShell.SendKeys(strChar)
''					Wait 1
''				Next				
''				WShell.SendKeys("{ENTER}")
'
'Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strDispatcherName,""
'wait 3
'Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",jobName
'wait 2
'strAppDispatcherName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Job Server Node") '"Dispatcher"
'If  strAppDispatcherName = strDispatcherName Then
'Call ReportEvent("Set Dispatcher","The Dispatcher Name " & Chr(34) & strDispatcherName & Chr(34) & " is  successfully Set","PASS")
'Else
'Call ReportEvent("Set Dispatcher","The Dispatcher Name " & Chr(34) & strDispatcherName & Chr(34) & " is  not set correctly , it is set as " & Chr(34) & strAppDispatcherName & Chr(34),"FAIL")
'End If
'Else
'Call ReportEvent("Set Dispatcher","The Dispatcher Name " & Chr(34) & strDispatcherName & Chr(34) & " for the job " & Chr(34) & jobName & Chr(34) & " is  already Set","PASS")
'End If
'
'Else
'Call ReportEvent("Set Dispatcher","As there is no dispatcher name provided for the job " & Chr(34) & jobName & Chr(34) & " the dispatcher is not set","INFO")				
'End If
'Next
''	Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").Click
	''wait 2

End Function





'****************************************************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: setSequences
' Purpose					: This function will set the sequence no.s given in driver sheet to their respective jobs
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************


Function setSequences(dictCurrentJobSequenceNo)

For each jobName in dictCurrentJobSequenceNo.Keys
strCurrentJob = jobName
strJobSequenceNo = dictCurrentJobSequenceNo.Item(jobName)
If strJobSequenceNo<>"" Then
strAppJobSequenceNo = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Sequence")
If  strAppJobSequenceNo <> strJobSequenceNo Then
Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",jobName
Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").SetCellValue "ByTitle",jobName,"Sequence",strJobSequenceNo
WShell.SendKeys("{ENTER}")
wait 3
Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",jobName
Wait 1
strAppJobSequenceNo = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",jobName,"Sequence")
If  strAppJobSequenceNo = strJobSequenceNo Then
Call ReportEvent("Set Sequence","The JobSequence Number " & Chr(34) & strJobSequenceNo & Chr(34) & " for the job " & Chr(34) & jobName & Chr(34) & " is Set Successfully ","PASS")
Else
Call ReportEvent("Set Sequence","The JobSequence Number " & Chr(34) & strJobSequenceNo & Chr(34) & " for the job " & Chr(34) & jobName & Chr(34) & " is  not Set Correctly, it is set as " & Chr(34) & strAppJobSequenceNo & Chr(34),"FAIL")
End If
Else
Call ReportEvent("Set Sequence","The JobSequence Number " & Chr(34) & strJobSequenceNo & Chr(34) & " for the job " & Chr(34) & jobName & Chr(34) & " is already Set","PASS")
End If
Else
Call ReportEvent("Set Sequence","The JobSequence Number  for the job " & Chr(34) & jobName & Chr(34) & " is Set Successfully ","PASS")
'Call ReportEvent("Set Sequence","As there is no sequence no. provided for the job " & Chr(34) & jobName & Chr(34) & " the sequence no. is not set","INFO")				
End If
Next
'	Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").Click
'	wait 2
End Function




'****************************************************************************************************************************************************************************************************




'*******************************************************************************
' Function/Procedure Name	: saveAndRunJobs
' Purpose					: This function will save the changes made in the workflow management tab and run the jobs given in driver sheet
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function saveAndRunJobs()

Win("Win_ServicesManager").IBut("SaveButton_ServiceManager").Click
Wait 3
Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strCurrentJob
wait 1
Win("Win_ServicesManager").IBut("RunButton_ServiceManager").Click
Wait 1
'Win("Run Workflow or Job").RBut("Run Workflow starting").Click "On"

Win("Run Workflow or Job").RBut("Run Workflow starting").Click "On"

Win("Run Workflow or Job").PBut("OK").Click 
  
  
'  'Win("RunWorkflowOrJob").RBut("RunEntireWorkflow").Click "On" 
'Win("RunWorkflowOrJob").RBut("RunWorkflowStartingAt").Click "On"
'wait 1
'Win("RunWorkflowOrJob").PBut("OK_Button").Click
wait 5
strStatusRun = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByTitle",strWorkFlowName,"Status")
If  Instr(strStatusRun,"Not Started")=0 Then
Call ReportEvent("Save and Run Jobs","The listed Jobs of the workflow " & Chr(34)& strWorkFlowName & Chr(34) & " are run successfully ","PASS")
Else
Call ReportEvent("Save and Run jobs","The listed Jobs of the workflow " & Chr(34) & strWorkFlowName & Chr(34) & " are not run successfully ","FAIL")
End If


End Function




'*********************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: getJobNamesFromWorkFlow
' Purpose					: This function extract all the j=names of the jobs present under a given workflow
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function getJobNamesFromWorkFlow(dictCurrentJobDispatcher,dictCurrentJobSequenceNo)

ReDim Preserve jobList(500)
flagWorkflowFound = false


strMaxRow = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetROProperty("maxrow")
For i = 1 to strMaxRow
strRowValue = CStr(i)
strAppWorkFlowName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByIndx",strRowValue,"1")
If UCase(strAppWorkFlowName) = UCase(strWorkFlowName) Then
flagWorkflowFound = true
jobPosition = i+1
strRowValue = CStr(jobPosition)
strAppJobName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByIndx",strRowValue,"1")
If Instr(strAppJobName,"WAC")<=0 And Instr(strAppJobName,"Basket")<=0 And Instr(strAppJobName,"BASKET")<=0 Then
Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName
wait 2
End If

While flagWorkflowFound = true
strRowValue = CStr(jobPosition)
strAppJobName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").GetCellValue("ByIndx",strRowValue,"1")
If Instr(strAppJobName,"WAC")>0 Or Instr(strAppJobName,"Basket")>0 Or Instr(strAppJobName,"BASKET")>0 Or Instr(strAppJobName,"W_")>0 Or Instr(strAppJobName,"Framework_StaticData")>0 Then
jobList(jobCounter) = strAppJobName
dictWorkflowName.Add strAppJobName,strWorkFlowName
If Instr(strDispatcherNames,",")>0 Then
arrDispatcherNameLocal = Split(strDispatcherNames,",")
strDispatcherNameLocal = MultilineTrim(arrDispatcherNameLocal(0))
Else
strDispatcherNameLocal = strDispatcherNames
End If
If Instr(strJobSequenceNos,",")>0 Then
arrJobSequenceNoLocal = Split(strJobSequenceNos,",")
strJobSequenceNoLocal = MultilineTrim(arrJobSequenceNoLocal(0))
Else
strJobSequenceNoLocal = strJobSequenceNos
End If
dictJobDispatcher.Add strAppJobName,strDispatcherNameLocal
dictJobSequenceNo.Add strAppJobName,strJobSequenceNoLocal
dictCurrentJobDispatcher.Add strAppJobName,strDispatcherNameLocal
dictCurrentJobSequenceNo.Add strAppJobName,strJobSequenceNoLocal
If Not dictLogFileName.Exists(strDispatcherNames) Then
dictLogFileName.Add strDispatcherNames,strLogFileNames
End If
jobPosition = jobPosition+1
jobCounter=jobCounter+1
Else 
flagWorkflowFound = false
Exit For
End If
Wend
End If

Next

Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").CellClick "ByTitle",strWorkFlowName
wait 1

End Function





'*************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: CheckBatchSimulation
' Purpose					: This function will verify whether the Batch Simulation for a batch is set to EOD_MIN_CUM or not
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function CheckBatchSimulation()

strTasksToRun = GetData("CheckBatchSimulation","TaskName")
strBatchNames = GetData("CheckBatchSimulation","BatchNames")
strExpectedSimulation = GetData("CheckBatchSimulation","ExpectedSimulation")

Dim arrTaskNames
flagMultipleTask = false
intNoOfTask = 0
If Instr(strTasksToRun,",")>0 Then
arrTaskNames = Split(strTasksToRun,",")
flagMultipleTask = true
intNoOfTask = UBound(arrTaskNames)
End If
For i = 0 to intNoOfTask

If flagMultipleTask = true Then
strTaskName = MultilineTrim(arrTaskNames(i))
Else
strTaskName = strTasksToRun
End If
Call loadAndRunTasks(strTaskName)
Call verifyTaskStatus(strTaskName)

Next

If Instr(strBatchNames,",")>0 Then
arrBatchNames = Split(strBatchNames,",")
intBatchCount = UBound(arrBatchNames)
flagMultipleBatch = true
End If

If Instr(strExpectedSimulation,",")>0 Then
strExpectedSimulation = MultilineTrim(strExpectedSimulation)
arrExpectedSimulation = Split(strExpectedSimulation,",")
intExpectedSimulation = UBound(arrExpectedSimulation)
Else
intExpectedSimulation = 0
arrExpectedSimulation(0) = strExpectedSimulation
End If

noOfBatch = 0
If strBatchNames<>"" Then

Call fn_ClickOnMainMenuObject("Operations")
Call WaitForObject(Win("Win_Operations").NBook("Tabs_Operations"),20)
Win("Win_Operations").NBook("Tabs_Operations").ClickTab("Services")
Call WaitForObject(Win("Win_Operations").TBut("TBut_BatchSimulation"),10)
Win("Win_Operations").TBut("TBut_BatchSimulation").Click
Call WaitForObject(Win("Win_BatchSimulationDefinition").IBut("IBut_OpenButton"),10)

For i = 0 to intBatchCount

If flagMultipleBatch = false Then
strBatchName = strBatchNames
else
strBatchName = MultilineTrim(arrBatchNames(i))
End If
flagSimulation = true
Win("Win_BatchSimulationDefinition").IBut("IBut_OpenButton").Click
wait 1

'            batchNameLen = Len(strBatchName)
'			For j = 1 to batchNameLen
'				strChar = mid(strBatchName,j,1)
'				WShell.SendKeys(strChar)
'				Wait 1
'			Next
'			WShell.SendKeys("{ENTER}")

Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strBatchName,""
wait 1
Call WaitForObject(Win("Win_BatchSimulationDefinition").LBox("LBox_BatchSimulationDefination"),10)
intMaxRow = Win("Win_BatchSimulationDefinition").LBox("LBox_BatchSimulationDefination").GetROProperty("maxrow")

For k = 2 to intMaxRow

strRowValue = CStr(k)
strBatchSimulation = Win("Win_BatchSimulationDefinition").LBox("LBox_BatchSimulationDefination").GetCellValue("ByIndxByTitle",strRowValue,"Simulation")
For l = 0 to intExpectedSimulation
If strBatchSimulation =  "" Or strBatchSimulation<>arrExpectedSimulation(l) Then
flagSimulation = false
Else
flagSimulation = true
Exit For
End If
Next

If   flagSimulation = false Then
strQuery = Win("Win_BatchSimulationDefinition").LBox("LBox_BatchSimulationDefination").GetCellValue("ByIndxByTitle",strRowValue,"Query")
Call ReportEvent("Check Batch Simulation","The Simulation type for the Query " & Chr(34) & strQuery & Chr(34) & " in the Batch " & chr(34) & strBatchName & chr(34) & " is not set to " & strExpectedSimulation & " , it is " & Chr(34) & strBatchSimulation & Chr(34),"FAIL")
Environment("AbortExecution") = true
End If
Next

If flagSimulation = true Then
Call ReportEvent("Check Batch Simulation","The Simulation type for all the query in the Batch " & chr(34) & strBatchName & chr(34) & " is set to either of these " & Chr(34) & strExpectedSimulation & Chr(34),"PASS")
Else		
'			Environment("AbortTestcase") = True
ReDim Preserve arrWrongBatchSimulation(noOfBatch)
arrWrongBatchSimulation(noOfBatch) = strBatchName
noOfBatch = noOfBatch + 1
End If

Next

Win("Win_BatchSimulationDefinition").Terminate
Win("Win_Operations").Terminate

End If


End Function



'*************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: runMemoryExceptionJobs
' Purpose					: This function will run those jobs which failed due to memory exception
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function runMemoryExceptionJobs(strMailTo,strMailSubject)

Call fn_ClickOnMainMenuObject("Trading Manager")
Call WaitForObject(Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager"),20)

ReDim Preserve arrMemoryExceptionJobs(UBound(arrMemoryExceptionJobs)-1)

For i = 0 to UBound(arrMemoryExceptionJobs)
dictMemoryExceptionJobsStatus.Add arrMemoryExceptionJobs(i),""
dictMemoryExceptionJobsStartTime.Add arrMemoryExceptionJobs(i),0
dictMemoryExceptionJobsEndTime.Add arrMemoryExceptionJobs(i),0
Next

For i = 0 to UBound(arrMemoryExceptionJobs)

If arrMemoryExceptionJobs(i)<>"" Then
Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager").Click
wait 1

'        	memoryExceptionJobsLen = Len(arrMemoryExceptionJobs(i))
'			For j = 1 to memoryExceptionJobsLen
'				strChar = mid(arrMemoryExceptionJobs(i),j,1)
'				WShell.SendKeys(strChar)
'				Wait 1
'			Next
'			WShell.SendKeys("{ENTER}")

Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",arrMemoryExceptionJobs(i),"name"
wait 1
strTask = Win("Win_TradingManager").TEdit("TaskEditBox_TradingManager").GetROProperty("content")
If InStr(strTask,arrMemoryExceptionJobs(i))>0 Then

Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Task Editor"
Win("Win_TaskEditor").TEdit("ServerNodeEditBox_TaskEditor").Click
Win("Win_TaskEditor").TEdit("ServerNodeEditBox_TaskEditor").SetValue dictJobDispatcher.Item(arrMemoryExceptionJobs(i))
wait 1


If Instr(strAppServerNodeValue,dictJobDispatcher.Item(arrMemoryExceptionJobs(i)))>0 Then
Call ReportEvent("Set Server Node Value","The Server Node  " & Chr(34) & dictJobDispatcher.Item(arrMemoryExceptionJobs(i)) & Chr(34) & " is  correctly set for the Job " & Chr(34) & arrMemoryExceptionJobs(i) & Chr(34),"PASS")
Else 
Call ReportEvent("Set Server Node Value","The Server Node  " & Chr(34) & dictJobDispatcher.Item(arrMemoryExceptionJobs(i)) & Chr(34) & " is  not set correctly for the Job " & Chr(34) & arrMemoryExceptionJobs(i) & Chr(34) & ", It is wrongly set to " & Chr(34) & strAppServerNodeValue & Chr(34),"FAIL")
End If

Win("Win_TaskEditor").PBut("PBut_SaveButton").Click
Call WaitForObject(SwfWindow("Win_TaskEditorSaveAlert").SwfObject("PBut_YesButton"),10)
SwfWindow("Win_TaskEditorSaveAlert").SwfObject("PBut_YesButton").Click
Wait 1
Win("Win_TaskEditor").Terminate
Wait 1
Win("Win_TradingManager").PBut("RunTaskButton_TradingManager").Click
dictMemoryExceptionJobsStartTime.Item(arrMemoryExceptionJobs(i)) = Time
counter = 1
Do While(strStatus <> "Running" And  counter < 30)
strStatus = Win("Win_TradingManager").TEdit("StatusEditBox_TradingManager").GetROProperty("content")
wait 1
counter = counter+1
Loop	
If strStatus="Running" Then
dictMemoryExceptionJobsStatus.Item(arrMemoryExceptionJobs(i))="Running"
Call ReportEvent("Run Memory Exception Jobs","The Job  " & Chr(34) & arrMemoryExceptionJobs(i) & Chr(34) & " is  Running","PASS")
continue = true
While continue = true
strStatus = Win("Win_TradingManager").TEdit("StatusEditBox_TradingManager").GetROProperty("content")
dictMemoryExceptionJobsStatus.Item(arrMemoryExceptionJobs(i))=strStatus
If strStatus = "Succeeded" Then
Call ReportEvent("Run Memory Exception Jobs","The Job  " & Chr(34) & arrMemoryExceptionJobs(i) & Chr(34) & " is  completed Successfully from Trading Manager","PASS")
dictMemoryExceptionJobsEndTime.Item(arrMemoryExceptionJobs(i))=Time
continue = false
mailSubject = strMailSubject & " --- " & arrMemoryExceptionJobs(i) & " SUCCEEDED ----- Executed From Trading Manager"
strMailBody = "The Job "& chr(34) & arrMemoryExceptionJobs(i) & chr(34) &"  --------- SUCCEEDED " & vbNewLine&"Job WorkFlow Name   : " & dictWorkflowName.Item(arrMemoryExceptionJobs(i)) & vbNewLine& "Job Start Time                : "& dictMemoryExceptionJobsStartTime.Item(arrMemoryExceptionJobs(i)) &vbNewLine& "Job End Time                  : "& dictMemoryExceptionJobsEndTime.Item(arrMemoryExceptionJobs(i)) & vbnewLine & "Job Dispatcher               : " & dictJobDispatcher.Item(arrMemoryExceptionJobs(i))
Call SendMail(strMailTo,mailSubject,strMailBody,"")
ElseIf strStatus = "Failed" Then
Call ReportEvent("Run Memory Exception Jobs","The Job  " & Chr(34) & arrMemoryExceptionJobs(i) & Chr(34) & " has  Failed even from Trading Manager","FAIL")
dictMemoryExceptionJobsEndTime.Item(arrMemoryExceptionJobs(i))=Time
continue = false
mailSubject = strMailSubject & " --- " & arrMemoryExceptionJobs(i) & " FAILED ----- Executed From Trading Manager"
strMailBody = "The Job "& chr(34) & arrMemoryExceptionJobs(i) & chr(34) &"  --------- FAILED " & vbNewLine&"Job WorkFlow Name   : " & dictWorkflowName.Item(arrMemoryExceptionJobs(i)) & vbNewLine& "Job Start Time                : "& dictMemoryExceptionJobsStartTime.Item(arrMemoryExceptionJobs(i)) &vbNewLine& "Job End Time                  : "& dictMemoryExceptionJobsEndTime.Item(arrMemoryExceptionJobs(i)) & vbnewLine & "Job Dispatcher               : " & dictJobDispatcher.Item(arrMemoryExceptionJobs(i))
Call SendMail(strMailTo,mailSubject,strMailBody,"")
ElseIf strStatus <> "Running" Then
Call ReportEvent("Run Memory Exception Jobs","The Job  " & Chr(34) & arrMemoryExceptionJobs(i) & Chr(34) & " is in " & strStatus & "status","FAIL")
dictMemoryExceptionJobsEndTime.Item(arrMemoryExceptionJobs(i))=Time
continue = false
mailSubject = strMailSubject & " --- " & arrMemoryExceptionJobs(i) & " FAILED ----- Executed From Trading Manager"
strMailBody = "The Job "& chr(34) & arrMemoryExceptionJobs(i) & chr(34) &"  didn't successfully run , it is in " & Chr(34) & strStatus & Chr(34) & " status, Kindly check... " & vbNewLine&"Job WorkFlow Name   : " & dictWorkflowName.Item(arrMemoryExceptionJobs(i)) & vbNewLine& "Job Start Time                : "& dictMemoryExceptionJobsStartTime.Item(arrMemoryExceptionJobs(i)) &vbNewLine& "Job End Time                  : "& dictMemoryExceptionJobsEndTime.Item(arrMemoryExceptionJobs(i)) & vbnewLine & "Job Dispatcher               : " & dictJobDispatcher.Item(arrMemoryExceptionJobs(i))
Call SendMail(strMailTo,mailSubject,strMailBody,"")
End If
Wend
Else
Call ReportEvent("Run Memory Exception Jobs","The Job  " & Chr(34) & arrMemoryExceptionJobs(i) & Chr(34) & " never goes into Running status, Kindly check the issue, it stays in  " & Chr(34) & strStatus & Chr(34) & "status","FAIL")
End If
End If
End If
Next
Win("Win_TradingManager").Terminate
End Function









'*************************************************************************************************************************************************************
'EOD_MIN_CUM Ends

'################################################################################################################

'CDBO Regression Steps Begin
'*************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: checkConnexStatus
' Purpose					: This function will verify the status of the Connex
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function checkConnexStatus()

strExpectedStatus = GetData("checkConnexStatus","Status")
'msgbox strExpectedStatus
strFieldsToCheck = GetData("checkConnexStatus","FiledsToCheck")
strServerNode= GetData("checkConnexStatus","ServerNode")


Call fn_ClickOnMainMenuObject("Services Mgr")
Call WaitForObject(Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement"),500)
Wait 3
Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement").ClickTab("Grid Management")
Call WaitForObject(Win("Win_ServicesManager").NBook("Tabs_ServiceManager_GridManagement"),300)
Wait 3
Win("Win_ServicesManager").NBook("Tabs_ServiceManager_GridManagement").ClickTab("Connex Grid")
Call WaitForObject(Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex"),300)
Wait 3

flagMultipleField = false
intFieldCount = 0
If Instr(strFieldsToCheck,",")>0 Then
arrFields = Split(strFieldsToCheck,",")
intFieldCount = UBound(arrFields)
flagMultipleField = true
End If
ReDim arrOnlineScheduler(intFieldCount)
For i = 0 to intFieldCount

If flagMultipleField = true Then
strFieldName = arrFields(i) 
else
strFieldName = strFieldsToCheck
End If

strActualStatus = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").GetCellValue("ByTitle",strFieldName,"Status")

If Instr(strActualStatus,strExpectedStatus)>0 Then
Call ReportEvent("Check Connex Status","The " & Chr(34) & strFieldName & Chr(34) & " status in the Connex tab is correctly in " & chr(34) & strActualStatus & chr(34) & " status","PASS")
Reporter.ReportEvent micPass,"Check Connex Status","The " & Chr(34) & strFieldName & Chr(34) & " status in the Connex tab is correctly in " & chr(34) & strActualStatus & chr(34) & " status"
Else
Call ReportEvent("Check Connex Status","The " & Chr(34) & strFieldName & Chr(34) & " status in the Connex tab is not in " & chr(34) & strExpectedStatus & chr(34) & " status, it is in " & Chr(34) & strActualStatus & Chr(34) & " status","FAIL")
Reporter.ReportEvent micFail,"Check Connex Status","The " & Chr(34) & strFieldName & Chr(34) & " status in the Connex tab is not in " & chr(34) & strExpectedStatus & chr(34) & " status, it is in " & Chr(34) & strActualStatus & Chr(34) & " status"
End If

strGridScheduler = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").GetCellValue("ByTitle",strFieldName,"Grid Scheduler")

intOnlineSchedulerLen = UBound(arrOnlineScheduler)
flagOnlineScheduler = false
For j = 0 to intOnlineSchedulerLen
If Instr(strGridScheduler,arrOnlineScheduler(j))>0 Then
flagOnlineScheduler = true
Call ReportEvent("Check Connex Grid Scheduler","The " & Chr(34) & strFieldName & Chr(34) & " grid scheduler value in Connex tab is correctly set to the online scheduler " & chr(34) & strGridScheduler & chr(34),"PASS")
Reporter.ReportEvent micPass,"Check Connex Grid Scheduler","The " & Chr(34) & strFieldName & Chr(34) & " grid scheduler value in Connex tab is correctly set to the online scheduler " & chr(34) & strGridScheduler & chr(34)
Exit For
End If
Next
If flagOnlineScheduler = false Then
Call ReportEvent("Check Connex Grid Scheduler","The " & Chr(34) & strFieldName & Chr(34) & " grid scheduler value in Connex tab is not set to any of the online scheduler, it is set to " & chr(34) & strGridScheduler & chr(34),"FAIL")
reporter.ReportEvent micFail,"Check Connex Grid Scheduler","The " & Chr(34) & strFieldName & Chr(34) & " grid scheduler value in Connex tab is not set to any of the online scheduler, it is set to " & chr(34) & strGridScheduler & chr(34)
End If

strMaxRow = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").GetROProperty("maxrow")
For j = 1 to strMaxRow
strRowValue = CStr(j)
strAppFieldName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").GetCellValue("ByIndx",strRowValue,"1")
If Instr(strAppFieldName,strFieldName)>0 Then
flagFieldFound = true
fieldPosition = j+1
strRowValue = CStr(fieldPosition)
strAppFieldName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").GetCellValue("ByIndx",strRowValue,"1")
If Instr(strAppFieldName,"XmlEngine")<=0 Then
'Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").CellClick "ByTitle",strFieldName
Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").highlight
Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").CellClick "ByTitleByIndx",strFieldName,1
Call WaitForObject(Win("Win_ServicesManager"),20)
wait 1
End If
While flagFieldFound = true
strRowValue = CStr(fieldPosition)
strAppFieldName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").GetCellValue("ByIndx",strRowValue,"1")
If Instr(strAppFieldName,"XmlEngine")>0 Then
strActualServerNode = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Connex").GetCellValue("ByTitle",strAppFieldName,"Server Node")
If Instr(strActualServerNode,strServerNode)>0 Then
Call ReportEvent("Check Connex Status","The server node for the field " & Chr(34) & strAppFieldName & Chr(34) & " is correctly set as " & chr(34) & strActualServerNode & chr(34),"PASS")
reporter.ReportEvent micPass,"Check Connex Status","The server node for the field " & Chr(34) & strAppFieldName & Chr(34) & " is correctly set as " & chr(34) & strActualServerNode & chr(34)
Else
Call ReportEvent("Check Connex Status","The server node for the field " & Chr(34) & strAppFieldName & Chr(34) & " is not set as " & chr(34) & strServerNode & chr(34) & " it is set as " & Chr(34) & strActualServerNode & Chr(34),"INFO")
Reporter.ReportEvent micfail,"Check Connex Status","The server node for the field " & Chr(34) & strAppFieldName & Chr(34) & " is not set as " & chr(34) & strServerNode & chr(34) & " it is set as " & Chr(34) & strActualServerNode & Chr(34)
End If
fieldPosition = fieldPosition+1
Else 
flagFieldFound = false
Exit For
End If
Wend
End If
Next
Next
Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement").ClickTab("Workflow Management")
Call WaitForObject(Win("Win_ServicesManager"),500)
Wait 20
Win("Win_ServicesManager").Terminate	

End Function





'*************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: checkSchedulerStatus
' Purpose					: This function will verify the status of the Scheduler
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function checkSchedulerStatus()

strExpectedStatus = GetData("checkSchedulerStatus","Status")
strFieldsToCheck = GetData("checkSchedulerStatus","FiledsToCheck")
'msgbox strFieldsToCheck

strServerNode= GetData("checkSchedulerStatus","ServerNode")
'msgbox strServerNode

Call fn_ClickOnMainMenuObject("Services Mgr")
Call WaitForObject(Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement"),500)
wait 3
Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement").ClickTab("Grid Management")
Call WaitForObject(Win("Win_ServicesManager").LBox("LBox_ServiceManager_ServerManagement"),500)
wait 3
Win("Win_ServicesManager").NBook("Tabs_ServiceManager_GridManagement").ClickTab("Scheduler")
Call WaitForObject(Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler"),500)
Wait 2

flagMultipleField = false
intFieldCount = 0

If Instr(strFieldsToCheck,",")>0 Then
arrFields = Split(strFieldsToCheck,",")
intFieldCount = UBound(arrFields)
flagMultipleField = true
End If
ReDim arrOnlineScheduler(intFieldCount)
flagOnlineScheduler = false
For i = 0 to intFieldCount

if flagMultipleField = true Then
strFieldName = arrFields(i) 
else
strFieldName = strFieldsToCheck
End If

strActualStatus = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler").GetCellValue("ByTitle",strFieldName,"Status")
'msgbox strActualStatus
If Instr(strActualStatus,strExpectedStatus)>0 Then
Call ReportEvent("Check Scheduler Status","The " & Chr(34) & strFieldName & Chr(34) & " status in the Scheduler tab is correctly in " & chr(34) & strActualStatus & chr(34) & " status","PASS")
Reporter.ReportEvent micPass,"Check Scheduler Status","The " & Chr(34) & strFieldName & Chr(34) & " status in the Scheduler tab is correctly in " & chr(34) & strActualStatus & chr(34) & " status"
arrOnlineScheduler(i) = strFieldName
flagOnlineScheduler = true
Else
Call ReportEvent("Check Scheduler Status","The " & Chr(34) & strFieldName & Chr(34) & " status in the Scheduler tab is not in " & chr(34) & strExpectedStatus & chr(34) & " status, it is in " & Chr(34) & strActualStatus & Chr(34) & " status","INFO")
Reporter.ReportEvent micFail,"Check Scheduler Status","The " & Chr(34) & strFieldName & Chr(34) & " status in the Scheduler tab is not in " & chr(34) & strExpectedStatus & chr(34) & " status, it is in " & Chr(34) & strActualStatus & Chr(34) & " status"
End If

strMaxRow = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler").GetROProperty("maxrow")
For j = 1 to strMaxRow
strRowValue = CStr(j)
strAppFieldName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler").GetCellValue("ByIndx",strRowValue,"1")
If Instr(strAppFieldName,strFieldName)>0 Then
				Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler").CellRightClick "ByTitleByIndx","Inbound_Scheduler","1"
				'Win("Window").Menu("Menu").MenuSelect "E&xpand All"
flagFieldFound = true
fieldPosition = j+1
strRowValue = CStr(fieldPosition)
strAppFieldName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler").GetCellValue("ByIndx",strRowValue,"1")
If CStr(strAppFieldName)<>"Scheduler" Then
Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler").CellClick "ByTitleByIndx",strFieldName,"1"
Call WaitForObject(Win("Win_ServicesManager"),5000)
wait 1
End If
While flagFieldFound = true
strRowValue = CStr(fieldPosition)
strAppFieldName = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler").GetCellValue("ByIndx",strRowValue,"1")
If strAppFieldName="Scheduler" Then
strActualServerNode = Win("Win_ServicesManager").LBox("LBox_ServiceManager_GridManagement_Scheduler").GetCellValue("ByIndxByTitle",strRowValue,"Server Node")
If Instr(strActualServerNode,strServerNode)>0 Then
Call ReportEvent("Check Scheduler Status","The server node for the field " & Chr(34) & strAppFieldName & Chr(34) & " is correctly set as " & chr(34) & strActualServerNode & chr(34),"PASS")
Reporter.ReportEvent micPass,"Check Scheduler Status","The server node for the field " & Chr(34) & strAppFieldName & Chr(34) & " is correctly set as " & chr(34) & strActualServerNode & chr(34)
Else
Call ReportEvent("Check Scheduler Status","The server node for the field " & Chr(34) & strAppFieldName & Chr(34) & " is not set as " & chr(34) & strServerNode & chr(34) & " it is set as " & Chr(34) & strActualServerNode & Chr(34),"INFO")
Reporter.ReportEvent micFail,"Check Scheduler Status","The server node for the field " & Chr(34) & strAppFieldName & Chr(34) & " is not set as " & chr(34) & strServerNode & chr(34) & " it is set as " & Chr(34) & strActualServerNode & Chr(34)
End If
fieldPosition = fieldPosition+1
Else 
flagFieldFound = false
Exit For
End If
Wend
End If
Next
Next
If flagOnlineScheduler = false Then
Call ReportEvent("Check Scheduler Status","The status of none of the Scheduler is online , kindly check","FAIL")
Reporter.ReportEvent micFail,"Check Scheduler Status","The status of none of the Scheduler is online , kindly check"
End If
Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement").ClickTab("Workflow Management")
Call WaitForObject(Win("Win_ServicesManager"),5000)
Wait 20
Win("Win_ServicesManager").Terminate

End Function




'*************************************************************************************************************************************************************



'*******************************************************************************
' Function/Procedure Name	: removeGroup
' Purpose					: This function will remove the unwanted security group from the selected security groups table
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function removeGroup()

strShortNames = GetData("removeGroup","ShortName")
msgbox strShortNames
strGroupToEdit = GetData("removeGroup","RadioGroupToEdit")
msgbox strGroupToEdit
strGroupItems = GetData("removeGroup","GroupItems")
msgbox strGroupItems

Call fn_ClickOnMainMenuObject("Reference")
Call WaitForObject(SwfWindow("Win_DesktopForm"),300)

SwfWindow("Win_DesktopForm").SwfWindow("Win_Platform").SwfObject("Explorer_ReferenceFavorite").Click 59,160
'Win("Win_Reference").MBar("MBar").Select "&View~&Personnel Maintenance"
Call WaitForObject(SwfWindow("Win_PersonalQuery"),200)
wait 5

flagMultipleShortName = flase
flagMultipleItems = false
intNoOfShortNames = 0
intNoOfItems = 0
If InStr(strShortNames,",")>0 Then
arrShortNames = Split(strShortNames,",")
intNoOfShortNames = UBound(arrShortNames)
flagMultipleShortName = true
End If
If InStr(strGroupItems,",")>0 Then
arrGroupItems = Split(strGroupItems,",")
intNoOfItems = UBound(arrGroupItems)
flagMultipleItems = true
End If

For intShortNames = 0 to intNoOfShortNames
	If flagMultipleShortName = true Then
	strShortName = arrShortNames(intShortNames)
	Else
	strShortName = strShortNames
	End If
	
	SwfWindow("Win_PersonalQuery").SwfTable("Table_PersonalQuery").SetCellData "1","0;0",strShortName
	wait 5
	SwfWindow("Win_PersonalQuery").SwfObject("ToolBar_QueryManager").Click 101,13
	wait 10
	intMaxRow = Win("Win_PersonnelMaintenance").LBox("LBox_Personal&Security").GetROProperty("maxrow")
	msgbox intMaxRow
	For i = 1 to intMaxRow
		strRowValue = CStr(i)
		strAppShortName = Win("Win_PersonnelMaintenance").LBox("LBox_Personal&Security").GetCellValue("ByIndxByTitle",strRowValue,"Short Name")
		msgbox strAppShortName
		If strAppShortName = strShortName Then
		strShortNameFound = true
		Exit For
		End If
	Next
	If strShortNameFound = true Then
	Call ReportEvent("Check Opened Personal Id","Personal Id " & Chr(34) & strShortName & Chr(34) & " is correctly opened in personal maintenance window","PASS")
	Else
	Call ReportEvent("Check Opened Personal Id","Personal Id " & Chr(34) & strShortName & Chr(34) & " is not opened in personal maintenance window","FAIL")
	End If
	
	intMaxRow = Win("Win_PersonnelMaintenance").LBox("LBox_PersonalListing").GetROProperty("maxrow")
	msgbox intMaxRow
	For i = 1 to intMaxRow
		strRowValue = CStr(i)
		strAppShortName = Win("Win_PersonnelMaintenance").LBox("LBox_Personal&Security").GetCellValue("ByIndxByTitle",strRowValue,"Short Name")
		msgbox strAppShortName
		If strAppShortName = strShortName Then
		Win("Win_PersonnelMaintenance").LBox("LBox_PersonalListing").CellClick "ByIndxByTitle",strRowValue,"Short Name"
		Win("Win_PersonnelMaintenance").PBut("Button_Edit").Click 
		Call WaitForObject(Win("Win_PersonalEditor"),200)
	'	Call fn_SelectRadioGroupsToEdit(strGroupToEdit)
		Call WaitForObject(Win("Win_PersonalEditor").LBox("LBox_SelectedGroups"),100)
		
		For intItemNames = 0 to intNoOfItems
			If flagMultipleItems = true Then
			strGroupItem = arrGroupItems(intItemNames)
			Else
			strGroupItem = strGroupItems
			End If
			intMaxGroupRow = Win("Win_PersonalEditor").LBox("LBox_SelectedGroups").GetROProperty("maxrow")
			flagItemFoundBeforeRemoval = false
			For j = 1 to intMaxGroupRow
				strRowValue = CStr(j)
				strSelectedGroupCellValue = Win("Win_PersonalEditor").LBox("LBox_SelectedGroups").GetCellValue("ByIndxByTitle",strRowValue,selectedColumnNameDict.Item(strGroupToEdit))
				msgbox strSelectedGroupCellValue
				If strSelectedGroupCellValue = strGroupItem Then
				flagItemFoundBeforeRemoval = true
				Win("Win_PersonalEditor").LBox("LBox_SelectedGroups").CellClick "ByTitle",strGroupItem,selectedColumnNameDict.Item(strGroupToEdit)
				Win("Win_PersonalEditor").PBut("Button_Remove").Click
				intMaxGroupRow = Win("Win_PersonalEditor").LBox("LBox_SelectedGroups").GetROProperty("maxrow")
				flagItemFound = false
				For k = 1 to intMaxGroupRow
					strRowValue = CStr(k)
					strSelectedGroupCellValue = Win("Win_PersonalEditor").LBox("LBox_SelectedGroups").GetCellValue("ByIndxByTitle",strRowValue,selectedColumnNameDict.Item(strGroupToEdit))
					msgbox strSelectedGroupCellValue
					If strSelectedGroupCellValue = strGroupItem Then
					flagItemFound = true
					Exit For
					End If
				Next ' End o K
				If flagItemFound = false Then
				Call ReportEvent("Verify Group Item Removal","The group Item " & Chr(34) & strGroupItem & Chr(34) & " of the group " & Chr(34) & strGroupToEdit & Chr(34) & " is successfully removed from the selected groups window","PASS")
				Else
				Call ReportEvent("Verify Group Item Removal","The group Item " & Chr(34) & strGroupItem & Chr(34) & " of the group " & Chr(34) & strGroupToEdit & Chr(34) & " is not removed from the selected groups window","FAIL")
				End If
				Exit For
				End If
			Next 'End of j
			If flagItemFoundBeforeRemoval = false Then
			Call ReportEvent("Verify Group Item Removal","The group Item " & Chr(34) & strGroupItem & Chr(34) & " of the group " & Chr(34) & strGroupToEdit & Chr(34) & " is not present in the Selected groups box, so no need to remove","INFO")
			End If
		Next 'intItemNames
	Win("Win_PersonalEditor").MBar("MBar").Select "&File~&Save"
	Call handleAlerts()
	Call handleAlerts()
	wait 5
	End If
	Next ' End of i
	Win("Win_PersonnelMaintenance").Terminate
Next 'End of intShortNames
Win("Win_Reference").Terminate


End Function


'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: addGroup
' Purpose					: This function will remove the unwanted security group from the selected security groups table
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function addGroup()

strShortNames = GetData("addGroup","ShortName")
strGroupToEdit = GetData("addGroup","RadioGroupToEdit")
strGroupItems = GetData("addGroup","GroupItems")


Call fn_ClickOnMainMenuObject("Reference")
Call WaitForObject(Win("Win_Reference"),20)
Win("Win_Reference").MBar("MBar").Select "&View~&Personnel Maintenance"
Call WaitForObject(SwfWindow("Win_PersonalQuery"),10)

flagMultipleShortName = flase
flagMultipleItems = false
intNoOfShortNames = 0
intNoOfItems = 0
If InStr(strShortNames,",")>0 Then
arrShortNames = Split(strShortNames,",")
intNoOfShortNames = UBound(arrShortNames)
flagMultipleShortName = true
End If
If InStr(strGroupItems,",")>0 Then
arrGroupItems = Split(strGroupItems,",")
intNoOfItems = UBound(arrGroupItems)
flagMultipleItems = true
End If

For intShortNames = 0 to intNoOfShortNames
If flagMultipleShortName = true Then
strShortName = arrShortNames(intShortNames)
Else
strShortName = strShortNames
End If

SwfWindow("Win_PersonalQuery").SwfTable("Table_PersonalQuery").SetCellData "1","0;0",strShortName
SwfWindow("Win_PersonalQuery").SwfObject("ToolBar_QueryManager").Click 101,13
wait 2
intMaxRow = Win("Win_PersonnelMaintenance").LBox("LBox_Personal&Security").GetROProperty("maxrow")
For i = 1 to intMaxRow
strRowValue = CStr(i)
strAppShortName = Win("Win_PersonnelMaintenance").LBox("LBox_Personal&Security").GetCellValue("ByIndxByTitle",strRowValue,"Short Name")
If strAppShortName = strShortName Then
strShortNameFound = true
Exit For
End If
Next
If strShortNameFound = true Then
Call ReportEvent("Check Opened Personal Id","Personal Id " & Chr(34) & strShortName & Chr(34) & " is correctly opened in personal maintenance window","PASS")
Else
Call ReportEvent("Check Opened Personal Id","Personal Id " & Chr(34) & strShortName & Chr(34) & " is not opened in personal maintenance window","FAIL")
End If

intMaxRow = Win("Win_PersonnelMaintenance").LBox("LBox_PersonalListing").GetROProperty("maxrow")
For i = 1 to intMaxRow
strRowValue = CStr(i)
strAppShortName = Win("Win_PersonnelMaintenance").LBox("LBox_Personal&Security").GetCellValue("ByIndxByTitle",strRowValue,"Short Name")
If strAppShortName = strShortName Then
Win("Win_PersonnelMaintenance").LBox("LBox_PersonalListing").CellClick "ByIndxByTitle",strRowValue,"Short Name"
Win("Win_PersonnelMaintenance").PBut("Button_Edit").Click 
Call WaitForObject(Win("Win_PersonalEditor"),20)
Call fn_SelectRadioGroupsToEdit(strGroupToEdit)
Call WaitForObject(Win("Win_PersonalEditor").LBox("LBox_AvailableGroups"),10)

For intItemNames = 0 to intNoOfItems
If flagMultipleItems = true Then
strGroupItem = arrGroupItems(intItemNames)
Else
strGroupItem = strGroupItems
End If
intMaxGroupRow = Win("Win_PersonalEditor").LBox("LBox_AvailableGroups").GetROProperty("maxrow")
flagItemFoundBeforeRemoval = false
For j = 1 to intMaxGroupRow
strRowValue = CStr(j)
strSelectedGroupCellValue = Win("Win_PersonalEditor").LBox("LBox_AvailableGroups").GetCellValue("ByIndxByTitle",strRowValue,availableColumnNameDict.Item(strGroupToEdit))
If strSelectedGroupCellValue = strGroupItem Then
flagItemFoundBeforeRemoval = true
Win("Win_PersonalEditor").LBox("LBox_AvailableGroups").CellClick "ByTitle",strGroupItem,availableColumnNameDict.Item(strGroupToEdit)
Win("Win_PersonalEditor").PBut("Button_Add").Click
intMaxGroupRow = Win("Win_PersonalEditor").LBox("LBox_SelectedGroups").GetROProperty("maxrow")
flagItemFound = false
For k = 1 to intMaxGroupRow
strRowValue = CStr(k)
strSelectedGroupCellValue = Win("Win_PersonalEditor").LBox("LBox_SelectedGroups").GetCellValue("ByIndxByTitle",strRowValue,selectedColumnNameDict.Item(strGroupToEdit))
If strSelectedGroupCellValue = strGroupItem Then
flagItemFound = true
Exit For
End If
Next
If flagItemFound = true Then
Call ReportEvent("Verify Security Group Addition","The group item" & Chr(34) & strGroupItem & Chr(34) & " in the group " & Chr(34) & strGroupToEdit & Chr(34) & " is successfully added to the selected groups window","PASS")
Else
Call ReportEvent("Verify Security Group Addition","The group item" & Chr(34) & strGroupItem & Chr(34) & " in the group " & Chr(34) & strGroupToEdit & Chr(34) & " is not added to the selected groups window","FAIL")
End If
Exit For
End If
Next
If flagItemFoundBeforeRemoval = false Then
Call ReportEvent("Verify Group Item Removal","The group Item " & Chr(34) & strGroupItem & Chr(34) & " of the group " & Chr(34) & strGroupToEdit & Chr(34) & " is not present in the Available Security groups box , either the item name is wrong or it is already added to Selected box","INFO")
End If
Next
Win("Win_PersonalEditor").MBar("MBar").Select "&File~&Save"
Call handleAlerts()
Call handleAlerts()
wait 3
End If
Next
Win("Win_PersonnelMaintenance").Terminate
Next
Win("Win_Reference").Terminate


End Function




'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: FetchDealsToBeValidated
' Purpose					: This function will run the query given in the driver sheet and verify if it has returned any value or not
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function FetchDealsToBeValidated()

strQuery = GetData("FetchDealsToBeValidated","QueryToFetchDealsAndInsType")

Call runAdHocQuery(strQuery)
wait 5
Win("Win_AdHocQueryViewer").activate
Win("Win_AdHocQueryViewer").MTEd("Edit_AdHocQueryField").highlight
setting.webpackage("replaytype") = 2
Win("Win_AdHocQueryViewer").MTEd("Edit_AdHocQueryField").Click
'wait 1
'Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").CellClick "ByTitle","max(deal_tracking_num)","ins_type"
WShell.SendKeys("{F9}")
wait 2
setting.webpackage("replaytype") = 1
'Win("Win_AdHocQueryViewer").Activate
'WShell.SendKeys("{F9}")
wait 2
Win("Win_AdHocQueryViewer").MBar("MBar").Select "&Reporting~MS &Excel"
wait 3
Call WaitForObject(Win("Win_AdHocQueryExcelInterface").PBut("Button_OK"),20)
Win("Win_AdHocQueryExcelInterface").PBut("Button_OK").Click
wait 2
Win("Win_AdHocQueryViewer").Terminate
Call handleAlerts()

strQueryResultPath = "\QueryResults\AdHocQueryResult_" & Now

If Instr(strQueryResultPath,":") Then
strQueryResultPath = Replace(strQueryResultPath,":","_")
End If
If Instr(strQueryResultPath,"/") Then
strQueryResultPath = Replace(strQueryResultPath,"/","_")
End If
If Instr(strQueryResultPath," ") Then
strQueryResultPath = Replace(strQueryResultPath," ","__")
End If
'strQueryResultPath = Environment("strResourceRootPath") & strQueryResultPath
strQueryResultPath = Environment("strResourceRootPath") & strQueryResultPath
setting.webpackage("replaytype") = 2
WShell.AppActivate "Microsoft Excel - Book1"
WShell.AppActivate "Microsoft Excel - Book1"
WShell.SendKeys "^s"
wait 5
WShell.SendKeys(strQueryResultPath)
wait 2
WShell.SendKeys ("{TAB}")
wait 2
WShell.SendKeys ("{ENTER}")
wait 15
WShell.SendKeys ("%{F4}")
wait 1
setting.webpackage("replaytype") = 1

End Function




'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: ProcessFetchedDeals
' Purpose					: This function will open the deals got after executing the query one by one in trading manager window
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function ProcessFetchedDeals()

strDoNotProcessDeals = GetData("ProcessFetchedDeals","DealsNeedNotBeProcessed")
strStatusQuery = GetData("ProcessFetchedDeals","QueryToFetchScritturaResponse")
strDealFieldsToBeValidated = GetData("ProcessFetchedDeals","NewDealFieldsToBeValidated")
strDealFieldsValue = GetData("ProcessFetchedDeals","NewDealFieldsValue")
strXmlQuery = GetData("ProcessFetchedDeals","QueryToValidateXmlGeneration")
strDealStatusQuery = GetData("ProcessFetchedDeals","QueryToValidateEndurDealStatus")
strWindowNames = GetData("ProcessFetchedDeals","DealDetailWindowNames")
strDealsWithNoTranInfoInDetails = GetData("ProcessFetchedDeals", "DealsWithNoTranInfoInDetails")
strChildDealInsType = GetData("ProcessFetchedDeals", "ChildInsType")

If strQueryResultPath = "" Then
strQueryResultPath = Environment("strResourceRootPath") &  "\QueryResults"
strQueryResultPath = getLatestQueryResultSheet(strQueryResultPath)
Else
strQueryResultPath = strQueryResultPath & ".xlsx"
End If

Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",1,3,"NewDealNumber")
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",1,4,"NewTranNumber")
On Error Resume Next
continue = true
rowNo = 2
intDoNotProcessDeals = 0

If Instr(strDoNotProcessDeals,",")>0 Then
arrDoNotProcessDeals = Split(strDoNotProcessDeals,",")
intDoNotProcessDeals = UBound(arrDoNotProcessDeals)
End If

If strDealsWithNoTranInfoInDetails <> "" Then
If Instr(strDealsWithNoTranInfoInDetails, ",")>0 Then
arrTemp = Split(strDealsWithNoTranInfoInDetails, ",")
intDealsWithNoTranInfoInDetails = UBound(arrTemp) + 1
Else
Dim arrTemp(0)
arrTemp(0) = strDealsWithNoTranInfoInDetails
intDealsWithNoTranInfoInDetails = UBound(arrTemp) + 1
End If
Else
intDealsWithNoTranInfoInDetails = 0
End If

If intDealsWithNoTranInfoInDetails > 0 Then
ReDim Preserve arrDealsWithNoTranInfoInDetails(intDealsWithNoTranInfoInDetails-1)
For i = 0 to UBound(arrTemp)
arrDealsWithNoTranInfoInDetails(i) = arrTemp(i)
Next
End If

Call fn_ClickOnMainMenuObject("Trading Manager")
Call WaitForObject(Win("Win_TradingManager"),20)

While continue = true
flagDoNotProcessDeal = false
flagItemFound = false
flagCompDeal = false
strNewDealTrackingNo = ""
strNewTranTrackingNo = ""
strInsType = readDataFromExcel(strQueryResultPath,"Sheet1",rowNo,2)
strDealTrackingNo = readDataFromExcel(strQueryResultPath,"Sheet1",rowNo,1)
strStartingInsType = strInsType
If strInsType <> "" Then
For i = 0 to intDoNotProcessDeals
If strInsType =  arrDoNotProcessDeals(i) Then
flagDoNotProcessDeal = true
Exit For
End If
Next
If flagDoNotProcessDeal=false Then
strFieldNames = ""
strFieldValues = ""
strFieldNames = getDealData("CDBO_DealDataSheet","FieldNames",strInsType,strDealTrackingNo)
strFieldValues = getDealData("CDBO_DealDataSheet","FieldValues",strInsType,strDealTrackingNo)
If strFieldNames <> "" Then
If Not Win("Win_TradingManager").Exist(3) Then
Call fn_ClickOnMainMenuObject("Trading Manager")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

Call executeCloseDeal(strDealTrackingNo)

strSpecifiedDealStatus = ""
If UCase(strInsType)<>"EO-CLIQUET" AND UCase(strInsType)<>"EO-P-DIG" AND UCase(strInsType)<>"EO-C-DIG" Then
If UCase(strInsType)="COM" Then
Call ReportEvent("Processing Deal","The Instrument type is of  " & Chr(34) & strInsType & Chr(34) & " type , so now it's child deals will be processed and then the composer deal will be processed ","INFO")
'							strChildDealNo = ""
'							If UBound(arrChildDealInsType) >= i Then
'								strChildInsType = MultilineTrim(arrChildDealInsType(i))
'							Else
'								strChildInsType = ""
'							End If
'							If UBound(arrNoOfChildDeals) >= i Then
'								strChildDealsCount = MultilineTrim(arrNoOfChildDeals(i))
'							Else
'								strChildDealsCount = ""
'							End If
'							
'							If strChildInsType <> "" Then
'								strQuery = arrQuerySplit(0) & "NAME='" & strChildInsType & "'" & arrQuerySplit(1)
'								Call runAdHocQuery(strQuery)
'								If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").Exist(1) Then
'									If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow") > 1 Then
'										strChildDealNo = GetMaxDealNum()
'										Win("Win_AdHocQueryViewer").Terminate
'										Call  handleAlerts()
'									Else
'										Call ReportEvent("Fetch the MAX(deal_num)", "There are no deals for INS_TYPE " & strChildInsType & ". Hence cannot continue to process this INS_TYPE", "FAIL")
'									End If
'								Else
'									Call ReportEvent("Process User Listed Deals", "Query window which was supposed to contain MAX(deal_num) of INS_TYPE " & strChildInsType & " in not open. So cannot further process the deal", "FAIL")
'								End If
'							End If
Call CreateComposerDeal(strWindowNames,strFieldNames,strFieldValues, strChildDealInsType)
Else							
Call ReportEvent("Processing Deal","Now the deal of instrument type " & Chr(34) & strInsType & Chr(34) & " will be processed","INFO")
If intDealsWithNoTranInfoInDetails > 0 Then
Call SetTranInfoFlag(strInsType)
If flagFillTranInfoFromTradingManager Then
Call createDealInNewStatusAndFillTranInfo(strWindowNames,strFieldNames,strFieldValues)
End If
Else
flagFillTranInfoFromTradingManager = false
End If

If flagFillTranInfoFromTradingManager = false Then
flagItemFound = openDealDetailPage(strDealTrackingNo)
Call setWindowTypeAndClearInstrument(strWindowNames)
Else
flagItemFound = openDealDetailPage(strNewDealTrackingNo)
End If
If flagItemFound=true Then
flagFillTranInfoFromTradingManager = false
Call EnterDealDetails(strFieldNames,strFieldValues)
Else
Call ReportEvent("Open Deal Manager Window","The deal no " & Chr(34) & strDealTrackingNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34) & " is not found in the Trading Manager Browser","FAIL")
End If

End If
strSpecifiedDealStatus = ""

If  strNewDealTrackingNo <> ""  And  strNewDealTrackingNo <> "0" And  Instr(strExpectedDealStatus, strDealStatus) > 0 Then
Call ReportEvent("Creating New Deal","Successfully processed the deal " & Chr(34) & strDealTrackingNo & Chr(34) & " of INS_TYPE " & Chr(34) & strInsType & Chr(34) & "to the " & Chr(34) & strExpectedDealStatus & Chr(34) & " status. New Deal Tracking No is " & Chr(34) & strNewDealTrackingNo & Chr(34),"PASS")
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",rowNo,3,strNewDealTrackingNo)
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",rowNo,4,strNewTranTrackingNo)
Call executeCloseDeal(strNewDealTrackingNo)
Call verifyXmlGeneration(strQueryResultPath,strXmlQuery,strNewDealTrackingNo,rowNo,5)
'Call verifyDealStatusInEndur(strDealStatusQuery,strNewTranTrackingNo)
Else
Call ReportEvent("Creating New Deal","Unable to create new deal in " & Chr(34) & strDealStatus & Chr(34) & " status for deal no " & Chr(34) & strDealTrackingNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34) & " due to above error ","FAIL")
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",rowNo,3,"ERROR")
End If
End If

Else
Call ReportEvent("Getting data for the Deal","The deal no " & Chr(34) & strDealTrackingNo &  Chr(34) & " for ins type " & Chr(34) & strInsType &  Chr(34) & " is not executed as the row execution in the Data sheet is made false, Kindly check","INFO") 
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",rowNo,3,"SKIPPED")
End If
Else
Call ReportEvent("Open Deal Manager Window","The deal no " & Chr(34) & strDealTrackingNo & Chr(34) & " is of instrument type " & Chr(34) & strInsType & Chr(34) & " which is listed in the Deals Need Not Be Processed Column in Driver Sheet, so it is skipped","INFO")
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",rowNo,3,"SKIPPED")
End If
rowNo = rowNo+1
Else
continue = false
End If

Wend

Call validateTranInfo(strQueryResultPath,strStatusQuery,strDealFieldsToBeValidated,strDealFieldsValue,9)

If Win("Win_TradingManager").Exist Then
Win("Win_TradingManager").Close
End If 

Call insertColumnTypeInQueryResult(strQueryResultPath)

End Function





'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: enterDealDetails
' Purpose					: This function will enter the details of the deals
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function EnterDealDetails(strFieldNames,strFieldValues)


Call WaitForObject(Win("Win_TradeDealDetails"),20)
Win("Win_TradeDealDetails").Activate
flagMultipleFieldNames = false
intNoOfFieldNames = 0
intNoOfFieldValues = 0

If InStr(strFieldNames,",")>0 Then
arrFieldNamesTemp = Split(strFieldNames,",")
intNoOfFieldNames = UBound(arrFieldNamesTemp)
flagMultipleFieldNames = true
End If
If InStr(strFieldValues,",")>0 Then
arrFieldValuesTemp = Split(strFieldValues,",")
intNoOfFieldValues = UBound(arrFieldValuesTemp)
End If

If intNoOfFieldNames<>intNoOfFieldValues Then
Call ReportEvent("Field Names and Field Values","No of field names and no of field values are not matching, kindly check","INFO")
If intNoOfFieldNames>intNoOfFieldValues Then
For j = 1 to intNoOfFieldNames-intNoOfFieldValues
arrFieldValuesTemp(intNoOfFieldValues+j) = ""
Next
End If
End If

For j = 0 to intNoOfFieldNames
If flagMultipleFieldNames = true Then
strFieldName = MultilineTrim(arrFieldNamesTemp(j))
strFieldValue = MultilineTrim(arrFieldValuesTemp(j))
Else
strFieldName = strFieldNames
strFieldValue = strFieldValues
End If

If strFieldName = "Action" Then
strExpectedDealStatus = strFieldValue
If strStartingInsType = "COM" OR flagFillTranInfoFromTradingManager = True Then
Call processDeal("to New")
Exit For
ElseIf strSpecifiedDealStatus <> "" Then
If strSpecifiedDealStatus = "To One Step Amend" OR strSpecifiedDealStatus = "To One Step Cancel" Then
Call fetchNewDealTranNo()

If Trim(LCase(strDealStatus)) <> "validated" Then
processDeal("to Validated")
strDealTrackingNo = strNewDealTrackingNo

If Win("Win_TradeDealDetails").Exist(1) Then
Win("Win_TradeDealDetails").Terminate
End If
iWaitCounter = 1
While iWaitCounter < 6
Wait 10
iWaitCounter = iWaitCounter+1
Wend

Call executeCloseDeal(strNewDealTrackingNo)
Wait 1
'capturing external deal ref to compare it with future value after changing the stats to "Amended"/"Cancelled"
dictExternalDealRef.Add CStr(strNewTranTrackingNo), ""
dictExternalDealRef.Item(CStr(strNewTranTrackingNo)) = fn_GetExternalDealRef(strNewTranTrackingNo)
flagItemFound = False
flagItemFound = openDealDetailPage(strNewDealTrackingNo)
End If
End If
strFieldValue = strSpecifiedDealStatus

End If	

Call processDeal(strFieldValue)


'				If flagCompDeal = false then
'					Call processDealBasedOnAction(strFieldValue,strFieldNames,strFieldValues,strNewDealTrackingNo)
'				End If				
Else
Call fn_FillInTradeEditField(strFieldName,strFieldValue)
End If
Next

'		Call fn_FillInTradeEditField_Alternate()

Call fetchNewDealTranNo()

If Win("Win_TradeDealDetails").Exist(5) Then
Win("Win_TradeDealDetails").Terminate
Call handleAlerts()
Call handleAlerts()
End If
If Win("Win_TradeDealDetails").Exist(1) Then
Win("Win_TradeDealDetails").Terminate
Call handleAlerts()
Call handleAlerts()
End If

End Function




'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: verifyNewlyValidatedDealTranInfo
' Purpose					: This function will validate the status of the Deal
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function verifyNewlyValidatedDealTranInfo(strQueryResultPath,strStatusQuery,strNewTranTrackingNo,strDealFieldsToBeValidated,strDealFieldsValue,intRowNo,startingColumnNo)

arrStatusQuery = Split(strStatusQuery, "tran_num= ")
strTempStatusQuery = arrStatusQuery(0) & "tran_num= " & strNewTranTrackingNo & arrStatusQuery(1)

intNoOfDealFields = 0
intNoOfDealFieldsValue = 0
If Instr(strDealFieldsToBeValidated,",")>0 Then
arrFieldNames = Split(strDealFieldsToBeValidated,",")
intNoOfDealFields = UBound(arrFieldNames)
End If
If Instr(strDealFieldsValue,",")>0 Then
arrFieldsValue = Split(strDealFieldsValue,",")
intNoOfDealFieldsValue = UBound(arrFieldsValue)
End If
If intNoOfDealFields <> intNoOfDealFieldsValue Then
Call ReportEvent("Field Names and Field Values","No of field names and no of field values are not matching, kindly check","INFO")
End If
If  Instr(Environment("currentKeyWord"),"ProcessDealsByWac43Task") > 0  And  flagNewDeal=false Then
intTempRowNumber = 2
Else
intTempRowNumber = 1
End If

Call runAdHocQuery(strTempStatusQuery)

flagCorrectResponse = true

For i = 0 to intNoOfDealFields

If intNoOfDealFields > 0 Then
strFieldName = MultilineTrim(arrFieldNames(i))
strFieldValue = MultilineTrim(arrFieldsValue(i))
Else
strFieldName = strDealFieldsToBeValidated
strFieldValue = strDealFieldsValue
End If
flagFieldFound = false
If strFieldName<>"" Then

Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",intTempRowNumber,i+startingColumnNo,strFieldName)

If LCase(strFieldName) = "dsom tradeflag" Then
oSheet.cells(firstBlankRow,2).Font.Bold=True
End If

intMaxQueryRow = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")
For j = 0 to intMaxQueryRow
strRowNo = Cstr(j)
strAppFieldName = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"type_name")
If strAppFieldName=strFieldName Or Instr(strAppFieldName,strFieldName)>0 Then
flagContinue = True
If dictDealsStatus.Exists(CStr(strNewTranTrackingNo)) Then
If dictDealsStatus.Item(CStr(strNewTranTrackingNo)) = "to New" Then
Call ReportEvent("Verifying Field Existance","The field " & Chr(34) & strFieldName &  Chr(34) & " is present in the queried table which should NOT be present for the Tran No. " & Chr(34) & strNewTranTrackingNo & Chr(34) & ", since it is booked in " & Chr(34) & "New" & Chr(34) & " status" ,"FAIL") 
flagContinue = False
End If
End If

If flagContinue Then

flagFieldFound = true
strAppFieldValue = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"value")
If LCase(strFieldValue) = "capture" Then
If LCase(strAppFieldName) = "external_deal_ref" AND dictDealsStatus.Exists(CStr(strNewTranTrackingNo)) Then
If dictDealsStatus.Item(CStr(strNewTranTrackingNo)) = "To One Step Amend" Then
'dictExternalDealRef.Item(CStr(strNewDealTrackingNo)) will contain value for external_deal_ref for deal in "Validated" status. strAppFieldValue will give for "Amended" status
If CDbl(dictExternalDealRef.Item(CStr(strNewDealTrackingNo))) <> CDbl(strAppFieldValue) Then
Call ReportEvent("Compare external_deal_ref","The value for the field " & Chr(34) & strFieldName &  Chr(34) & " in the table is displayed as " & Chr(34) & strAppFieldValue & Chr(34) & " which has changed as expected, after the status was changed from " & Chr(34) & "Validated" & Chr(34) & " to " & Chr(34) & "Amended" & Chr(34),"INFO") 
Else
Call ReportEvent("Compare external_deal_ref","The value for the field " & Chr(34) & strFieldName &  Chr(34) & " in the table is displayed as " & Chr(34) & strAppFieldValue & Chr(34) & " which has NOT changed as expected, after the status was changed from " & Chr(34) & "Validated" & Chr(34) & " to " & Chr(34) & "Amended" & Chr(34),"INFO") 
End If
End If
Else
Call ReportEvent("Verifying Field Values","The value for the field " & Chr(34) & strFieldName &  Chr(34) & " in the table is displayed as " & Chr(34) & strAppFieldValue & Chr(34),"INFO") 
End If
Else
If strFieldValue = strAppFieldValue Or Instr(strAppFieldValue,strFieldValue)>0 Or Instr(strAppFieldValue,"NA")>0 Then

Call ReportEvent("Verifying Field Values","The value for the field " & Chr(34) & strFieldName &  Chr(34) & " in the table is correctly displayed as " & Chr(34) & strAppFieldValue & Chr(34),"PASS") 
Else
Call ReportEvent("Verifying Field Values","The value for the field " & Chr(34) & strFieldName &  Chr(34) & " in the table is not " & Chr(34) & strFieldValue & Chr(34) & " ,it is " & Chr(34) & strAppFieldValue &  Chr(34),"INFO") 
flagCorrectResponse = false
End If
End If
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNo,i+startingColumnNo,strAppFieldValue)
End If
Exit For
End If
Next
If flagFieldFound = false Then

If dictDealsStatus.Exists(CStr(strNewTranTrackingNo)) Then
If dictDealsStatus.Item(CStr(strNewTranTrackingNo)) = "to New" Then
Call ReportEvent("Verifying Field Existance","The field " & Chr(34) & strFieldName &  Chr(34) & " is not present in the queried table which is as expected for the Tran No. " & Chr(34) & strNewTranTrackingNo & Chr(34) & ", since it is booked in " & Chr(34) & "New" & Chr(34) & " status" ,"PASS") 
Else
Call ReportEvent("Verifying Field Existance","The field " & Chr(34) & strFieldName &  Chr(34) & " is not present in the queried table for the Tran No. " & Chr(34) & strNewTranTrackingNo & Chr(34),"INFO") 
End If
Else
Call ReportEvent("Verifying Field Existance","The field " & Chr(34) & strFieldName &  Chr(34) & " is not present in the queried table","INFO")
End If

End If
End If
Next
Win("Win_AdHocQueryViewer").Close
Call handleAlerts()
If Win("Win_AdHocQueryViewer").Exist(1) Then
Win("Win_AdHocQueryViewer").Terminate
Call handleAlerts()
End If


End Function



'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: verifyXmlGeneration
' Purpose					: This function will validate xml generation
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function verifyXmlGeneration(strQueryResultPath,strXmlQuery,strNewDealTrackingNo,intRowNo,startingColumnNo)

arrQuerySplit = Split(strXmlQuery, "deal_num=")
strTempXmlQuery = arrQuerySplit(0) & "deal_num=" & strNewDealTrackingNo & arrQuerySplit(1)
Call runAdHocQuery(strTempXmlQuery)       

Dim strAppTimeStamp,strAppExportId,strAppConnexId,strAppXmlName
flagDealFoundInXmlQuery = false
If  Instr(Environment("currentKeyWord"),"ProcessDealsByWac43Task") > 0  And  flagNewDeal=false Then
intTempRowNumber = 2
Else
intTempRowNumber = 1
End If
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",intTempRowNumber,startingColumnNo,"Time_Stamp")
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",intTempRowNumber,startingColumnNo+1,"Export_Id")
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",intTempRowNumber,startingColumnNo+2,"Connex_Id")
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",intTempRowNumber,startingColumnNo+3,"Xml_Generation")
Win("Win_AdHocQueryViewer").Activate			
intMaxQueryRow = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")

If strSpecifiedDealStatus <> "" Then
strExpectedOppsEvent = strSpecifiedDealStatus
Else
strExpectedOppsEvent = "Validate_Mo_Yes"
End If

For j = 0 to intMaxQueryRow
strRowNo = Cstr(j)
strAppDealNo = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"deal_num")
strAppTranNo = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"tran_num")

If (strAppDealNo=strNewDealTrackingNo Or Instr(strAppDealNo,strNewDealTrackingNo)>0) AND (strAppTranNo=strNewTranTrackingNo Or Instr(strAppTranNo,strNewTranTrackingNo)>0) Then

strAppOpsEvent = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"ops_event")

If Instr(LCase(strExpectedOppsEvent), LCase(strAppOpsEvent))>0 Then
flagDealFoundInXmlQuery =  true
Call ReportEvent("Verifying Xml generation","ops_event column value is as expected, which is " & Chr(34) & strAppOpsEvent & Chr(34) &  " for new deal " & Chr(34) & strNewDealTrackingNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34),"PASS") 

strAppXmlValue = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"xml")
If strAppXmlValue <> "" Then
Call ReportEvent("Verifying Xml generation","The XML is successfully generated  for the new deal no. " & Chr(34) & strNewDealTrackingNo & Chr(34) &  " of instrument  type " & Chr(34) & strInsType & Chr(34) & " , the value in the Xml field is " & Chr(34) & strAppXmlValue & Chr(34),"PASS") 
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNo,startingColumnNo+3,"XML Successfully Generated")
Else
Call ReportEvent("Verifying Xml generation","The XML is not generated successfully for the new deal no. " & Chr(34) & strNewDealTrackingNo & Chr(34) &  " of instrument  type " & Chr(34) & strInsType & Chr(34),"FAIL") 
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNo,startingColumnNo+3,"XML Not Generated")
Call readLogForXmlError(strInsType,strNewDealTrackingNo)
End If

strAppTimeStamp = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"time_stamp")  
strAppExportId = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"export_id") 
strAppConnexId = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowNo,"connex_id")
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNo,startingColumnNo,strAppTimeStamp)
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNo,startingColumnNo+1,strAppExportId)
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNo,startingColumnNo+2,strAppConnexId)			                
Exit For				

End If
End If
Next

If flagDealFoundInXmlQuery=false Then
Call ReportEvent("Verifying Xml generation","The deal  " & Chr(34) & strNewDealTrackingNo & Chr(34) & " of instrument  type " & Chr(34) & strInsType & Chr(34) & " is not found in the Adhoc query table ","FAIL") 
End If
Win("Win_AdHocQueryViewer").Close
Call handleAlerts()
If Win("Win_AdHocQueryViewer").Exist(1) Then
Win("Win_AdHocQueryViewer").Terminate
Call handleAlerts()
End If

End Function



'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: verifyDealStatusInEndur
' Purpose					: This function will validate the status of the Deal
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function verifyDealStatusInEndur(strDealStatusQuery,strNewTranTrackingNo)

arrQuerySplit = Split(strDealStatusQuery, "tran_num=")
strTempDealStatusQuery = arrQuerySplit(0) & "tran_num=" & strNewTranTrackingNo & arrQuerySplit(1)
Call runAdHocQuery(strTempDealStatusQuery)

strProcessedStatus = strSpecifiedDealStatus
If strProcessedStatus = "" Then
strProcessedStatus = "to Validated"
End If

strExpectedExportStatus = dictDealExportStatus.Item(strProcessedStatus)

intMaxQueryRow = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")
flagStatusMatched = False
For j = 2 to intMaxQueryRow
strRowIndex = Cstr(j)
strAppTranNo = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowIndex,"tran_num")
If strAppTranNo=strNewTranTrackingNo Or Instr(strAppTranNo,strNewTranTrackingNo)>0   Then
strAppExportStatus = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",strRowIndex,"export_status")

If Instr(LCase(strAppExportStatus),LCase(strExpectedExportStatus))>0 Then
If j = 2 Then
Call ReportEvent("Verifying deal status in Endur","The  new Endur deal status for the field " & Chr(34) & "export_status" & Chr(34) & " is correctly displayed as " & Chr(34) & strAppExportStatus & Chr(34) & " for the latest status_id","PASS")
Else
Call ReportEvent("Verifying deal status in Endur","The  new Endur deal status for the field " & Chr(34) & "export_status" & Chr(34) & " is correctly displayed as " & Chr(34) & strAppExportStatus & Chr(34) & ". However, not for the latest status_id","PASS")
End If
flagStatusMatched = True
Exit For
End If
End If
Next

If NOT flagStatusMatched Then
Call ReportEvent("Verifying deal status in Endur","The new Endur deal status for the field " & Chr(34) & "export_status" & Chr(34) & " is not " & Chr(34) & strExpectedExportStatus & Chr(34) & ", it is showing as " & Chr(34) & strAppExportStatus & Chr(34),"INFO") 
End If

Win("Win_AdHocQueryViewer").Close
Call handleAlerts()
If Win("Win_AdHocQueryViewer").Exist(1) Then
Win("Win_AdHocQueryViewer").Terminate
Call handleAlerts()
End If

End Function





'****************************************************************************************************************************************************************************************


'*******************************************************************************
' Function/Procedure Name	: LoginToWow
' Purpose										: This function will launch and login to Wow factory
' Author										: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function LogInToWow()

strUrl = GetData("LogInToWow","AppUrl")
strUserName = GetData("LogInToWow","WOW_UserName")
strPassword = GetData("LogInToWow","WOW_Password")

intWaitCount = 0
While intWaitCount <= 6
Wait 10
intWaitCount = intWaitCount + 1
Wend

SystemUtil.Run(strUrl)
Browser("Browser_WowMainWindow").Sync

If Browser("Browser_WowMainWindow").Page("Page_WowPage").Exist Then
Browser("Browser_WowMainWindow").Page("Page_WowPage").WebEdit("WebEdit_UserName").Set strUserName
'password provided from data sheet should be encrypted one
Browser("Browser_WowMainWindow").Page("Page_WowPage").WebEdit("WebEdit_Password").SetSecure strPassword
Browser("Browser_WowMainWindow").Page("Page_WowPage").WebButton("WebButton_Login").Click
Browser("Browser_WowMainWindow").Page("Page_WowPage").Sync

If Browser("Browser_WowMainWindow").Page("Page_WowPage").WebElement("WebElement_LoginVerification").Exist(3) Then
Call ReportEvent("LoginToWow", "Login to WoW is successful", "PASS")
Else
Call ReportEvent("LoginToWow", "Login not successful. Please check the URL, UserName and Password", "FAIL")
Environment("AbortTestcase") = True
End If
End If

End Function



'*************************************************************************************************************************************************************************************************************************

'**************************************************************************************************************************************

' Function/Procedure Name	: VerifyDealDeliveryStatusInWOW
' Purpose					: This function enters Audit Message fields for each deal and goes through each Audit file and check for "Message Delivered" status
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'**************************************************************************************************************************************
Function VerifyDealDeliveryStatusInWOW()

strViewType = Trim(GetData("VerifyDealDeliveryStatusInWOW", "Audit_ViewType"))
strName = Trim(GetData("VerifyDealDeliveryStatusInWOW", "Audit_Name"))
strTimeFrame = Trim(GetData("VerifyDealDeliveryStatusInWOW", "Audit_TimeFrame_InMins"))

If Instr(Environment("currentTestCase"),"ProcessDeals_UserListed")>0 Then
strQueryResultPath = strListedInsTypeResultPath
End If
If strQueryResultPath="" Then
strQueryResultPath = Environment("strResourceRootPath") &  "\QueryResults"
strQueryResultPath = getLatestQueryResultSheet(strQueryResultPath)
End If

strXMLFilesPath = Environment("strResourceRootPath") & "\XMLFilesFromWoW\ExecutedAt_" & Replace(Replace(Replace(Now, "/", "_"), ":", "_"), " ", "__")
Call fn_CreateFoldersInThisPath(strXMLFilesPath)

If Instr(strViewType, ",")>0 Then
arrViewTypes = Split(strViewType, ",")
Else
Dim arrViewTypes(0)
arrViewTypes(0) = strViewType
End If

If Instr(strName, ",")>0 Then
arrAuditNames = Split(strName, ",")
Else
Dim arrAuditNames(0)
arrAuditNames(0) = strName
End If

If UBound(arrViewTypes) = UBound(arrAuditNames) Then

intAuditNamesCount = UBound(arrAuditNames)+1

If Browser("Browser_WowMainWindow").Page("Page_WowPage").Link("Link_AuditMessages").Exist Then
Call SetObjDescriptions
intRowNum = 3
strInsType =Trim(readDataFromExcel(strQueryResultPath, "Sheet1", intRowNum,2))

Do While strInsType <> ""
strDealNo =Trim(readDataFromExcel(strQueryResultPath, "Sheet1", intRowNum,3))
If strDealNo <> "SKIPPED" AND strDealNo <> "ERROR" Then
strDealTimestamp = readDataFromExcel(strQueryResultPath, "Sheet1", intRowNum,5)
If strDealTimestamp<>"" Then
intColNum = 13
For i = 0 to UBound(arrAuditNames)
If arrAuditNames(i) <> "" AND arrViewTypes(i) <> "" Then
strTempMessageHeader = strWowMessageHeader & arrAuditNames(i)
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",2,intColNum,strTempMessageHeader)
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",2,intColNum+1,strWowTimeHeader)

Call SetAuditMessageFields(arrViewTypes(i), arrAuditNames(i), strTimeFrame, strDealNo, strDealTimestamp)

strInsTypeFolderPath = strXMLFilesPath & "\" & strInsType
Call fn_CreateFoldersInThisPath(strInsTypeFolderPath)
returnMsg = CheckForDeliveryMsg(strDealNo, intRowNum, intColNum, strInsTypeFolderPath, arrAuditNames(i), strInsType)
If returnMsg <> "FAIL" Then
Call ReportEvent("Verify Deal Delivery Status In WOW", "Message for Audit Name " & Chr(34) & arrAuditNames(i) & Chr(34) & " for Deal " & Chr(34) & strDealNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34)& " : " & returnMsg, "INFO")
End If
intColNum = intColNum + 2
Else
Call ReportEvent("Fetch Audit Message settings data", Chr(34) & "View_Type" & Chr(34) & " and/or " & Chr(34) & "Audit_Name" & Chr(34) & " empty. View_Type = " & arrViewTypes(i) & ", Audit_Name = " & arrAuditNames(i), "FAIL")
End If
Next
Else
Call ReportEvent("Fetching time stamp","The time stamp for the deal " & Chr(34) & strDealNo & Chr(34) & "of instrument type " & Chr(34) & strInsType & Chr(34) & " is not there in the Query result sheet","FAIL")
End If
End If
intRowNum = intRowNum + 1
strInsType = readDataFromExcel(strQueryResultPath, "Sheet1", intRowNum,2)
Loop

Call ReportEvent("Download XML files from WoW","XML Files for all the verified Deals are downloaded & saved (if there were any) at the location - " & strXMLFilesPath,"INFO")
Else
Call ReportEvent("Verify Deal Delivery Status In WOW", chr(34) & "Audit Messages" & chr(34) & " link not found", "FAIL")
End If
Else
Call ReportEvent("Fetch Audit Message settings data", "Please provide " & Chr(34) & "View_Type" & Chr(34) & " for all the values in " & Chr(34) & "Audit_Name" & Chr(34) & " column", "FAIL")
End If

Set odescFileNameList = Nothing
Set odescTimeList = Nothing
Set odescMsg = Nothing
flagUserListedInsTypes = False

Browser("Browser_WowMainWindow").Close
Call insertWOWColumnTypeInQueryResult(strQueryResultPath,12,intAuditNamesCount*2)
'	Call updateOverAllDealStatus(strQueryResultPath)

End Function



'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: ReProcessDealsByWac43Task
' Purpose										: This function will load the failed deals in query manager window and run the task "WAC43 Adhoc Send EMS"
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function ProcessDealsByWac43Task()

strTaskToRun = GetData("ProcessDealsByWac43Task","TaskName")
strDealsToProcess = GetData("ProcessDealsByWac43Task","DealsToProcess")	
strStatusQuery = GetData("ProcessDealsByWac43Task","QueryToFetchScritturaResponse")
strDealFieldsToBeValidated = GetData("ProcessDealsByWac43Task","NewDealFieldsToBeValidated")
strDealFieldsValue = GetData("ProcessDealsByWac43Task","NewDealFieldsValue")
strXmlQuery = GetData("ProcessDealsByWac43Task","QueryToValidateXmlGeneration")
strDealStatusQuery = GetData("ProcessDealsByWac43Task","QueryToValidateEndurDealStatus")
strTaskInputMethod = GetData("ProcessDealsByWac43Task","TaskInputMethod")
strEventTypeFields = GetData("ProcessDealsByWac43Task","EventTypeField")
strEventTypeValues = GetData("ProcessDealsByWac43Task","EventTypeValue")

If Not Win("Win_TradingManager").Exist(3) Then
Call fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

If strDealsToProcess <> "" Then
Call executeCloseDeal(strDealsToProcess)
End If

Call loadAndRunWac43Tasks(strTaskToRun,strTaskInputMethod,strEventTypeFields,strEventTypeValues)
If flagErrorLoadingTask = false Then
Call validateDealsAfterWac43Execution(strDealsToProcess,strStatusQuery,strDealFieldsToBeValidated,strDealFieldsValue,strXmlQuery,strDealStatusQuery)
End If
If  Win("Win_TradingManager").Exist Then
Win("Win_TradingManager").Close
End If

End Function





'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: validateDealsAfterWac43Execution
' Purpose										: This function will  validate the deals after running the task "WAC43 Adhoc Send EMS"
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function validateDealsAfterWac43Execution(strDealsToProcess,strStatusQuery,strDealFieldsToBeValidated,strDealFieldsValue,strXmlQuery,strDealStatusQuery)

If strQueryResultPath = "" Then
strQueryResultPath = Environment("strResourceRootPath") &  "\QueryResults"
strQueryResultPath = getLatestQueryResultSheet(strQueryResultPath)
End If

intNoOfDealsToProcess = 0
If Instr(strDealsToProcess,",")>0 Then
arrDeals = Split(strDealsToProcess,",")
intNoOfDealsToProcess = UBound(arrDeals)
End If

If Not Win("Win_TradingManager").Exist(3) Then
Call fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

Call verifyAndCreateNewResultSheetWac43(strQueryResultPath,strDealsToProcess)

If flagWac43ResultSheetCreated = true Then
intTempEndurColumnNo = 2
intTempTranColumnNo = 6
Else
intTempEndurColumnNo = 24
intTempTranColumnNo = 28
End If

For i = 0 to intNoOfDealsToProcess

If intNoOfDealsToProcess > 0 Then
strDealToProcess = MultilineTrim(arrDeals(i))
Else
strDealToProcess = strDealsToProcess
End If

If strDealToProcess<>""  Then

intDealRowInQueryResultSheet = findDealRowInQueryResultSheet(strQueryResultPath,strDealToProcess)
Call executeCloseDeal(strDealToProcess)
Call verifyXmlGeneration(strQueryResultPath,strXmlQuery,strDealToProcess,intDealRowInQueryResultSheet,intTempEndurColumnNo)
Call verifyDealStatusInEndur(strDealStatusQuery,strDealToProcess)

End If		

Next

Call validateTranInfoWac43(strQueryResultPath,strStatusQuery,strDealsToProcess,strDealFieldsToBeValidated,strDealFieldsValue,intTempTranColumnNo)
Call insertWAC43ColumnTypeInQueryResult(strQueryResultPath,intTempEndurColumnNo,intTempTranColumnNo)

End Function




'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: validateTranInfo
' Purpose										: This function is created to validate the tran info for all the deals once they are already booked
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function validateTranInfo(strQueryResultPath,strStatusQuery,strDealFieldsToBeValidated,strDealFieldsValue,intColNo)

If Instr(Environment("currentTestCase"), "ProcessDeals_UserListed")>0 Then
strQueryResultPath = strListedInsTypeResultPath
End If
If strQueryResultPath = "" Then
strQueryResultPath = Environment("strResourceRootPath") &  "\QueryResults"
strQueryResultPath = getLatestQueryResultSheet(strQueryResultPath)
End If

tranInfoRowNo = 2
tranInfoContinue = true

While tranInfoContinue = true
strNewDealTrackingNo = ""
strNewTranTrackingNo = ""
strInsType = readDataFromExcel(strQueryResultPath,"Sheet1",tranInfoRowNo,2)
strNewDealTrackingNo = readDataFromExcel(strQueryResultPath,"Sheet1",tranInfoRowNo,3)
If strInsType<>""  Then
If strNewDealTrackingNo <> "SKIPPED"  And  strNewDealTrackingNo <> "ERROR"  Then
strNewTranTrackingNo = readDataFromExcel(strQueryResultPath,"Sheet1",tranInfoRowNo,4)
strInsType = readDataFromExcel(strQueryResultPath,"Sheet1",tranInfoRowNo,2)

oSheet.Range("A" & firstBlankRow & ":B" & firstBlankRow).Font.Bold=True
Call ReportEvent("Validate Tran Info","Instrument Type " & Chr(34) & strInsType & Chr(34) & " : Deal No. " & strNewDealTrackingNo,"INFO")
Call verifyNewlyValidatedDealTranInfo(strQueryResultPath,strStatusQuery,strNewTranTrackingNo,strDealFieldsToBeValidated,strDealFieldsValue,tranInfoRowNo,intColNo)
End If
tranInfoRowNo = tranInfoRowNo+1
Else
tranInfoContinue = false
End If
Wend

End Function





'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: validateTranInfoWac43
' Purpose										: This function is created to validate the tran info for all the deals once they are  executed  by wac 43 task
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function validateTranInfoWac43(strQueryResultPath,strStatusQuery,strDealsToProcess,strDealFieldsToBeValidated,strDealFieldsValue,intTranInfoColNo)

intNoOfDealsToProcess = 0
If Instr(strDealsToProcess,",")>0 Then
arrDeals = Split(strDealsToProcess,",")
intNoOfDealsToProcess = UBound(arrDeals)
End If

If Not Win("Win_TradingManager").Exist(3) Then
Call fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

For i = 0 to intNoOfDealsToProcess

If intNoOfDealsToProcess > 0 Then
strDealToProcess = MultilineTrim(arrDeals(i))
Else
strDealToProcess = strDealsToProcess
End If

If strDealToProcess <> "" Then

intDealRowInQueryResultSheet = findDealRowInQueryResultSheet(strQueryResultPath,strDealToProcess)
Call verifyNewlyValidatedDealTranInfo(strQueryResultPath,strStatusQuery,strDealToProcess,strDealFieldsToBeValidated,strDealFieldsValue,intDealRowInQueryResultSheet,intTranInfoColNo)

End If

Next

End Function




'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: SendVerificationMail
' Purpose										: This function will send a mail to the particular groups with the latest query result sheet attached with it
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function SendVerificationMail()

strCdboMailTo = GetData("SendVerificationMail","MailTo")
strCdboMailSubject = GetData("SendVerificationMail","MailSubject")	
strCdboMailBody = GetData("SendVerificationMail","MailBody")

strCdboMailBody = "Hi," & vbNewLine & vbNewLine & strCdboMailBody & vbNewLine & vbNewLine

If Instr(Environment("currentTestCase"),"ProcessDeals_UserListed") > 0 Then
strQueryResultPath = strListedInsTypeResultPath
End If
If strQueryResultPath = "" Then
strQueryResultPath = Environment("strResourceRootPath") &  "\QueryResults"
strQueryResultPath = getLatestQueryResultSheet(strQueryResultPath)
End If

Set objTempExcel = CreateObject("Excel.Application")
objTempExcel.Visible = False
Set objTempWorkbook = objTempExcel.WorkBooks.Open(strQueryResultPath)
Set objTempDriverSheet = objTempWorkbook.Worksheets("Sheet1")

objTempDriverSheet.Cells(2,15).Value = "CDBO Response"
objTempDriverSheet.Cells(2,16).Value = "Scrittura Response"
objTempDriverSheet.Range(objTempDriverSheet.Cells(2,15), objTempDriverSheet.Cells(2,16)).Interior.ColorIndex=15
objTempDriverSheet.Range(objTempDriverSheet.Cells(2,15), objTempDriverSheet.Cells(2,16)).Font.Bold=True
objTempDriverSheet.UsedRange.EntireColumn.Autofit()
objTempDriverSheet.UsedRange.Borders.LineStyle = 1
objTempDriverSheet.UsedRange.Borders.Weight = 2
objTempDriverSheet.UsedRange.HorizontalAlignment = -4108

objTempExcel.DisplayAlerts = false
objTempWorkbook.Save  'As(strExcelPath)
objTempWorkbook.Close
objTempExcel.DisplayAlerts = true

Call SendMail(strCdboMailTo,strCdboMailSubject,strCdboMailBody,strQueryResultPath)	

Call ReportEvent("Verification Mail"," A Mail is successfully sent to the desired group with latest  query result sheet attached with it","PASS")


End Function





'************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: handleB2BWindow
' Purpose										: This function will  handle ti B2b window which appears for few deals which has B2b as parent 
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function handleB2BWindow()

Call WaitForObject(Win("Win_B2BTradeWindow"),20)
If  Win("Win_B2BTradeWindow").Exist(1) Then
Win("Win_B2BTradeWindow").Activate
wait 1
Win("Win_B2BTradeWindow").TEdit("B2BTrade2_Counterparty").SetValue "WFCLLC-BU" 
wait 1
Win("Win_B2BTradeWindow").TEdit("B2BTrade2_OurPortfolio").SetValue "METALS_WFCLLC"
wait 1
Win("Win_B2BTradeWindow").PBut("OK").Click

Call ReportEvent("Handle B2B Trade Window", "B2B Window handled successfully for the deal " & Chr(34) & strDealTrackingNo & Chr(34) & " of INS_TYPE " & Chr(34) & strInsType & Chr(34), "INFO")
Call WaitForObject(Win("Win_ChildTradeStatusTable"),20)

If Win("Win_ChildTradeTransactionTable").Exist(1) Then
Win("Win_ChildTradeTransactionTable").Activate
Win("Win_ChildTradeTransactionTable").Close
Win("Win_ChildTradeTransactionTable").Terminate
End If
wait 1
If Win("Win_ChildTradeTransactionTable").Exist(1) Then
Win("Win_ChildTradeTransactionTable").Activate
Win("Win_ChildTradeTransactionTable").Close
Win("Win_ChildTradeTransactionTable").Terminate
End If
wait 1
If Win("Win_ChildTradeStatusTable").Exist(1) Then
Win("Win_ChildTradeStatusTable").Activate
Win("Win_ChildTradeStatusTable").Close
Win("Win_ChildTradeStatusTable").Terminate
End If
End If

End Function


'****************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: ProcessUserListOfDeals
' Purpose										: This function will  process only those INS_TYPEs which the user will mention in the datasheet
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function ProcessUserListOfDeals()

strListOfInsTypes =  GetData("ProcessUserListOfDeals","DealsToBeProcessed")
strQueryToFetchDeaNum = GetData("ProcessUserListOfDeals","QueryToFetchDealsForInsType")
strWindowNames = GetData("ProcessUserListOfDeals","DealDetailWindowNames")
strXmlQuery = GetData("ProcessUserListOfDeals", "QueryToValidateXmlGeneration")
strDealStatusQuery = GetData("ProcessUserListOfDeals", "QueryToValidateEndurDealStatus")
strStatusQuery =  GetData("ProcessUserListOfDeals", "QueryToFetchScritturaResponse")
strDealFieldsToBeValidated = GetData("ProcessUserListOfDeals","NewDealFieldsToBeValidated")
strDealFieldsValue = GetData("ProcessUserListOfDeals","NewDealFieldsValue")
strDealsWithNoTranInfoInDetails = GetData("ProcessUserListOfDeals","DealsWithNoTranInfoInDetails")
strChildDealInsType = GetData("ProcessUserListOfDeals", "ChildInsType")
'strNoOfChildDeals = GetData("ProcessUserListOfDeals", "ChildDealsCount")

strResultSheetPath = Environment("strResourceRootPath") & "\QueryResults\"
strResultSheetName = "ListedInsTypeResult_" & Now

strListedInsTypeResultPath = CreateSheet(strResultSheetPath,strResultSheetName)

Call fillHeadersInQueryResultSheet(strListedInsTypeResultPath, "Sheet1",1, 1,"Deal_Num")
Call fillHeadersInQueryResultSheet(strListedInsTypeResultPath,"Sheet1",1, 2,"Ins_Type")
Call fillHeadersInQueryResultSheet(strListedInsTypeResultPath,"Sheet1", 1,3,"NewDealNumber")
Call fillHeadersInQueryResultSheet(strListedInsTypeResultPath,"Sheet1",1,4,"NewTranNumber")

flagUserListedInsTypes = True
intUserListedInsTypes = 0

If strDealsWithNoTranInfoInDetails <> "" Then
If Instr(strDealsWithNoTranInfoInDetails, ",")>0 Then
arrTemp = Split(strDealsWithNoTranInfoInDetails, ",")
intDealsWithNoTranInfoInDetails = UBound(arrTemp) + 1
Else
Dim arrTemp(0)
arrTemp(0) = strDealsWithNoTranInfoInDetails
intDealsWithNoTranInfoInDetails = UBound(arrTemp) + 1
End If
Else
intDealsWithNoTranInfoInDetails = 0
End If

If intDealsWithNoTranInfoInDetails > 0 Then
ReDim Preserve arrDealsWithNoTranInfoInDetails(intDealsWithNoTranInfoInDetails-1)
For i = 0 to UBound(arrTemp)
arrDealsWithNoTranInfoInDetails(i) = arrTemp(i)
Next
End If

If strListOfInsTypes <> "" Then

If Instr(strListOfInsTypes,",")>0 Then
arrListOfDeals = Split(strListOfInsTypes,",")
intUserListedInsTypes = UBound(arrListOfDeals) + 1
else
Dim arrListOfDeals(1)
arrListOfDeals(0) = strListOfInsTypes
intUserListedInsTypes = 1
End If

'		If Instr(strChildDealInsType, ",")>0 Then
'			arrChildDealInsType = Split(strChildDealInsType, ",")
'		Else
'			Dim arrChildDealInsType(0)
'			arrChildDealInsType(0) = strChildDealInsType
'		End If
'
'		If Instr(strNoOfChildDeals, ",")>0 Then
'			arrNoOfChildDeals = Split(strNoOfChildDeals, ",")
'		Else
'			Dim arrNoOfChildDeals(0)
'			arrNoOfChildDeals(0) = strNoOfChildDeals
'		End If

arrQuerySplit = Split(strQueryToFetchDeaNum, "NAME=")

intRowNumber = 2
For i = 0 to intUserListedInsTypes - 1

strTempInsType = arrListOfDeals(i)
If Instr(Right(strTempInsType,2),"_") Then
strInsType = Left(strTempInsType,Len(strTempInsType)-2)
Else
strInsType = strTempInsType
End If            			

strStartingInsType = strInsType
'strInsTypecode = FetchInsTypeNumber(strInsType)
strQuery = arrQuerySplit(0) & "NAME='" & strInsType & "'" & arrQuerySplit(1)
runAdHocQuery(strQuery)	

If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").Exist(1) Then
If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow") > 1 Then

strDealTrackingNo = GetMaxDealNum()
Win("Win_AdHocQueryViewer").Terminate

Call ReportEvent("Fetch deal number for the given INS_TYPE", "INS_TYPE = " & strInsType & "; Max deal No = " & strDealTrackingNo, "PASS")
Call writeDataIntoExcel(strListedInsTypeResultPath,"Sheet1",intRowNumber,1,strDealTrackingNo)
Call writeDataIntoExcel(strListedInsTypeResultPath,"Sheet1",intRowNumber,2,strInsType)

strFieldNames = ""
strFieldValues = ""
strFieldNames = getDealData("CDBO_DealDataSheet","FieldNames",strTempInsType,strDealTrackingNo)
strFieldValues = getDealData("CDBO_DealDataSheet","FieldValues",strTempInsType,strDealTrackingNo)
If strFieldNames <> "" Then

If Not Win("Win_TradingManager").Exist(3) Then
Call fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

Call executeCloseDeal(strDealTrackingNo)

strSpecifiedDealStatus = ""
If UCase(strInsType)="COM" Then
Call ReportEvent("Processing Deal","The Instrument type is of  " & Chr(34) & strInsType & Chr(34) & " type , so now it's child deals will be processed and then the composer deal will be processed ","INFO")
'							strChildDealNo = ""
'							If UBound(arrChildDealInsType) >= i Then
'								strChildInsType = MultilineTrim(arrChildDealInsType(i))
'							Else
'								strChildInsType = ""
'							End If
'							If UBound(arrNoOfChildDeals) >= i Then
'								strChildDealsCount = MultilineTrim(arrNoOfChildDeals(i))
'							Else
'								strChildDealsCount = ""
'							End If
'							
'							If strChildInsType <> "" Then
'								strQuery = arrQuerySplit(0) & "NAME='" & strChildInsType & "'" & arrQuerySplit(1)
'								Call runAdHocQuery(strQuery)
'								If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").Exist(1) Then
'									If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow") > 1 Then
'										strChildDealNo = GetMaxDealNum()
'										Win("Win_AdHocQueryViewer").Terminate
'										Call  handleAlerts()
'									Else
'										Call ReportEvent("Fetch the MAX(deal_num)", "There are no deals for INS_TYPE " & strChildInsType & ". Hence cannot continue to process this INS_TYPE", "FAIL")
'									End If
'								Else
'									Call ReportEvent("Process User Listed Deals", "Query window which was supposed to contain MAX(deal_num) of INS_TYPE " & strChildInsType & " in not open. So cannot further process the deal", "FAIL")
'								End If
'							End If
Call CreateComposerDeal(strWindowNames,strFieldNames,strFieldValues,strChildDealInsType)
Else
Call ReportEvent("Processing Deal","Now the deal of instrument type " & Chr(34) & strInsType & Chr(34) & " will be processed","INFO")
If intDealsWithNoTranInfoInDetails > 0 Then
Call SetTranInfoFlag(strInsType)
If flagFillTranInfoFromTradingManager Then
Call createDealInNewStatusAndFillTranInfo(strWindowNames,strFieldNames,strFieldValues)
End If
Else
flagFillTranInfoFromTradingManager = false
End If

If flagFillTranInfoFromTradingManager = false Then
flagItemFound = openDealDetailPage(strDealTrackingNo)
Call setWindowTypeAndClearInstrument(strWindowNames)
Else
flagItemFound = openDealDetailPage(strNewDealTrackingNo)
End If
If flagItemFound=true Then
flagFillTranInfoFromTradingManager = false
Call EnterDealDetails(strFieldNames,strFieldValues)
End If

End If

If  strNewDealTrackingNo <> ""  And  strNewDealTrackingNo <> "0" And Instr(strExpectedDealStatus, strDealStatus) > 0 Then
Call ReportEvent("Creating New Deal","Successfully processed the deal " & Chr(34) & strDealTrackingNo & Chr(34) & " of INS_TYPE " & Chr(34) & strInsType & Chr(34) & "to the " & Chr(34) & strExpectedDealStatus & Chr(34) & " status. New Deal Tracking No is " & Chr(34) & strNewDealTrackingNo & Chr(34),"PASS")
Call writeDataIntoExcel(strListedInsTypeResultPath,"Sheet1",intRowNumber,3,strNewDealTrackingNo)
Call writeDataIntoExcel(strListedInsTypeResultPath,"Sheet1",intRowNumber,4,strNewTranTrackingNo)
Call executeCloseDeal(strNewDealTrackingNo)
Call verifyXmlGeneration(strListedInsTypeResultPath,strXmlQuery,strNewDealTrackingNo,intRowNumber,5)
'Call verifyDealStatusInEndur(strDealStatusQuery,strNewTranTrackingNo)
Else
Call ReportEvent("Creating New Deal","Unable to create new deal for deal no " & Chr(34) & strDealTrackingNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34) & " due to above error ","FAIL")
Call writeDataIntoExcel(strListedInsTypeResultPath,"Sheet1",intRowNumber,3,"ERROR")
End If
strSpecifiedDealStatus = ""

Else
Call ReportEvent("Getting data for the Deal","The deal no " & Chr(34) & strDealTrackingNo &  Chr(34) & " for ins type " & Chr(34) & strInsType &  Chr(34) & " is not executed as the row execution in the Data sheet is made false, Kindly check","INFO") 
Call writeDataIntoExcel(strListedInsTypeResultPath,"Sheet1",intRowNumber,3,"SKIPPED")
End If
Else
Call ReportEvent("Fetch the MAX(deal_num)", "There are no deals for INS_TYPE " & strInsType & ". Hence cannot continue to process this INS_TYPE", "FAIL")
End If
Else
Call ReportEvent("Process User Listed Deals", "Query window which was supposed to contain MAX(deal_num) of INS_TYPE " & strInsType & " in not open. So cannot further process the deal", "FAIL")
End If

intRowNumber = intRowNumber + 1

next

strStartingInsType = ""
Call validateTranInfo(strListedInsTypeResultPath,strStatusQuery,strDealFieldsToBeValidated,strDealFieldsValue,9)

Win("Win_TradingManager").Terminate

Else
Call ReportEvent("Process User listed Ins_Types", "There are no Ins_Types in the list to process", "FAIL")
Environment("AbortTestcase") = True
End If

Call insertColumnTypeInQueryResult(strListedInsTypeResultPath)

End Function



'**************************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: GetMaxDealNum
' Purpose										: This function decides on the max of deal numbers displayed for a perticular INS_TYPE and returns the same
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function GetMaxDealNum()

Dim intNumOfRows, strMaxDeal, strTempDeal

If Win("Win_AdHocQueryViewer").Exist(1) Then

intNumOfRows = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")
If intNumOfRows = 2 Then
GetMaxDealNum = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle","2","deal_num")
else
strMaxDeal = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",Cstr(i),"deal_num")
For i = 2 to intNumOfRows
strTempDeal = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle",Cstr(i),"deal_num")
If strTempDeal > strMaxDeal Then
strMaxDeal = strTempDeal
End If
Next
GetMaxDealNum = strMaxDeal
End If

Else
Call ReportEvent("Fetch max deal number", "Query window not found while fetching max deal number", "FAIL")
End If
End Function




'***********************************************************************************************************************************************************************

''*******************************************************************************
'' Function/Procedure Name	: CreateComposerDeal
'' Purpose										: this function creates Child deals and composer deal
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function  CreateComposerDeal(strWindowNames,strFieldNames,strFieldValues, strChildDealInsType)

flagItemFound = False
flagTempItemFound = false
strTempDealTrackingNo = strDealTrackingNo

strWindowName = "trade_input.trade_input_win.*"
Win("Win_TradeDealDetails").SetTOProperty "name",strWindowName

If strChildDealInsType = "" Then
If NOT Win("Win_TradingManager").Exist(1) Then
Call fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
End If
Call WaitForObject(Win("Win_QueriedDealsTableWindow"),20)

If Not Win("Win_QueriedDealsTableWindow").Exist(1) Then
Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect "Main Group","46","12"
If Not Win("Win_QueriedDealsTableWindow").Exist(3) Then
Win("Win_TradingManager").Brows("Brows_TradingManager").NodeSelect strNodeType,"37","13"
End If
End If

wait 1

If Win("Win_QueriedDealsTableWindow").Exist(5) Then
Win("Win_QueriedDealsTableWindow").Activate
intMaxRow = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetROProperty("maxrow")
wait 1
strAppInsType = ""
For j = 2 to intMaxRow
strRowValue = CStr(j)
strAppInsType = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Ins. Type")
wait 2
If UCase(strAppInsType) <> "COM" AND UCase(strAppInsType) <> "EO-CLIQUET" Then
flagTempItemFound = true
strUserLock = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Deal Lock User")
strAppDealNo = Win("Win_QueriedDealsTableWindow").LBox("LBox_QueriedDealsList").GetCellValue("ByIndxByTitle",strRowValue,"Deal #")
strChildDealInsType = strAppInsType
Wait 1
Exit For
End If
Next
Win("Win_QueriedDealsTableWindow").Terminate
End If
End If

If strChildDealInsType <> "" Then

If Instr(strChildDealInsType, ",")>0 Then
arrChildDealsInsType = Split(strChildDealInsType, ",")
Else
Dim arrChildDealsInsType(0)
arrChildDealsInsType(0) = strChildDealInsType	
End If

Dim arrChildDealNos()
ReDim arrChildDealNos(UBound(arrChildDealsInsType))

For i = 0 to UBound(arrChildDealsInsType)
strChild = arrChildDealsInsType(i)
Call ReportEvent("Process COM child Deals", "Processing child deal of Instrument Type " & Chr(34) & strChild & Chr(34), "INFO")

Call SetTranInfoFlag(strChild)	

strQuery = "SELECT MAX (DEAL_TRACKING_NUM) AS DEAL_NUM, INS_TYPE FROM AB_TRAN WHERE TRAN_STATUS=3 AND lock_type =0 AND INS_CLASS=0 AND CURRENT_FLAG=1 AND INS_TYPE=(SELECT ID_NUMBER FROM INSTRUMENTS WHERE NAME='" & strChild & "') GROUP BY INS_TYPE"
runAdHocQuery(strQuery)
strChildDealNo = GetMaxDealNum()
dictCOMChildDeals.Item(strChild & "_" & strTempDealTrackingNo & "_" & i) = strChildDealNo

If Win("Win_AdHocQueryViewer").Exist(1) Then
Win("Win_AdHocQueryViewer").Terminate
handleAlerts()
End If


strInsType = strChild
strDealTrackingNo = strChildDealNo

strTempFieldNames = getDealData("CDBO_DealDataSheet","FieldNames",strInsType,strDealTrackingNo)
strTempFieldValues = getDealData("CDBO_DealDataSheet","FieldValues",strInsType,strDealTrackingNo)

Call SetTranInfoFlag(strInsType)
Call executeCloseDeal(strDealTrackingNo)
If flagFillTranInfoFromTradingManager Then
Call createDealInNewStatusAndFillTranInfo(strWindowNames,strTempFieldNames,strTempFieldValues)
Else
flagItemFound = openDealDetailPage(strDealTrackingNo)
If flagItemFound Then
Call setWindowTypeAndClearInstrument(strWindowNames)
Call EnterDealDetails(strTempFieldNames,strTempFieldValues)
End If
End If
dictCOMChildDeals.Item(strChild & "_" & strTempDealTrackingNo & "_" & i) = strNewDealTrackingNo
arrChildDealNos(i) = strNewDealTrackingNo
Next

arrKeys = dictCOMChildDeals.Keys()
For each sKey in arrKeys
If dictCOMChildDeals.Item(sKey) = "" Then
dictCOMChildDeals.Remove(sKey)
End If
Next

Call ReportEvent("Process COM Deal", "Processing " & Chr(34) & "COM" & Chr(34) & " deal now", "INFO")

strDealTrackingNo = strTempDealTrackingNo
strInsType = "COM"
executeCloseDeal(strDealTrackingNo)
Win("Win_TradeDealDetails").SetTOProperty "name","ins_composer.composer_win.*"
flagItemFound = openDealDetailPage(strDealTrackingNo)
flagCompDeal = true
If flagItemFound Then
Call setWindowTypeAndClearInstrument(strWindowNames)
Call EnterDealDetails(strFieldNames,strFieldValues)
End If
strTempDealTrackingNo = strNewDealTrackingNo

For each strChild in arrChildDealNos
strInsType = "COM"
strDealTrackingNo = strTempDealTrackingNo
flagCompDeal = true
flagLinkSuccessful = LinkToCompDeal(strChild)
If flagLinkSuccessful Then
flagCompDeal = False
strInsType = strChildDealInsType
strDealTrackingNo = strChild
ValidateChildDeal(strChild)
End If
Next

strInsType = "COM"
strDealTrackingNo = strTempDealTrackingNo

Win("Win_TradeDealDetails").SetTOProperty "name","ins_composer.composer_win.*"
Call WaitForObject(Win("Win_TradeDealDetails"),20)
wait 2
If Win("Win_TradeDealDetails").Exist Then
Win("Win_TradeDealDetails").Terminate
handleAlerts()
executeCloseDeal(strDealTrackingNo)
flagItemFound = openDealDetailPage(strDealTrackingNo)
End If
flagCompDeal = true
Call validateComposerDeal()
flagCompDeal = false
Else
Call ReportEvent("Get Child deal Ins_Type and DealTrackingNo", "COM deal " & Chr(34) & strDealTrackingNo & Chr(34) & " doesn't have any child deals inside. Please check", "FAIL")
strExpectedDealStatus = "N/A"
End If
flagCompDeal = false

End Function

'***********************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: LinkToCompDeal
'' Purpose										: this function links the child deals to the composer deal
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function LinkToCompDeal(strDealNo)

flagItemFound = False
LinkToCompDeal = False
Win("Win_TradeDealDetails").SetTOProperty"name", "ins_composer.composer_win.*"
wait 1
Win("Win_TradeDealDetails").Activate
wait 1
intMaxRows_Avail = 0

If Win("Win_TradeDealDetails").LBox("LBox_AvialDeal_Comp").Exist Then
intMaxRows_Avail = Win("Win_TradeDealDetails").LBox("LBox_AvialDeal_Comp").GetROProperty("maxrow")
End If

executeCloseDeal(strDealNo)

If Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").Exist Then
intMaxRows_Comp = Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").GetROProperty("maxrow")
End If

intMaxRows = Win("Win_TradeDealDetails").LBox("LBox_AvialDeal_Comp").GetROProperty("maxrow")
If intMaxRows >= intMaxRows_Avail Then
Call ReportEvent("Query child deals to Composer deal", "Child deal " & Chr(34) & strDealNo & Chr(34) & " is successfully querried to composer deal " & Chr(34) & strNewDealTrackingNo & Chr(34), "INFO")
Win("Win_TradeDealDetails").LBox("LBox_AvialDeal_Comp").CellClick "ByIndx",Cstr(intMaxRows), "1"
wait 2
Win("Win_TradeDealDetails").PBut("PBut_Link_Comp").Click
Else
Call ReportEvent("Query child deals to Composer deal", "Something went wrong. Child deal " & Chr(34) & strDealNo & Chr(34) & " is NOT querried to composer deal " & Chr(34) & strNewDealTrackingNo & Chr(34) & ". Please check", "FAIL")
End If

intMaxRows = Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").GetROProperty("maxrow")
If intMaxRows > intMaxRows_Comp Then
Call ReportEvent("Link Child deals", "Successfully linked child deal " & Chr(34) & strDealNo & Chr(34) & " to Composer deal " & Chr(34) & strNewDealTrackingNo & Chr(34), "INFO")
wait 1
LinkToCompDeal = True
Else
Call ReportEvent("Link Child deals", "Something went wrong. Could NOT link child deal " & Chr(34) & strDealNo & Chr(34) & " to Composer deal " & Chr(34) & strNewDealTrackingNo & Chr(34) & " Please check", "FAIL")
End If


End Function

'*******************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: ValidateChildDeal
'' Purpose										: this function validates the child deals of the Composer deal
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function ValidateChildDeal(strDealNo)

If Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").Exist(1) Then
intMaxRows = Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").GetROProperty("maxrow")
wait 1
'Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").CellClick "ByIndx",CStr(intMaxRows), "1"
'Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").CellClick "ByIndx",CStr(intMaxRows), "1"

Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").DblCellClick "ByIndx",CStr(intMaxRows), "1"
Win("Win_TradeDealDetails").SetTOProperty "name", "trade_input.trade_input_win.*"
Call WaitForObject(Win("Win_TradeDealDetails"),20)

If NOT Win("Win_TradeDealDetails").Exist(1) Then
Win("Win_TradeDealDetails").SetTOProperty"name", "ins_composer.composer_win.*"
Wait 1
Win("Win_TradeDealDetails").LBox("LBox_Components_Comp").DblCellClick "ByIndx",CStr(intMaxRows), "1"
Win("Win_TradeDealDetails").SetTOProperty "name", "trade_input.trade_input_win.*"
Call WaitForObject(Win("Win_TradeDealDetails"),20)

End If

If Win("Win_TradeDealDetails").Exist(1) Then
Call fn_FillInTradeEditField("Marketing Fee", "10")
Call processDeal("to Validated")
Else
Call ReportEvent("Validate Child deals for composer deal", "Deal Detail Page did appear for the deal " & Chr(34) & strDealNo & Chr(34) & ". Please check", "FAIL")
End If
If Win("Win_TradeDealDetails").Exist(1) Then
Win("Win_TradeDealDetails").Terminate
End If
End If

End Function


'**********************************************************************************************************************************************************************************

''*******************************************************************************
'' Function/Procedure Name	: SetTranInfoFlag
'' Purpose										: this function sets the flagFillTranInfoFromTradingManager for the specified deal Ins_type
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function SetTranInfoFlag(strDealInsType)

flagFillTranInfoFromTradingManager = False
intCount = UBound(arrDealsWithNoTranInfoInDetails)
For ind = 0 to intCount
If UCase(strDealInsType) = UCase(arrDealsWithNoTranInfoInDetails(ind)) Then
flagFillTranInfoFromTradingManager = True
Exit For
End If
Next

End Function



'*******************************************************************************************************************************************************************


''*******************************************************************************
'' Function/Procedure Name	: validateComposerDeal
'' Purpose										: this function validates the composer deal by filling the action field and clicking onthe process button
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function validateComposerDeal()

Win("Win_TradeDealDetails").SetTOProperty"name", "ins_composer.composer_win.*"
wait 1
Win("Win_TradeDealDetails").IBut("IBut_ProcessIns_Comp").Click
Win("Win_TradeDealDetails").SetTOProperty "name", "ins_trans.trans_win.*"
wait 1
strFieldValue = "to Validated"
Call processDeal(strFieldValue)
If Win("Win_TradeDealDetails").Exist(1) Then
Win("Win_TradeDealDetails").Terminate
Call handleAlerts()
Call handleAlerts()
End If
Win("Win_TradeDealDetails").SetTOProperty "name", "ins_composer.composer_win.*"
wait 1
If Win("Win_TradeDealDetails").Exist(1) Then
Win("Win_TradeDealDetails").Terminate
Call handleAlerts()
Call handleAlerts()
End If
Win("Win_TradeDealDetails").SetTOProperty "name", "trade_input.trade_input_win.*"
wait 1
End Function


'*************************************************************************************************************************************************************
'CDBO Regression Steps Ends

'################################################################################################################

'Reports Validation Steps Begin
'*************************************************************************************************************************************************************


''*******************************************************************************
'' Function/Procedure Name	: Task_PackEODResultToFile
'' Purpose										: This function will run the WAC_PackEODResultsToFile task and handle the corresponding windows
'' Author											: WellsFargo
'' Parameters								 : 
'' Return Values							: 
''*******************************************************************************
Function TaskPackEODResultToFile()

If flagJobFailed = false Then

strTaskToRun = GetData("TaskPackEODResultToFile", "TaskToRun")
strOutPutDirectoryPath = GetData("TaskPackEODResultToFile", "OutPutDirectoryPath")
strExecutionType = GetData("TaskPackEODResultToFile", "ExecutionType")
strOutPutDirectoryName = GetData("TaskPackEODResultToFile", "OutPutDirectoryName")

strOutPutPath = strOutPutDirectoryPath & "\" & strExecutionType

Call verifyFolderCreation(strOutPutPath,strOutPutDirectoryName)

strOutPutPath = strOutPutDirectoryPath & "\" & strExecutionType & "\" & strOutPutDirectoryName

If  Not Win("Win_TradingManager").Exist(1) Then
Call fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager"),10)
End If

strEndurDate = Win("Win_TradingManager").TEdit("TEdit_CurrentDate").GetROProperty("content")

Call loadAndRunTasks(strTaskToRun)

If flagErrorLoadingTask = false Then

Call fillSelectDirectoryWindowPacTask(strEndurDate,strOutPutPath)

Call WaitForObject(Win("Win_TradingManager"),20)

Call verifyTaskStatus(strTaskToRun)

End If

Else
Call ReportEvent("WAC_PackEODResultsToFile Task Execution", "The task is not executed since one of the Eod Min Cum job failed", "FAIL")
End If

End Function



'******************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: fillSelectDirectoryWindow
' Purpose										: This function will  handle the directory window for the task  "WAC_PackEODResultsToFile"
' Author											: WellsFargo
' Parameters								: 
' Return Values							: 
'*******************************************************************************

Function fillSelectDirectoryWindowPacTask(strEndurDate,strOutPutPath)

Call fn_FillEditField("Win_SelectDirectory_PackTask","*EOD Date:",strEndurDate)
Call fn_FillEditField("Win_SelectDirectory_PackTask","*Output directory:",strOutPutPath)

Win("Win_SelectDirectory_PackTask").TEdit("TEdit_SelectPortfolios").RightClick()
Win("Win_TraderSelection").LBox("LBox_List").CellClick "ByIndxByTitle","5","name"
WShell.SendKeys("^a")
Wait 1
Win("Win_TraderSelection").PBut("OK").Click
wait 1

Call fn_ClickButton("Win_SelectDirectory_PackTask","OK")

End Function



'*******************************************************************************
'' Function/Procedure Name	: Task_ComparSim
'' Purpose										: This function will run the WAC_PackEODResultsToFile task and handle the corresponding windows
'' Author											: WellsFargo
'' Parameters								 : 
'' Return Values							: 
''*******************************************************************************

Function TaskCompareSim()

strTaskToRun = GetData("TaskCompareSim", "TaskToRun")
strBaseDirectoryPath = GetData("TaskCompareSim", "BaseDirectoryPath")
strNewDirectoryPath = GetData("TaskCompareSim", "NewDirectoryPath")
strOutPutDirectoryPath = GetData("TaskCompareSim", "OutPutDirectoryPath")
strExecutionType = GetData("TaskCompareSim", "OutPutExecutionType")
strOutPutDirectoryName = GetData("TaskCompareSim", "OutPutDirectoryName")

strOutPutPath = strOutPutDirectoryPath & "\" & strExecutionType

Call verifyFolderCreation(strOutPutPath,strOutPutDirectoryName)

strOutPutPath = strOutPutDirectoryPath & "\" & strExecutionType & "\" & strOutPutDirectoryName

If  Not Win("Win_TradingManager").Exist(1) Then
Call fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager"),10)
End If

Call loadAndRunTasks(strTaskToRun)

If flagErrorLoadingTask = false Then

Call fn_FillEditField("Win_SelectDirectory_PackTask","*Base directory:",strBaseDirectoryPath)
Call fn_FillEditField("Win_SelectDirectory_PackTask","*New directory:",strNewDirectoryPath)
Call fn_FillEditField("Win_SelectDirectory_PackTask","*Output directory:",strOutPutPath)
Call fn_ClickButton("Win_SelectDirectory_PackTask","OK")
Call WaitForObject(Win("Win_TradingManager"),10)

Call verifyTaskStatus(strTaskToRun)

End If



End Function



''********************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: CompareReult
'' Purpose										: This function will  compare the excel sheets created by compare sim task and generate results in result folder
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function CompareResult()

strOutPutDirectoryPath = GetData("TaskCompareSim", "OutPutDirectoryPath")
strExecutionType = GetData("TaskCompareSim", "OutPutExecutionType")
strOutPutDirectoryName = GetData("TaskCompareSim", "OutPutDirectoryName")
strResultFilePath = GetData("CompareResult", "ResultFilePath")
strResultFileName = GetData("CompareResult", "ResultFileName")

strInPutPath = strOutPutDirectoryPath & "\" & strExecutionType & "\" & strOutPutDirectoryName

intFolderPos = InstrRev(strResultFilePath,"\")
strResultFileFolderPath = Mid(strResultFilePath,1,intFolderPos-1)
strResultFileFolderName = Mid(strResultFilePath,intFolderPos+1)

Call verifyFolderCreation(strResultFileFolderPath,strResultFileFolderName)

strFileNameWithTime = strResultFileName & "_" & Now

If Instr(strFileNameWithTime,":") Then
strFileNameWithTime = Replace(strFileNameWithTime,":","_")
End If
If Instr(strFileNameWithTime,"/") Then
strFileNameWithTime = Replace(strFileNameWithTime,"/","_")
End If
If Instr(strFileNameWithTime," ") Then
strFileNameWithTime = Replace(strFileNameWithTime," ","__")
End If

strFullResultFilePath = strResultFilePath  & "\" & strFileNameWithTime & ".xlsx"

Call CompareResult_EodMinCum(strInPutPath,strFullResultFilePath)	

Call ReportEvent("Result Comparison ", "Result comparison is complete and the latest result file is generated at " & Chr(34) & strFullResultFilePath & Chr(34) & " location", "PASS")


End Function


'*******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: CopyInputFilesFromProdToQA
'' Purpose										: This function copies specified input files from Prod input file path to QAinput file path before CFTC Report execution
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function CopyInputFilesFromProdToQA()

Dim strTaskName, arrInputFilePaths(2), arrSearchStrings(2)
Dim fso, objProdInputFilePath, objQAInputFilePath
strTaskName = GetData("CopyInputFilesFromProdToQA", "TaskName")
strInputFiles = GetData("CopyInputFilesFromProdToQA", "InputFiles")

If Instr(strInputFiles, ",")>0 Then
arrInputFiles = Split(strInputFiles, ",")
Else
Dim arrInputFiles(0)
arrInputFiles(0) = strInputFiles
End If

Set fso = CreateObject("Scripting.FileSystemObject")

If NOT Win("Win_TradingManager").Exist(1) Then
Call WaitForObject(SwfWindow("Window_EndurMainWindow"),10)
fn_ClickOnMainMenuObject("Trading")
End If
Call WaitForObject(Win("Win_TradingManager"),20)

Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager").Click
wait 1
Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strTaskName,"name"
wait 1

Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Task Editor"
Call WaitForObject(Win("Win_TaskEditor"),10)
If NOT Win("Win_TaskEditor").Exist Then
Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Task Editor"
Call WaitForObject(Win("Win_TaskEditor"),10)
End If

arrSearchStrings(0) = "string m_sINPUT_FILE_LOCATION = " & Chr(34) & "\\\\"
arrSearchStrings(1) = "string m_sINPUT_FILE_LOCATION = " & Chr(34) & "c:\\"
arrSearchStrings(2) = "string m_sOUTPUT_FILE_LOCATION = " & Chr(34) & "c:\\"

Win("Win_TaskEditor").PBut("Edit").Click
Call WaitForObject(Win("Win_ScriptEditor"),10)
If Win("Win_ScriptEditor").Exist Then
strScriptContent = Win("Win_ScriptEditor").MTEd("MTEd").GetROProperty("content")
i = 0
For each strSearchString in arrSearchStrings
intTempStartPos = Instr(strScriptContent, strSearchString)
If intTempStartPos > 0 Then
intStartPos = intTempStartPos + Len(strSearchString) - 4
intEndPos = Instr(intStartPos, strScriptContent, Chr(34))
intLength = intEndPos - intStartPos
arrInputFilePaths(i) = Mid(strScriptContent, intStartPos, intLength)
i = i + 1
Else
Call ReportEvent("Fetch Prod  & QA input file paths", "Substring " & Chr(34) & strSearchString & Chr(34) & " is not found in the Script Editor. Kindly check", "FAIL")
End If
Next

strProdInputFilePath = arrInputFilePaths(0)
strQAInputFilePath = arrInputFilePaths(1)
strQAOutputFilePath = arrInputFilePaths(2)

If strProdInputFilePath <> "" Then
strProdInputFilePath = Right(strProdInputFilePath, Len(strProdInputFilePath) - 2)
strProdInputFilePath = Replace(strProdInputFilePath, "\\", "\")
strProdInputFilePath = "\" & strProdInputFilePath
End If

If strQAInputFilePath <> "" Then
strQAInputFilePath = Replace(strQAInputFilePath, "\\", "\")
End If

If strQAOutputFilePath <>"" Then
strQAOutputFilePath = Replace(strQAOutputFilePath, "\\", "\")
End If

Call fn_CreateFoldersInThisPath(strQAInputFilePath)
Call fn_CreateFoldersInThisPath(strQAOutputFilePath)

strBackupFolderName = "BackUp - " & Now()
strBackupFolderName = Replace(strBackupFolderName, "/", "_")
strBackupFolderName = Replace(strBackupFolderName, ":", "_")
strBackupFolderPath = strQAInputFilePath & "\" & strBackupFolderName

Call fn_MoveMultipleFiles(strQAInputFilePath, strBackupFolderPath)

strBackupFolderPath = strQAOutputFilePath & "\" & strBackupFolderName
Call fn_MoveMultipleFiles(strQAOutputFilePath, strBackupFolderPath)

If fso.FolderExists(strProdInputFilePath) Then
Set objProdInputFilePath = fso.GetFolder(strProdInputFilePath)
For each strFileName in arrInputFiles
flagFound = False
For each objFile In objProdInputFilePath.Files
If LCase(objFile.Name) = LCase(strFileName) Then
objFile.Copy strQAInputFilePath & "\", True
Call ReportEvent("Copy input files from prod to QA", "Successfully copied the input file " & Chr(34) & objFile.Name & Chr(34) & " to the QA location - " & strQAInputFilePath, "PASS")
flagFound = True
Exit For
End If
Next
If Not flagFound Then
Call ReportEvent("Copy input files from prod to QA", "Could not find the input file " & Chr(34) & objFile.Name & Chr(34) & " in the Prod location - " & strProdInputFilePath, "FAIL")
End If
Next
Else
Call ReportEvent("Copy input files from Prod to QA", "Prod Input file path " & Chr(34) & strProdInputFilePath & Chr(34) & " does not exist. Kindly check", "FAIL")
End If

Wait 2
Win("Win_ScriptEditor").Terminate
Wait 2
Win("Win_TaskEditor").Terminate
End If

End Function
'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: CommentProdVariables
'' Purpose										: This function comments the "Path location" variables of Prod from ScriptEditor
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function CommentProdVariables()

Dim strTaskName
strTaskName = GetData(Environment("currentKeyWord"), "TaskName")

If NOT Win("Win_TradingManager").Exist(1) Then
Call WaitForObject(SwfWindow("Window_EndurMainWindow"),10)
fn_ClickOnMainMenuObject("Trading")
End If
Call WaitForObject(Win("Win_TradingManager"),20)

Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager").Click
wait 1
Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strTaskName,"name"
wait 3

Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Task Editor"
Call WaitForObject(Win("Win_TaskEditor"),10)
If NOT Win("Win_TaskEditor").Exist Then
Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Task Editor"
Call WaitForObject(Win("Win_TaskEditor"),10)
End If

Win("Win_TaskEditor").PBut("Edit").Click
Call WaitForObject(Win("Win_ScriptEditor"),10)
If Win("Win_ScriptEditor").Exist Then
strScriptContent = Win("Win_ScriptEditor").MTEd("MTEd").GetROProperty("content")

strProdInputFilePattern =  "// string m_sINPUT_FILE_LOCATION = " & Chr(34) & "\\\\" 
If Instr(strScriptContent, strProdInputFilePattern)<=0 Then
strProdInputFilePattern =  "//string m_sINPUT_FILE_LOCATION = " & Chr(34) & "\\\\" 
If Instr(strScriptContent, strProdInputFilePattern)<=0 Then
strProdInputFilePattern =  "string m_sINPUT_FILE_LOCATION = " & Chr(34) & "\\\\"
If Instr(strScriptContent, strProdInputFilePattern)>0 Then
intPos =  fn_SearchInScriptEditor(strProdInputFilePattern)
Win("Win_ScriptEditor").MTEd("MTEd").SetFocus
WShell.SendKeys "{HOME}"
Wait 1
WShell.SendKeys "//"
Call ReportEvent("Comment Prod path variables", "Successfully commented Prod input files path declaration", "PASS")
Else
Call ReportEvent("Comment Prod path variables", "Prod input files path declaration  with pattern - " & strProdInputFilePattern & " - not found in the script", "FAIL")
End If
Else
Call ReportEvent("Comment Prod path variables", "Prod input files path declaration already commented", "PASS")
End If
Else
Call ReportEvent("Comment Prod path variables", "Prod input files path declaration already commented", "PASS")
End If

strProdOutputFilePattern =  "// string m_sOUTPUT_FILE_LOCATION = " & Chr(34) & "\\\\"
If Instr(strScriptContent, strProdOutputFilePattern)=0 Then
strProdOutputFilePattern =  "//string m_sOUTPUT_FILE_LOCATION = " & Chr(34) & "\\\\" 
If Instr(strScriptContent, strProdOutputFilePattern)=0 Then
strProdOutputFilePattern =  "string m_sOUTPUT_FILE_LOCATION = " & Chr(34) & "\\\\"
If Instr(strScriptContent, strProdOutputFilePattern)>0 Then
intPos =  fn_SearchInScriptEditor(strProdOutputFilePattern)
Win("Win_ScriptEditor").MTEd("MTEd").SetFocus
WShell.SendKeys "{HOME}"
Wait 1
WShell.SendKeys "//"
Call ReportEvent("Comment Prod path variables", "Successfully commented Prod output files path declaration", "PASS")
Else
Call ReportEvent("Comment Prod path variables", "Prod output files path declaration  with pattern - " & strProdOutputFilePattern & " - not found in the script", "FAIL")
End If
Else
Call ReportEvent("Comment Prod path variables", "Prod output files path declaration already commented", "PASS")
End If
Else
Call ReportEvent("Comment Prod path variables", "Prod output files path declaration already commented", "PASS")
End If

strQAInputFilePattern =  "// string m_sINPUT_FILE_LOCATION = " & Chr(34) & "c:\"
If Instr(strScriptContent, strQAInputFilePattern)>0 Then
intPos =  fn_SearchInScriptEditor(strQAInputFilePattern)
Win("Win_ScriptEditor").MTEd("MTEd").SetFocus
WShell.SendKeys "{HOME}"
Wait 1
WShell.SendKeys "{DELETE 2}"
Call ReportEvent("UnComment QA path variables", "Successfully uncommented QA input files path declaration", "PASS")
Else
strQAInputFilePattern =  "//string m_sINPUT_FILE_LOCATION = " & Chr(34) & "c:\" 
If Instr(strScriptContent, strQAInputFilePattern)>0 Then
intPos =  fn_SearchInScriptEditor(strQAInputFilePattern)
Win("Win_ScriptEditor").MTEd("MTEd").SetFocus
WShell.SendKeys "{HOME}"
Wait 1
WShell.SendKeys "{DELETE 2}"
Call ReportEvent("UnComment QA path variables", "Successfully uncommented QA input files path declaration", "PASS")
Else
strQAInputFilePattern =  "string m_sINPUT_FILE_LOCATION = " & Chr(34) & "c:\"
If Instr(strScriptContent, strQAInputFilePattern)<=0 Then
Call ReportEvent("UnComment QA path variables", "QA input files path declaration  with pattern - " & strQAInputFilePattern & " - not found in the script", "FAIL")
Else
Call ReportEvent("UnComment QA path variables", "QA input files path declaration already uncommented", "PASS")
End If
End If
End If

strQAOutputFilePattern =  "// string m_sOUTPUT_FILE_LOCATION = " & Chr(34) & "c:\"
If Instr(strScriptContent, strQAOutputFilePattern)>0 Then
intPos =  fn_SearchInScriptEditor(strQAOutputFilePattern)
Win("Win_ScriptEditor").MTEd("MTEd").SetFocus
WShell.SendKeys "{HOME}"
Wait 1
WShell.SendKeys "{DELETE 2}"
Call ReportEvent("UnComment QA path variables", "Successfully uncommented QA output files path declaration", "PASS")
Else
strQAOutputFilePattern =  "//string m_sOUTPUT_FILE_LOCATION = " & Chr(34) & "c:\" 
If Instr(strScriptContent, strQAOutputFilePattern)>0 Then
intPos =  fn_SearchInScriptEditor(strQAOutputFilePattern)
Win("Win_ScriptEditor").MTEd("MTEd").SetFocus
WShell.SendKeys "{HOME}"
Wait 1
WShell.SendKeys "{DELETE 2}"
Call ReportEvent("UnComment QA path variables", "Successfully uncommented QA output files path declaration", "PASS")
Else
strQAOutputFilePattern =  "string m_sOUTPUT_FILE_LOCATION = " & Chr(34) & "c:\"
If Instr(strScriptContent, strQAOutputFilePattern)<=0 Then
Call ReportEvent("UnComment QA path variables", "QA output files path declaration  with pattern - " & strQAOutputFilePattern & " - not found in the script", "FAIL")
Else
Call ReportEvent("UnComment QA path variables", "QA output files path declaration already uncommented", "PASS")
End If
End If
End If

Wait 1
Win("Win_ScriptEditor").PBut("PBut_Save").Click
Call WaitForObject(Win("Win_ScriptEditor"),10)

strCompilationMessage = Win("Win_ScriptEditor").MTEd("MTEdit_CompilationMessage").GetROProperty("content")
If Instr(UCase(strCompilationMessage), "SAVE SUCCESSFUL")>0  Then
Call ReportEvent("Edit and Save Script changes", "Changes to Script are Saved successfully", "PASS")
Else
Call ReportEvent("Edit and Save Script changes", "Error encountered while saving changes to Script. Error message is: " & Chr(34) & strCompilationMessage & Chr(34) , "FAIL")
End If

Win("Win_ScriptEditor").PBut("PBut_Complie").Click
Call WaitForObject(Win("Win_ScriptEditor"),10)

strCompilationMessage = Win("Win_ScriptEditor").MTEd("MTEdit_CompilationMessage").GetROProperty("content")
If Instr(UCase(strCompilationMessage), "COMPILATION SUCCESSFUL")>0  Then
Call ReportEvent("Save & Compile Script changes", "Changes to Script are Compiled successfully", "PASS")
Else
Call ReportEvent("Save & Compile Script changes", "Error encountered while compiling changes to Script. Error message is: " & Chr(34) & strCompilationMessage & Chr(34) , "FAIL")
End If

Wait 1
Win("Win_ScriptEditor").Terminate
wait 1
Win("Win_TaskEditor").Terminate

End If

End Function

'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: RunTask
'' Purpose										: This function reads the TaskName from excel, loads and runs the task and monitors the status of the run
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function RunTaskCFTC()
strTaskName = GetData(Environment("currentKeyWord"), "TaskName")

If UCase(strTaskName) = "W_CFTC_REPORT"  Then
If strQAOutputFilePath = "" Then
Call SetQAOutputFilePath()
End If
fn_CreateFoldersInThisPath(strQAOutputFilePath)

strBackupFolderName = "BackUp - " & Now()
strBackupFolderName = Replace(strBackupFolderName, "/", "_")
strBackupFolderName = Replace(strBackupFolderName, ":", "_")
strBackupFolderPath = strQAOutputFilePath & "\" & strBackupFolderName

Call fn_MoveMultipleFiles(strQAOutputFilePath, strBackupFolderPath)
End If

loadAndRunTasks(strTaskName)
verifyTaskStatus(strTaskName)
End Function

'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: VerifyOutputFilesCreation
'' Purpose										: This function verifies if the output file is created in the output files location specified in Script editor of the task
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function VerifyOutputFilesCreation()

strOutputFiles = GetData(Environment("currentKeyWord"), "ItemName")

If Instr(strOutputFiles, ",") Then
arrOutputFiles = Split(strOutputFiles, ",")
Else
Dim arrOutputFiles(0)
arrOutputFiles(0) = strOutputFiles
End If

If strQAOutputFilePath = "" Then
Call SetQAOutputFilePath()
End If
Set fso = CreateObject("Scripting.FileSystemObject")
If fso.FolderExists(strQAOutputFilePath) Then
Set objFolder = fso.GetFolder(strQAOutputFilePath)
For each strExpectedFile in arrOutputFiles
flagFileFound = False
For each objFile In objFolder.Files
If objFile.Name = strExpectedFile Then
Call ReportEvent("Verify Output Files Creation", "Expected output file " & Chr(34) & objFile.Name & Chr(34) & " is successfully generated in the output files path " & strQAOutputFilePath, "PASS")
flagFileFound = True
Exit For
End If
Next
If NOT flagFileFound Then
Call ReportEvent("Verify Output Files Creation", "Expected output file " & Chr(34) & strExpectedFile & Chr(34) & " is not generated in the output files path " & strQAOutputFilePath & ". Kindly check", "FAIL")
End If
Next
End If

If objFolder.Files.Count = 0 Then
Call ReportEvent("Verify Output Files Creation", "No output files are generated in the output files path " & strQAOutputFilePath & ". Kindly check", "FAIL")
End If

End Function
'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: RenameFolderOrFile
'' Purpose										: This function will rename the folder or file
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function RenameFolderOrFile()
strNewName = GetData(Environment("currentKeyWord"), "ItemName")
strFolderPath = GetData(Environment("currentKeyWord"), "SourcePath")

If strNewName <> "" Then
If UCase(strFolderPath) = "CFTC_QA_PATH" Then
If strQAOutputFilePath = "" Then
Call SetQAOutputFilePath()
End If
Call fn_RenameFolderOrFile(strQAOutputFilePath, strNewName)
Else
Call fn_RenameFolderOrFile(strFolderPath, strNewName)
End If
Else
Call ReportEvent("Rename Folder", "Kindly specify the new name", "FAIL")
End If


End Function

'***********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: CopyFolderOrFile
'' Purpose										: This function will copy the file or folder
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function CopyFolderOrFile()

strItemsToCopy = GetData(Environment("currentKeyWord"), "ItemName")
strDestinationPath = GetData(Environment("currentKeyWord") ,"DestinationPath")
strSourcePath = GetData(Environment("currentKeyWord"), "SourcePath")

arrItemsToCopy = Split(strItemsToCopy, ",")

For each strItemToCopy in arrItemsToCopy

If strItemToCopy <> "" AND strDestinationPath <> "" AND strSourcePath <> "" Then
If UCase(strSourcePath) = "CFTC_QA_PATH" Then
If strQAOutputFilePath = "" Then
Call SetQAOutputFilePath()
End If
arrOutputPath = Split(strQAOutputFilePath, "\")
strOutputPath = arrOutputPath(0)
For i = 1 to UBound(arrOutputPath) - 1
strOutputPath = strOutputPath & "\" & arrOutputPath(i)
Next
strOutputPath = strOutputPath & "\" & strItemToCopy
Call fn_CopyFolderOrFile(strOutputPath, strDestinationPath)
Else
strOutputPath = strSourcePath & "\" & strItemToCopy
Call fn_CopyFolderOrFile(strOutputPath, strDestinationPath)
End If
Else
Call ReportEvent("Copy Folder/File", "Either the FolderName to copy or Destination path is empty. Kindly mention both of them", "FAIL")
End If
Next

End Function

'*******************************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: SetQAOutputFilePath
'' Purpose										: This function will set the QA Output file path for CFTC Report validation
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function SetQAOutputFilePath()

strTaskName = "W_CFTC_Report"
If NOT Win("Win_TradingManager").Exist(1) Then
Call WaitForObject(SwfWindow("Window_EndurMainWindow"),10)
fn_ClickOnMainMenuObject("Trading")
End If
Call WaitForObject(Win("Win_TradingManager"),20)

Win("Win_TradingManager").PBut("LoadTaskButton_TradingManager").Click
wait 1
Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle",strTaskName,"name"
wait 1

Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Task Editor"
Call WaitForObject(Win("Win_TaskEditor"),10)
If NOT Win("Win_TaskEditor").Exist(1) Then
Win("Win_TradingManager").MBar("MBar").Select "S&cript~&Task Editor"
Call WaitForObject(Win("Win_TaskEditor"),10)
End If

strSearchString = "string m_sOUTPUT_FILE_LOCATION = " & Chr(34) & "c:\\"

Win("Win_TaskEditor").PBut("Edit").Click
Call WaitForObject(Win("Win_ScriptEditor"),10)
If Win("Win_ScriptEditor").Exist Then
strScriptContent = Win("Win_ScriptEditor").MTEd("MTEd").GetROProperty("content")
intTempStartPos = Instr(strScriptContent, strSearchString)
If intTempStartPos > 0 Then
intStartPos = intTempStartPos + Len(strSearchString) - 4
intEndPos = Instr(intStartPos, strScriptContent, Chr(34))
intLength = intEndPos - intStartPos
strQAOutputFilePath = Mid(strScriptContent, intStartPos, intLength)
If strQAOutputFilePath <>"" Then
strQAOutputFilePath = Replace(strQAOutputFilePath, "\\", "\")
End If
End If
wait 1
Win("Win_ScriptEditor").Terminate
wait 1
Win("Win_TaskEditor").Terminate
wait 1
End If
End Function

'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: CompareOutPutFiles
'' Purpose										: This function verifies if the output file is created in the output files location specified in Script editor of the task
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function CompareOutPutFilesCFTC()

strBaseOutPutFilesPath = GetData("CompareOutPutFilesCFTC", "BaseOutPutFilesPath")
strQaOutPutFilesPath = GetData("CompareOutPutFilesCFTC" ,"QaOutPutFilesPath")
strResultFileName = GetData("CompareOutPutFilesCFTC", "ResultFileName")
strOutputFiles = GetData("VerifyOutputFilesCreation", "ItemName")

flagContinue = true
intNoOfFiles = 0
intSheetNo = 0

If  Instr(strOutputFiles,",")>0 Then
arrOutPutFiles = Split(strOutputFiles,",")
intNoOfFiles = UBound(arrOutPutFiles)
End If

strResultSheetPath = Environment("strResourceRootPath") & "\CFTC_ComparisonResult\"
strResultSheetName = strResultFileName & "_" &Now
strComparisonResultPath = CreateSheet(strResultSheetPath,strResultSheetName)
strGlobalComparisonResultPath = strComparisonResultPath
Set objFSO = CreateObject("Scripting.FileSystemObject")

If Not objFSO.FolderExists(strBaseOutPutFilesPath) Then
Call ReportEvent("Validate Folder Existance", "The folder " & Chr(34) & strBaseOutPutFilesPath & Chr(34) & " is not present at the given path " , "FAIL")
flagContinue = false
End If
If Not objFSO.FolderExists(strQaOutPutFilesPath) Then
Call ReportEvent("Validate Folder Existance", "The folder " & Chr(34) & strQaOutPutFilesPath & Chr(34) & " is not present at the given path " , "FAIL")
flagContinue = false
End If

If flagContinue = true Then

Call ReportEvent("Compare CFTC reports", "CFTC report comparison started " , "INFO")

intTotalSheetCount = 1
comparisonStartTime = Time()

For i = 0 to intNoOfFiles
If intNoOfFiles>0 Then
strFileName = arrOutPutFiles(i)
Else
strFileName = strOutputFiles
End If

strBaseFileName = strBaseOutPutFilesPath & "\" & strFileName
strQaFileName = strQaOutPutFilesPath & "\" & strFileName


If objFSO.FileExists(strBaseFileName) Then
If objFSO.FileExists(strQaFileName) Then
Call CompareFiles(strBaseFileName,strQaFileName,strComparisonResultPath)
Else
Call ReportEvent("Validate File Existance", "The file " & Chr(34) & strFileName & Chr(34) & " is not present at the given QA path " & Chr(34) & strQaOutPutFilesPath & Chr(34) , "FAIL")
End If	
Else
Call ReportEvent("Validate File Existance", "The file " & Chr(34) & strFileName & Chr(34) & " is not present at the given Base path " & Chr(34) & strBaseOutPutFilesPath & Chr(34) , "FAIL")
End If

Next

End If

comparisonEndTime = Time()
Call buildResultSummerySheet_Comparison(strBaseOutPutFilesPath,strQaOutPutFilesPath,strComparisonResultPath)
Call ReportEvent("Compare Cftc reports", "CFTC report comparison finished " , "INFO")

End Function



'******************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: CompareTotemReport
'' Purpose										: This function compares the totem reports and generate the comparison result 
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function CompareTotemReport()

strTotemFilesName = GetData("CompareTotemReport", "FilesName")
strTotemFileColumnsToSort = GetData("CompareTotemReport", "FileColumnsToSort")
strTotemReportFileName = GetData("CompareTotemReport", "ReportFileName")

Call filesToXlsFormat(strProdFilesPath)
Call filesToXlsFormat(strQaFilesPath)

strProdConvertedFilesPath = strProdFilesPath & "\" & "ConvertedFiles"
strQaConvertedFilesPath = strQaFilesPath & "\" & "ConvertedFiles"

If Instr(strTotemFilesName,",")>0 Then
arrTotemFilesName = Split(strTotemFilesName,",")
End If
If Instr(strTotemFileColumnsToSort,",")>0 Then
arrTotemFileColumnsToSort = Split(strTotemFileColumnsToSort,",")
End If


For i = 0 to UBound(arrTotemFilesName)
strTotemFileName = arrTotemFilesName(i)
strTotemColumnsName = arrTotemFileColumnsToSort(i)
Call sortColumnsInXlFile(strProdConvertedFilesPath,strTotemFileName,strTotemColumnsName)
Call sortColumnsInXlFile(strQaConvertedFilesPath,strTotemFileName,strTotemColumnsName)
Next


strComparisonResultPath = Environment("strResourceRootPath") & "\TOTEM_ComparisonResult\"
strResultSheetName = strTotemReportFileName & "_" &Now
strComparisonResultPath = CreateSheet(strComparisonResultPath,strResultSheetName)
strGlobalComparisonResultPath = strComparisonResultPath

Set objFSO = CreateObject("Scripting.FileSystemObject")
flagContinue = true

If Not objFSO.FolderExists(strProdConvertedFilesPath) Then
Call ReportEvent("Validate Folder Existance", "The folder " & Chr(34) & strProdConvertedFilesPath & Chr(34) & " is not present at the given path " , "FAIL")
flagContinue = false
End If
If Not objFSO.FolderExists(strQaConvertedFilesPath) Then
Call ReportEvent("Validate Folder Existance", "The folder " & Chr(34) & strQaConvertedFilesPath & Chr(34) & " is not present at the given path " , "FAIL")
flagContinue = false
End If

If flagContinue = true Then

Call ReportEvent("Compare Totem reports", "TOTEM report comparison started " , "INFO")

intTotalSheetCount = 1
comparisonStartTime = Time()

For each file in objFSO.GetFolder(strProdConvertedFilesPath).files

strFileName = objFSO.GetFileName(file)
strBaseFileName = strProdConvertedFilesPath & "\" & strFileName
strQaFileName = strQaConvertedFilesPath & "\" & strFileName

If objFSO.FileExists(strBaseFileName) Then
If objFSO.FileExists(strQaFileName) Then
Call CompareFiles(strBaseFileName,strQaFileName,strComparisonResultPath)
Else
Call ReportEvent("Validate File Existance", "The file " & Chr(34) & strFileName & Chr(34) & " is not present at the given QA path " & Chr(34) & strQaConvertedFilesPath & Chr(34) , "FAIL")
End If	
Else
Call ReportEvent("Validate File Existance", "The file " & Chr(34) & strFileName & Chr(34) & " is not present at the given Base path " & Chr(34) & strProdConvertedFilesPath & Chr(34) , "FAIL")
End If

Next

End If

comparisonEndTime = Time()
Call buildResultSummerySheet_Comparison(strProdConvertedFilesPath,strQaConvertedFilesPath,strComparisonResultPath)
Call ReportEvent("Compare Totem reports", "TOTEM report comparison finished " , "INFO")

End Function


'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: ValidateRefreshDate
'' Purpose										: This function validates the Refresh date displayed in the Trading manager, if it is greater than the last working date of previous month. This is for Totem
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function ValidateEndurRefreshDate()

Dim strValidationDate : strValidationDate = GetData("ValidateEndurRefreshDate", "ValidationDate")
Dim strTaskName : strTaskName = GetData("ValidateEndurRefreshDate", "TaskName")

If NOT Win("Win_TradingManager").Exist(1) Then
fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

strDisplayedDate = Win("Win_TradingManager").TEdit("TEdit_CurrentDate").GetROProperty("content")
If strDisplayedDate <> "" AND strValidationDate <> "" Then
strDateDiff = DateDiff("d", strDisplayedDate,strValidationDate)
If strDateDiff > 0 Then
Call ReportEvent("Validate Endur Refresh Date", "Endur Refresh Date - " & strDisplayedDate & " - is greater than the Validation date mentioned in data sheet - " & strValidationDate, "PASS")
Else
Call ReportEvent("Validate Endur Refresh Date", "Endur Refresh Date - " & strDisplayedDate & " - is NOT greater than the Validation date mentioned in data sheet - " & strValidationDate & ". Kindly check the dates", "FAIL")
Environment("AbortTestcase") = True
End If
Else
Call  ReportEvent("Validate Endur Refresh Date", "Either the displayed date or the Validation date in data sheet is empty. Kindly check", "FAIL")
Environment("AbortTestcase") = True
End If

End Function

'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: LoadAndRunTotem
'' Purpose										: Loads and runs the Totem task by selecting each Template given in the list of templates in data sheet
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************

Function LoadAndRunTotem()
strTaskName = GetData("LoadAndRunTotem", "TaskName")
strTemplates = GetData("LoadAndRunTotem", "TotemTemplates")
strValidationDate = GetData("ValidateEndurRefreshDate", "ValidationDate")
strLogFilePath = strTotemLogFilePath & "\TotemCurveFeed.txt" 
strStartTime = -1
strEndTime = -1

If Instr(strTemplates, ",")>0 Then
arrTemplates = Split(strTemplates, ",")
Else
Dim arrTemplates(0)
arrTemplates(0)  = strTemplates
End If
If NOT Win("Win_TradingManager").Exist(1) Then
fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

For Each strSingleTemplate in arrTemplates
loadAndRunTasks(strTaskName)
Call WaitForObject(Win("Win_SelectionWindow"),10)

If Win("Win_SelectionWindow").Exist(1) Then
Win("Win_SelectionWindow").TEdit("TEdit_SelectTemplate").RightClick
Wait (1)
If NOT Win("Win_SelectionBoxWin").Exist(1) Then
Win("Win_SelectionWindow").TEdit("TEdit_SelectTemplate").Click
End If
If Win("Win_SelectionBoxWin").Exist(1) Then
Win("Win_SelectionBoxWin").LBox("LBox_List").CellClick "ByTitle", strSingleTemplate, ""
Wait(1)
strContent = Win("Win_SelectionWindow").TEdit("TEdit_SelectTemplate").GetROProperty("content")
If strContent = strSingleTemplate Then
Call ReportEvent("Selection of Template", "Template " & Chr(34) & strSingleTemplate & Chr(34) & " has been selected successfully for the task " & Chr(34) & strTaskName & Chr(34), "PASS")
Else
Win("Win_SelectionWindow").TEdit("TEdit_SelectTemplate").RightClick
Wait (1)
If Win("Win_SelectionWindow").LBox("LBox_List").Exist(1) Then
Win("Win_SelectionWindow").LBox("LBox_List").CellClick "ByTitle", strSingleTemplate, ""
Wait(1)
strContent = Win("Win_SelectionWindow").TEdit("TEdit_SelectTemplate").GetROProperty("content")
If strContent = strSingleTemplate Then
Call ReportEvent("Selection of Template", "Template " & Chr(34) & strSingleTemplate & Chr(34) & " has been selected successfully for the task " & Chr(34) & strTaskName & Chr(34), "PASS")
Else
Call ReportEvent("Selection of Template", "Template " & Chr(34) & strSingleTemplate & Chr(34) & " could not be selected for the task " & Chr(34) & strTaskName & Chr(34) & ". Kindly check", "FAIL")
Exit For
End If
End If
End If
Wait(1)
Win("Win_SelectionWindow").PBut("PBut_OK").Click
Wait(1)
Call WaitForObject(Win("Win_SelectionWindow"),10)
If Win("Win_SelectionWindow").Exist(1) Then
Win("Win_SelectionWindow").TEdit("TEdit_Date").SetValue strValidationDate
Wait(1)
strContent = Win("Win_SelectionWindow").TEdit("TEdit_Date").GetROProperty("content")
If strContent = strValidationDate Then
Call ReportEvent("Set Totem Validation Date", "Validation date - " & strValidationDate & " - is successfully set while running for template " & Chr(34) & strSingleTemplate & Chr(34), "PASS")
Else
Call ReportEvent("Set Totem Validation Date", "Validation date - " & strValidationDate & " - is not set while running for template " & Chr(34) & strSingleTemplate & Chr(34) & ". Date set is " & strContent & ". Kindly check.", "FAIL")
End If
Win("Win_SelectionWindow").PBut("PBut_OK").Click
strStartTime = CStr(Now())
End If
Call ReportEvent("Run Task", "Running the task " & Chr(34) & strTaskName & Chr(34) & " by selecting the template " & Chr(34) & strSingleTemplate & Chr(34), "INFO")
verifyTaskStatus(strTaskName)
Else
Call ReportEvent("Selection of Template", "List box to select Template did not appear for the task " & Chr(34) & strTaskName & Chr(34) & ". Kindly check", "FAIL")
Exit For
End If
Else
Call ReportEvent("Open Template Selection Window", "Template Selection window did not open while trying to run the task " & Chr(34) & strTaskName & Chr(34) & ". Kindly check", "FAIL")
End If

If strStartTime<> -1 Then
intMins = DateDiff("n", strStartTime, strTaskEndTime)
If intMins < 5 Then
Call ReportEvent("ALERT MSG", "Task " & Chr(34) & strTaskName & Chr(34) & " with template " & Chr(34) & strSingleTemplate & Chr(34) & " completed in " & intMins & " mins which is very much before the expected time. Checking log file for more info", "FAIL")
strErrorLog = "<HTML><BODY>" & ReadTotemLogFile(strLogFilePath, strTaskEndTime) & "</BODY></HTML>"
Exit For
ElseIf Instr(lcase(strTaskStatus), "succeeded")<=0 Then
Call ReportEvent("ALERT MSG", "Task " & Chr(34) & strTaskName & Chr(34) & " with template " & Chr(34) & strSingleTemplate & Chr(34) & " has failed. Checking log file for more info", "FAIL")
strErrorLog = "<HTML><BODY>" & ReadTotemLogFile(strLogFilePath, strTaskEndTime) & "</BODY></HTML>"
Exit For
End If
strMailToList = ReadFromConfigFile("MAIL_TO")
If strMailToList = "" Then
Call ReportEvent("Send Error Log through Mail", "MAIL_TO list not found in cofig file - " & strTotemConfigFilePath & ". Kindly check", "FAIL")
Else
Call SendMail(strMailToList, "Totem Job Error Log", strErrorLog, "")
End If
End If
Next

End Function




'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: PerformTotemPrerequisite
'' Purpose					: this function will do all the prerequisite actions that needs to be performed before executing the totem task
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************

Function PerformTotemPrerequisite()

strConfigFilePathFrom = GetData("PerformTotemPrerequisite", "ConfigFilePathFrom")
strConfigFilePathTo = 	GetData("PerformTotemPrerequisite", "ConfigFilePathTo")
strFoldersToCreateFor = GetData("PerformTotemPrerequisite", "FoldersToCreateFor")
strInputFilesLocation = GetData("PerformTotemPrerequisite", "InputFilesLocation")

strProdFilesPath = ""
strTotemConfigFilePath = strConfigFilePathTo & "\" & Split(strConfigFilePathFrom,"\")(UBound(Split(strConfigFilePathFrom,"\")))

Call fn_CopyFolderOrFile(strConfigFilePathFrom, strConfigFilePathTo)

If Instr(strFoldersToCreateFor,",") Then
arrFoldersToCreateFor = Split(strFoldersToCreateFor,",")
intNoOfFolderPath = UBound(arrFoldersToCreateFor)
Else
intNoOfFolderPath = 0
End If

For i = 0 to intNoOfFolderPath
If intNoOfFolderPath>0 Then
strFolderPath = arrFoldersToCreateFor(i)
else
strFolderPath = strFoldersToCreateFor
End If

strLocation = ReadFromConfigFile(strFolderPath)

If strLocation <> "" Then

If Right(strLocation,1)="\" Then
strLocation = Left(strLocation,Len(strLocation)-1)
End If
Call fn_CreateFoldersInThisPath(strLocation)

If strProdFilesPath = "" Then
arrTempPath = Split(strLocation,"\")
For j = 0 to Ubound(arrTempPath)-1
strProdFilesPath = strProdFilesPath & arrTempPath(j) & "\"
Next

End If
If Instr(strLocation,"Submission")>0 Then
strQaFilesPath = strLocation
End If
If Instr(strLocation,"logs")>0 Then
strTotemLogFilePath = strLocation
End If
strLocation = ""

Else
Call ReportEvent("Finding folder location", "Unable to find folder location for the key : " & Chr(34) & strFolderPath & Chr(34) & " Kindly check", "FAIL")
End If


Next

Call fn_CopyFolderOrFile(strInputFilesLocation, strProdFilesPath)
strTempProdFilesPath = strProdFilesPath & Split(strInputFilesLocation,"\")(UBound(Split(strInputFilesLocation,"\")))
Call fn_RenameFolderOrFile(strTempProdFilesPath, "ProdFiles")
strProdFilesPath = strProdFilesPath & "ProdFiles"




End Function




'********************************************************************************************************************************************************************************************************************
''*******************************************************************************
'' Function/Procedure Name	: SendReportMail
'' Purpose					: this function will do all the prerequisite actions that needs to be performed before executing the totem task
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************

Function SendReportMail()

strReportMailTo = GetData("SendReportMail","MailTo")
strReportMailSubject = GetData("SendReportMail","MailSubject")	
strReportMailBody = GetData("SendReportMail","MailBody")


strReportMailBody = "Hi," & vbNewLine & vbNewLine & strReportMailBody & vbNewLine & vbNewLine


Call SendMail(strReportMailTo,strReportMailSubject,strReportMailBody,strGlobalComparisonResultPath)	

Call ReportEvent("Verification Mail"," A Mail is successfully sent to the desired group with latest  query result sheet attached with it","PASS")



End Function

'****************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: ProcessDealsInSpecifiedStatus
' Purpose					: This function will  process only those INS_TYPEs which the user will mention in the datasheet
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function ProcessDealsInSpecifiedStatus()

strListOfInsTypes =  GetData("ProcessDealsInSpecifiedStatus","DealsToBeProcessed")
strDealsStatus = GetData("ProcessDealsInSpecifiedStatus", "DealStatus")
strQueryToFetchDeaNum = GetData("ProcessDealsInSpecifiedStatus","QueryToFetchDealsAndInsType")
strWindowNames = GetData("ProcessDealsInSpecifiedStatus","DealDetailWindowNames")
strXmlQuery = GetData("ProcessDealsInSpecifiedStatus", "QueryToValidateXmlGeneration")
strDealStatusQuery = GetData("ProcessDealsInSpecifiedStatus", "QueryToValidateEndurDealStatus")
strStatusQuery =  GetData("ProcessDealsInSpecifiedStatus", "QueryToFetchScritturaResponse")
strDealFieldsToBeValidated = GetData("ProcessDealsInSpecifiedStatus","NewDealFieldsToBeValidated")
strDealFieldsValue = GetData("ProcessDealsInSpecifiedStatus","NewDealFieldsValue")
strDealsWithNoTranInfoInDetails = GetData("ProcessDealsInSpecifiedStatus","DealsWithNoTranInfoInDetails")
strChildDealInsType = GetData("ProcessDealsInSpecifiedStatus", "ChildInsType")
'strNoOfChildDeals = GetData("ProcessDealsInSpecifiedStatus", "ChildDealsCount")

strResultSheetPath = Environment("strResourceRootPath") & "\QueryResults\"
strResultSheetName = "DealsWithSpecifiedStatus_" & Now

strQueryResultPath = CreateSheet(strResultSheetPath,strResultSheetName)

Call fillHeadersInQueryResultSheet(strQueryResultPath, "Sheet1",1, 1,"Deal_Num")
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",1, 2,"Ins_Type")
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1", 1,3,"NewDealNumber")
Call fillHeadersInQueryResultSheet(strQueryResultPath,"Sheet1",1,4,"NewTranNumber")

flagUserListedInsTypes = True
intUserListedInsTypes = 0

If strDealsWithNoTranInfoInDetails <> "" Then
If Instr(strDealsWithNoTranInfoInDetails, ",")>0 Then
arrTemp = Split(strDealsWithNoTranInfoInDetails, ",")
intDealsWithNoTranInfoInDetails = UBound(arrTemp) + 1
Else
Dim arrTemp(0)
arrTemp(0) = strDealsWithNoTranInfoInDetails
intDealsWithNoTranInfoInDetails = UBound(arrTemp) + 1
End If
Else
intDealsWithNoTranInfoInDetails = 0
End If

If intDealsWithNoTranInfoInDetails > 0 Then
ReDim Preserve arrDealsWithNoTranInfoInDetails(intDealsWithNoTranInfoInDetails-1)
For i = 0 to UBound(arrTemp)
arrDealsWithNoTranInfoInDetails(i) = arrTemp(i)
Next
End If

If strListOfInsTypes <> "" Then

If Instr(strListOfInsTypes,",")>0 Then
arrListOfDeals = Split(strListOfInsTypes,",")
intUserListedInsTypes = UBound(arrListOfDeals) + 1
else
Dim arrListOfDeals(0)
arrListOfDeals(0) = strListOfInsTypes
intUserListedInsTypes = 1
End If

'		If Instr(strChildDealInsType, ",")>0 Then
'			arrChildDealInsType = Split(strChildDealInsType, ",")
'		Else
'			Dim arrChildDealInsType(0)
'			arrChildDealInsType(0) = strChildDealInsType
'		End If
'
'		If Instr(strNoOfChildDeals, ",")>0 Then
'			arrNoOfChildDeals = Split(strNoOfChildDeals, ",")
'		Else
'			Dim arrNoOfChildDeals(0)
'			arrNoOfChildDeals(0) = strNoOfChildDeals
'		End If

If Instr(strDealsStatus, ",")>0 Then
arrDealsStatus = Split(strDealsStatus, ",")
Else
Dim arrDealsStatus(0)
arrDealsStatus(0) = strDealsStatus
End If

If UBound(arrListOfDeals) = UBound(arrDealsStatus) Then

arrQuerySplit = Split(strQueryToFetchDeaNum, "NAME=")

intRowNumber = 2
For i = 0 to intUserListedInsTypes - 1
If arrListOfDeals(i) <> "" AND arrDealsStatus(i) <> "" Then

strTempInsType = arrListOfDeals(i)
If Instr(Right(strTempInsType,2),"_") Then
strInsType = Left(strTempInsType,Len(strTempInsType)-2)
Else
strInsType = strTempInsType
End If            			

strStartingInsType = strInsType
'strInsTypecode = FetchInsTypeNumber(strInsType)
strQuery = arrQuerySplit(0) & "NAME='" & strInsType & "'" & arrQuerySplit(1)
runAdHocQuery(strQuery)	

If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").Exist(1) Then
If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow") > 1 Then

strDealTrackingNo = GetMaxDealNum()
Win("Win_AdHocQueryViewer").Terminate

Call ReportEvent("Fetch deal number for the given INS_TYPE", "INS_TYPE = " & strInsType & "; Max deal No = " & strDealTrackingNo, "PASS")
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNumber,1,strDealTrackingNo)
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNumber,2,strInsType)

strFieldNames = ""
strFieldValues = ""
strFieldNames = getDealData("CDBO_DealDataSheet","FieldNames",strTempInsType,strDealTrackingNo)
strFieldValues = getDealData("CDBO_DealDataSheet","FieldValues",strTempInsType,strDealTrackingNo)
If strFieldNames <> "" Then

If Not Win("Win_TradingManager").Exist(3) Then
Call fn_ClickOnMainMenuObject("Trading")
Call WaitForObject(Win("Win_TradingManager"),20)
End If

Call executeCloseDeal(strDealTrackingNo)

strSpecifiedDealStatus = arrDealsStatus(i)
If UCase(strInsType)="COM" Then
Call ReportEvent("Processing Deal","The Instrument type is of  " & Chr(34) & strInsType & Chr(34) & " type , so now it's child deals will be processed and then the composer deal will be processed ","INFO")
'									strChildDealNo = ""
'									If UBound(arrChildDealInsType) >= i Then
'										strChildInsType = MultilineTrim(arrChildDealInsType(i))
'									Else
'										strChildInsType = ""
'									End If
'									If UBound(arrNoOfChildDeals) >= i Then
'										strChildDealsCount = MultilineTrim(arrNoOfChildDeals(i))
'									Else
'										strChildDealsCount = ""
'									End If
'									
'									If strChildInsType <> "" Then
'										strQuery = arrQuerySplit(0) & "NAME='" & strChildInsType & "'" & arrQuerySplit(1)
'										Call runAdHocQuery(strQuery)
'										If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").Exist(1) Then
'											If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow") > 1 Then
'												strChildDealNo = GetMaxDealNum()
'												Win("Win_AdHocQueryViewer").Terminate
'												Call  handleAlerts()
'											Else
'												Call ReportEvent("Fetch the MAX(deal_num)", "There are no deals for INS_TYPE " & strChildInsType & ". Hence cannot continue to process this INS_TYPE", "FAIL")
'											End If
'										Else
'											Call ReportEvent("Process User Listed Deals", "Query window which was supposed to contain MAX(deal_num) of INS_TYPE " & strChildInsType & " in not open. So cannot further process the deal", "FAIL")
'										End If
'									End If
Call CreateComposerDeal(strWindowNames,strFieldNames,strFieldValues,strChildDealInsType)
Else
Call ReportEvent("Processing Deal","Now the deal of instrument type " & Chr(34) & strInsType & Chr(34) & " will be processed in the status " & Chr(34) & strSpecifiedDealStatus & Chr(34),"INFO")
If intDealsWithNoTranInfoInDetails > 0 Then
Call SetTranInfoFlag(strInsType)
If flagFillTranInfoFromTradingManager Then
Call createDealInNewStatusAndFillTranInfo(strWindowNames,strFieldNames,strFieldValues)
End If
Else
flagFillTranInfoFromTradingManager = false
End If

If flagFillTranInfoFromTradingManager = false Then
flagItemFound = openDealDetailPage(strDealTrackingNo)
Call setWindowTypeAndClearInstrument(strWindowNames)
Else
flagItemFound = openDealDetailPage(strNewDealTrackingNo)
End If
If flagItemFound=true Then
flagFillTranInfoFromTradingManager = false
Call EnterDealDetails(strFieldNames,strFieldValues)
End If

End If

If  strNewDealTrackingNo <> ""  And  strNewDealTrackingNo <> "0" And Instr(strExpectedDealStatus, strDealStatus) > 0 Then

dictDealsStatus.Add strNewDealTrackingNo, strSpecifiedDealStatus
If strNewDealTrackingNo <> strNewTranTrackingNo Then
dictDealsStatus.Add CStr(strNewTranTrackingNo), strSpecifiedDealStatus
End If

Call ReportEvent("Creating New Deal","Successfully processed the deal " & Chr(34) & strDealTrackingNo & Chr(34) & " of INS_TYPE " & Chr(34) & strInsType & Chr(34) & "to the " & Chr(34) & strExpectedDealStatus & Chr(34) & " status. New Deal Tracking No is " & Chr(34) & strNewDealTrackingNo & Chr(34),"PASS")
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNumber,3,strNewDealTrackingNo)
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNumber,4,strNewTranTrackingNo)
Call executeCloseDeal(strNewDealTrackingNo)
Call verifyXmlGeneration(strQueryResultPath,strXmlQuery,strNewDealTrackingNo,intRowNumber,5)
'Call verifyDealStatusInEndur(strDealStatusQuery,strNewTranTrackingNo)
Else
Call ReportEvent("Creating New Deal","Unable to create new deal for deal no " & Chr(34) & strDealTrackingNo & Chr(34) & " of instrument type " & Chr(34) & strInsType & Chr(34) & " due to above error ","FAIL")
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNumber,3,"ERROR")
End If

strSpecifiedDealStatus = ""
Else
Call ReportEvent("Getting data for the Deal","The deal no " & Chr(34) & strDealTrackingNo &  Chr(34) & " for ins type " & Chr(34) & strInsType &  Chr(34) & " is not executed as the row execution in the Data sheet is made false, Kindly check","INFO") 
Call writeDataIntoExcel(strQueryResultPath,"Sheet1",intRowNumber,3,"SKIPPED")
End If
Else
Call ReportEvent("Fetch the MAX(deal_num)", "There are no deals for INS_TYPE " & strInsType & ". Hence cannot continue to process this INS_TYPE", "FAIL")
End If
Else
Call ReportEvent("Process User Listed Deals", "Query window which was supposed to contain MAX(deal_num) of INS_TYPE " & strInsType & " in not open. So cannot further process the deal", "FAIL")
End If

intRowNumber = intRowNumber + 1
Else
Call ReportEvent("Process Deals in Specified status", "Ins_Type = " & arrListOfDeals(i) & ", DealStatus = " & arrDealsStatus(i) & ". Cannot process this deal.", "FAIL")
End If
next
strStartingInsType = ""


Call validateTranInfo(strQueryResultPath,strStatusQuery,strDealFieldsToBeValidated,strDealFieldsValue,9)

Win("Win_TradingManager").Terminate
Else
Call ReportEvent("Process Deals in Specified status", "No. of Ins_Types provided sould be equal to number of Deals Status specified", "FAIL")
Environment("AbortTestcase") = True		
End If	
Else
Call ReportEvent("Process User listed Ins_Types", "There are no Ins_Types in the list to process", "FAIL")
Environment("AbortTestcase") = True
End If

Call insertColumnTypeInQueryResult(strQueryResultPath)

End Function



'**************************************************************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: DefineSimulationResult
' Purpose					: defines the simulation result for iLTR process
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function DefineSimulationResult()

	strFullFilePath = GetData(Environment("currentKeyWord"), "FilePath")
	strEnvName = GetData(Environment("currentKeyWord"), "EnvName")

	If NOT Win("Win_AdminManager").Exist(2) Then
		Call fn_ClickOnMainMenuObject("Admin")
		Call WaitForObject(Win("Win_AdminManager"),20)
	End If

	If Win("Win_AdminManager").Exist(1) Then
		Wait 1
		Win("Win_AdminManager").NBook("NBook_Tabs").ClickTab "Data Model Extension"
		Wait 1
		Win("Win_AdminManager").TBut("TBut_SimulationResConfig").Click
		Wait 1
		Call WaitForObject(Win("Win_SimulationResConfig"), 20)

	If Win("Win_SimulationResConfig").Exist(1) Then
		Win("Win_SimulationResConfig").NBook("NBook_Tabs").ClickTab "Simulation Result Definitions"
		Wait 1
		Win("Win_SimulationResConfig").MBar("MBar").Select "&File~&Import User Definitions	"
		Wait 1
		Call WaitForObject(Win("Win_SimulationResDefinition"), 20)
		
		If Win("Win_SimulationResDefinition").Exist(2) Then
			Call ReportEvent("Launch " & Chr(34) & "Import User Definition" & Chr(34) & " Window", "Window launched successfully", "PASS")
'			intMaxRow = Win("Win_SimulationResDefinition").LBox("LBox_ImportedFilesList").GetROProperty("maxrow")
'                If intMaxRow > 0 Then
'                    For j = 1 To intMaxRow
'                        'Win("Win_SimulationResDefinition").LBox("LBox_ImportedFilesList").CellClick "ByIndx", "1", "1"
'                        Win("Win_SimulationResDefinition").Activate
'                        Win("Win_SimulationResDefinition").Click 68,77
'                        Wait 1
'                        Call fn_ClickButton(Win("Win_SimulationResDefinition"), Win("Win_SimulationResDefinition").PBut("PBut_GenericButton"), "Remove")
'                        Wait 1
'                    Next
'                End If

'				Call fn_ClickButton(Win("Win_SimulationResDefinition"), Win("Win_SimulationResDefinition").PBut("PBut_GenericButton"), "Add")
'				Wait 1
'				
'				Window("Win_OIWindow").SetTOProperty "regexpwndtitle", "(.*)Import"
'				Window("Win_OIWindow").RefreshObject
'				Call WaitForObject(Window("Win_OIWindow").Dialog("Dialog_Select"), 20)
'				If Window("Win_OIWindow").Dialog("Dialog_Select").Exist(2) Then
'					Window("Win_OIWindow").Dialog("Dialog_Select").WinEdit("WinEdit_FileName").Set strFullFilePath
'					Wait 1
'					Window("Win_OIWindow").Dialog("Dialog_Select").WinObject("WinObj_Open").Click
'
'					If Dialog("Dialog_WindowsError").Exist(2) Then
'						strErrorMsg = Dialog("Dialog_WindowsError").Static("StaticText").GetROProperty("text")
'						'Call ReportEvent("Import Simulation Result Definition", "Error popup with msg - " & strErrorMsg, "FAIL")
'						print "something wrong with path"
'						Dialog("Dialog_WindowsError").WinButton("WinButton_OK").Click
'					End If
'					Window("Win_OIWindow").Dialog("Dialog_Select").WinButton("WinBtn_Cancel").Click
'				End If
'				Wait 1
'				intMaxRow = Win("Win_SimulationResDefinition").LBox("LBox_ImportedFilesList").GetROProperty("maxrow")
'				
'				If intMaxRow >= 1 Then
'					'Call ReportEvent("Import Simulation Result Definition", "Simulation Result Definition imported successfully", "PASS")
'					print "import successful"
					
'					Win("Win_SimulationResDefinition").LBox("LBox_ImportedFilesList").CellClick "ByIndx", CStr(intMaxRow), "1"
'					Win("Win_SimulationResDefinition").Activate
	'                    Win("Win_SimulationResDefinition").Click 68,77
	
					strSimResPath = "D:\OpenLink\" & strEnvName & "\sysdir\import"
					
					Call fn_CreateFoldersInThisPath(strSimResPath)
					
					strSimResFilePath = strSimResPath & "\user_res_def.imp"
					
					On error resume next
					Set objFSO = CreateObject("Scripting.FileSystemObject")
					
					If objFSO.FileExists(strSimResFilePath) Then
						objFSO.DeleteFile strSimResFilePath, True
					End If
					
					objFSO.CopyFile strFullFilePath, strSimResFilePath, True
					Set objFSO = Nothing
					On Error goto 0

					Wait 1
					Win("Win_SimulationResDefinition").MBar("MBar").Select "&Execute"
					Call WaitForObject(Win("Win_SimulationResDefinition"), 10)
					
					strImportStatus = Win("Win_SimulationResDefinition").TEdit("TEdit_ImportStatus").GetROProperty("content")

					If Instr(LCase(strImportStatus), "import complete")>0 Then
						Call ReportEvent("Import Simulation Result Definition", "Import of the file - " & strSimResFilePath & " - is completed successfully", "PASS")
					Else
						Call ReportEvent("Import Simulation Result Definition", "Import of the file - " & strSimResFilePath & " - failed with the message - " & strImportStatus & ". Kindly check.", "FAIL")
						Environment("AbortExecution") = True
					End If

'				Else
					'Call ReportEvent("Import Simulation Result Definition", "Looks like file did not get imported from the given path.", "FAIL")
'					Environment("AbortExecution") = True
'				End If

				Win("Win_SimulationResDefinition").Terminate
				Call handleAlerts()
			Else	
				Call ReportEvent("Import Simulation Result Definition", "Window to import Simulation Result Definition did not launch", "FAIL")
				Environment("AbortExecution") = True

			End If
			Win("Win_SimulationResConfig").IBut("IBut_Save").Click
			Call ReportEvent("Save the changes in " & Chr(34) & "Simulation Result Definition" & Chr(34) & " window", "Clicked on Save button", "INFO")
			Call handleAlerts()
			Call WaitForObject(Win("Win_SimulationResConfig"), 10)

			Win("Win_SimulationResConfig").Terminate
			Call handleAlerts()
			
		Else
			Call ReportEvent("Import Simulation Result Definition", "Simulation Result Configuration window did not launch", "FAIL")
			Environment("AbortExecution") = True	
		End If

		Win("Win_AdminManager").Terminate
		Call handleAlerts()
	Else
		Call ReportEvent("Import Simulation Result Definition", "Admin Manager window did not launch", "FAIL")
		Environment("AbortExecution") = True
	End If
End Function

'********************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: iLTR_AdminManagerSettings
' Purpose					: performs Admin Manager settings for iLTR process to be run
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function AdminManagerSettings()

	strEnvName = GetData(Environment("currentKeyWord"),"EnvName")
	strTableName = GetData(Environment("currentKeyWord"), "TableName")
	strUserTableFields = GetData(Environment("currentKeyWord"), "TableFields")
	
	flagReloginRequired = False
	
	sUserTableFields = strUserTableFields
	iFieldCount = UBound(Split(strUserTableFields, ","))+1
	sUserTableFields = "," & sUserTableFields & ","
	
'	strWindName = "Olf.MasterCentral.MCForm:Endur V10.0: Server " & LCase(strEnvName) & ", Database gold, User.*"
'	SwfWindow("Window_EndurMainWindow").SetTOProperty "regexpwndtitle", strWindName
'	SwfWindow("Window_EndurMainWindow").RefreshObject

	Call fn_ClickOnMainMenuObject("Admin")
	Call WaitForObject(Win("Win_AdminManager"),20)

	If Win("Win_AdminManager").Exist(1) Then
		Win("Win_AdminManager").NBook("NBook_Tabs").ClickTab "General Administration"
		
		If Win("Win_AdminManager").TBut("TBut_SystemWideConfig").Exist(1) Then
			Win("Win_AdminManager").TBut("TBut_SystemWideConfig").Click
		End If
		Call WaitForObject(Win("Win_SystemWideConfig"), 20)

		If Win("Win_SystemWideConfig").Exist(1) Then
			Call ReportEvent("Luanch System Wide Configuration window","Window opened successfully","PASS")

			Call fn_SelectVariable_SystemWideConfig("Administration,Database", "AB_DB_SERVER_NAME")
			Wait 1

			strProperty = Win("Win_SystemWideConfig").TArea("TArea_SelectedVariable").GetTOProperty("name")
			Win("Win_SystemWideConfig").TArea("TArea_SelectedVariable").SetTOProperty "name", strProperty & "AB_DB_SERVER_NAME"
			Win("Win_SystemWideConfig").TArea("TArea_SelectedVariable").RefreshObject

			If Win("Win_SystemWideConfig").TArea("TArea_SelectedVariable").Exist(1) Then
				strCurrVal = Win("Win_SystemWideConfig").LBox("LBox_Description").GetCellValue("ByTitle","[SITE DEFAULT]","User Value")

				If LCase(strCurrVal) <> LCase(strEnvName) Then
					Win("Win_SystemWideConfig").LBox("LBox_Description").CellClick "ByTitle","[SITE DEFAULT]","User Value"
					Win("Win_SystemWideConfig").LBox("LBox_Description").SetCellValue "ByTitle","[SITE DEFAULT]","User Value", strEnvName
					Win("Win_SystemWideConfig").IBut("IBut_Save").Click
					flagReloginRequired = True
					Wait 1
					Call handleAlerts()
					
	
'					If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
'						strAlertMsg = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
'	
'						Call ReportEvent("Alert Message","Alert msg popped up with the text - " & strAlertMsg,"INFO")
'						SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
'	
'						If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
'							strAlertMsg = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
'							Call ReportEvent("Alert Message","Alert msg popped up with the text - " & strAlertMsg,"INFO")
'							SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
'						End If
	
					strValue = Win("Win_SystemWideConfig").LBox("LBox_Description").GetCellValue("ByTitle","[SITE DEFAULT]","User Value")
	
					If LCase(strValue) = LCase(strEnvName) Then
						Call ReportEvent("Set Environemnt name User_Value field to " & Chr(34) & strEnvName & Chr(34) & " in SystemWideConfiguration window","Field value set successfully","PASS")
					Else
						Call ReportEvent("Set Environemnt name User_Value field to " & Chr(34) & strEnvName & Chr(34) & " in SystemWideConfiguration window","Field value is NOT set","FAIL")
						Environment("AbortExecution") = True
					End If
'					Else	
'						Call ReportEvent("Handle Alert Msg","Expected Alert message did NOT popup","INFO")
'					End If
				Else
					Call ReportEvent("Set Environemnt name User_Value field to " & Chr(34) & strEnvName & Chr(34) & " in SystemWideConfiguration window","Field value is already set","PASS")
				End If
			Else
				Call ReportEvent("Select Variable Name " & Chr(34) & "AB_DB_SERVER_NAME" & Chr(34), "Variable NOT selected", "FAIL")
				Environment("AbortExecution") = True
			End If

			Win("Win_SystemWideConfig").Terminate
	
			If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
				SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
			End If
		End If

		Win("Win_AdminManager").Terminate
		Wait 2
		
	End If
	
	Call fn_ClickOnMainMenuObject("Admin")
	Call WaitForObject(Win("Win_AdminManager"),20)
	
	Win("Win_AdminManager").NBook("NBook_Tabs").ClickTab "Data Model Extension"
	If Win("Win_AdminManager").TBut("TBut_UserTables").Exist(1) Then
		Win("Win_AdminManager").TBut("TBut_UserTables").Click
	End If
	'Call WaitForObject(Win("Win_UserTable"), 20)

	'If Win("Win_UserTable").Exist(1) Then
		Win("Win_UserTable").PBut("PBut_LoadUserTable").Click
		Wait 1

		Win("Win_ListWindow").LBox("LBox_List").CellClick "ByTitle", strTableName, ""
		wait 1

		strAppTableName = Win("Win_UserTable").TEdit("TEdit_TableName").GetROProperty("content")

		If strAppTableName=strTableName  Or Instr(strAppTableName,strTableName)>0 Then
		
			intMaxRow = Win("Win_UserTable").LBox("LBox_UserTable").GetROProperty("maxrow")
			flagDone = False
			iFieldsFoundCount = 0
			
			flagNeedSave = False
			For i = 0 to intMaxRow
				strVal = Win("Win_UserTable").LBox("LBox_UserTable").GetCellValue("ByIndxByTitle", CStr(i), "key_name")
				If strVal <> "" Then
					strCompareVal = "," & UCase(strVal) & ","
					If Instr(UCase(sUserTableFields), strCompareVal)>0 Then
						Wait 2
						strCurValue = Win("Win_UserTable").LBox("LBox_UserTable").GetCellValue("ByIndxByTitle", CStr(i), "key_value")
	
						If LCase(Trim(strCurValue)) <> LCase("Endur." & strEnvName) Then
							Win("Win_UserTable").LBox("LBox_UserTable").SetCellValue "ByIndxByTitle", CStr(i), "key_value", "Endur." & strEnvName
							iFieldsFoundCount = iFieldsFoundCount+1
							Wait 2
							strNewVal = Win("Win_UserTable").LBox("LBox_UserTable").GetCellValue("ByIndxByTitle", CStr(i), "key_value")
							
							If LCase(strNewVal) = LCase("endur." & strEnvName) Then
								Call ReportEvent("Set the value Endur." & strEnvName & " for the field " & UCase(strVal),"Field value set successfully","PASS")
							Else
'								Win("Win_UserTable").LBox("LBox_UserTable").SetCellValue "ByIndxByTitle", CStr(i), "key_value", "Endur." & LCase(strEnvName)
'								Wait 1
'								strNewVal = Win("Win_UserTable").LBox("LBox_UserTable").GetCellValue("ByIndxByTitle", CStr(i), "key_value")
'								If LCase(strNewVal) = LCase("endur." & strEnvName) Then
'									Call ReportEvent("Set the value Endur." & LCase(strEnvName) & " for the field " & UCase(strVal),"Field value set successfully","PASS")
'								Else
									Call ReportEvent("Set the value Endur." & strEnvName & " for the field " & UCase(strVal),"Field value is NOT set","FAIL")
									Environment("AbortTestcase") = True
'								End If
							End If
							flagNeedSave = True
							flagReloginRequired = True
						Else
							Call ReportEvent("Set the value Endur." & strEnvName & " for the field " & UCase(strVal),"Field value already set","PASS")
							iFieldsFoundCount = iFieldsFoundCount+1						
						End If
					End If
				End If
				
				If iFieldsFoundCount = iFieldCount Then
					flagDone = True
					Exit For
				End If			
			Next

			If NOT flagDone Then
				Call ReportEvent("Set the value Endur." & strEnvName & " for the fields " & strUserTableFields, "Not all fields were found","FAIL")
				Environment("AbortTestcase") = True
			End If

			If flagNeedSave Then
				Win("Win_UserTable").PBut("PBut_Save").Click
				Call handleAlerts()				
			End If

		Else
			Call ReportEvent("Set the value Endur." & strEnvName & " for the fields " & strUserTableFields, "Table found","FAIL")
			Environment("AbortTestcase") = True					
		End If
		
'		Win("Win_UserTable").Terminate
'		Call handleAlerts()
		Win("Win_AdminManager").Terminate
		Call handleAlerts() 
	'End If
	
	If flagReloginRequired Then
		Call Logout()
		Call Login()
	End If


End Function

'********************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: iLTR_ImportScriptFiles
' Purpose					: Imports specified scripts, sets Type/Category and Saves then with specified name
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function ImportScriptFiles()

	strFilesPath = GetData(Environment("currentKeyWord"),"FilePath")
	strScriptsToImport = GetData(Environment("currentKeyWord"),"ScriptsToImport")
	strFieldToSet = GetData(Environment("currentKeyWord"),"FieldToSet")
	strFieldValues = GetData(Environment("currentKeyWord"),"FieldValues")
	strFileNames = GetData(Environment("currentKeyWord"), "SaveAsScriptNames")
	
	If Instr(strScriptsToImport, ",")>0 Then
		flagImportSuccessful = fn_BulkImportScripts(strFilesPath, strScriptsToImport, strFieldToSet, strFieldValues, strFileNames)
	Else
		flagImportSuccessful = ImportScripts(strFilesPath, strScriptsToImport, strFieldValues, strFieldToSet, strFileNames)
	End If
	
	If NOT flagImportSuccessful Then
		Call ReportEvent("Import Scripts", "Scripts import was not successful", "Fail")
		Environment("AbortExecution") = True
	End If

End Function

'********************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: iLTR_MakeServerNodeSettings
' Purpose					: Adds Server Nodes in Services Mgr and restarts the services if not started
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function MakeServerNodeSettings()

	strNodeNames = GetData("MakeServerNodeSettings", "ServerNodeNames")
	strOSLoginNames = GetData("MakeServerNodeSettings", "OSLoginNames")
	strHostNames = GetData("MakeServerNodeSettings", "HostNames")
	strEndurLoginNames = GetData("MakeServerNodeSettings", "EndurLoginNames")
	
	strServicesName = GetDataFromSheet("GenericDataSheet", "ServiceNames", "Execute = 'True'")
    strHostNames = GetDataFromSheet("GenericDataSheet", "HostNames", "Execute = 'True'")
	
	Call fn_StopServices(strServicesName, strHostNames)
	Wait(5)
	flagSuccess = fn_AddServerNodesInEndur(strNodeNames, strOSLoginNames, strHostNames, strEndurLoginNames)
	
	Call fn_StartServices(strServicesName, strHostNames)
	Wait(5)
	
	If NOT flagSuccess Then
		Environment("AbortExecution") = True
	End If
End Function


'********************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: CheckAndCreateDATFile
' Purpose					: Check for the given file & creates the file if not present.Customized for creating iLTR dat file
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function CheckAndCreateDATFile()

	'strFolderPath = GetData("CheckAndCreateDATFile", "FolderPath")
	strFileName = GetData(Environment("currentKeyWord"), "FileName")
	strServer = GetData(Environment("currentKeyWord"), "Server")
	strEnvName = GetData(Environment("currentKeyWord"), "EnvName")
	
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
	On Error Resume Next

	strPrevBusinessDate = GetColFromConfig("prev_business_date")
	strServerIPAddress = mapIPAddress(strServer)
	strCurrIPAddress = fn_GetThisSystemIPAddress()
	
			
	If CStr(strServerIPAddress) = CStr(strCurrIPAddress) Then
		strParentFolder = "d$\OpenLink\" & strEnvName & "\outdir\reports"
	Else
		'strParentFolder = "\\" & strServerIPAddress & "\OpenLink\" & strEnvName & "\outdir\reports"
		strParentFolder = "\" & "\wupwa97a0211\d$" & "\OpenLink\" & strEnvName  & "\outdir\reports"
	End If
	
	If strPrevBusinessDate <> "" Then

		strPrevDayFolder = GetDateFolderName(CDate(strPrevBusinessDate))
		
		strPrevDayFolderPath = strParentFolder & "\" & strPrevDayFolder
		
		If NOT objFSO.FolderExists(strPrevDayFolderPath) Then
			Set objFolder = objFSO.GetFolder(strParentFolder)
			If Not objFolder.Attributes And 1 Then
				objFSO.CreateFolder(strPrevDayFolderPath)
			Else
				objFolder.Attributes = objFolder.Attributes - 1
				objFSO.CreateFolder(strPrevDayFolderPath)
				objFolder.Attributes = objFolder.Attributes + 1
			End If
			Set objFolder = Nothing
		End If
		
		strFullPath = strPrevDayFolderPath & "\LTRREPORT"
		'Call fn_CreateFoldersInThisPath(strFullPath)
		
		If NOT objFSO.FolderExists(strFullPath) Then
			Set objFolder = objFSO.GetFolder(strPrevDayFolderPath)
			If Not objFolder.Attributes And 1 Then
				objFSO.CreateFolder(strFullPath)
			Else
				objFolder.Attributes = objFolder.Attributes - 1
				objFSO.CreateFolder(strFullPath)
				objFolder.Attributes = objFolder.Attributes + 1
			End If
			Set objFolder = Nothing
		End If				
		
		If objFSO.FolderExists(strFullPath) Then
			strFilePath = strFullPath & "\" & strFileName
			
			If NOT objFSO.FileExists(strFilePath) Then
				objFSO.CreateTextFile strFilePath
				
				If objFSO.FileExists(strFilePath) Then
					Call ReportEvent("Create " & strFileName & " file if not present", "File created successfully in the path - " & strFullPath, "PASS")
				Else
					Environment("AbortExecution") = true
					If Err.Number <> 0 Then
						Call ReportEvent("Create " & strFileName & " file if not present", "Error while creating file : " & Err.Description, "FAIL")
					Else
						Call ReportEvent("Create " & strFileName & " file if not present", "File creation NOT successful", "FAIL")
					End If
				End If
			Else
				Call ReportEvent("Create " & strFileName & " file if not present", "File is already present in the path - " & strFullPath, "PASS")
			End If
		Else
			Call ReportEvent("Create folder path " & strFullPath, "Folder path is not created", "FAIL")
			Environment("AbortExecution") = true
		End If
		On Error Goto 0
		
		Set objFSO = Nothing
	Else
		Call ReportEvent("Create previous date's folder path", "Unable to get Previous Business Date from Endur", "FAIL")
		Environment("AbortExecution") = true
	End If

End Function


'********************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: VerifyFilesGeneration()
' Purpose					: Check for the given file & creates the file if not present.Customized for creating iLTR dat file
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function VerifyFilesGeneration()

	'strFolderPath = GetData(Environment("currentKeyWord"), "FolderPath")
	strFileNames = GetData(Environment("currentKeyWord"), "FileName")
	strParentSubFolder = GetData(Environment("currentKeyWord"), "ParentSubFolder")
	strServer = GetData(Environment("currentKeyWord"), "Server")
	strEnvName = GetData(Environment("currentKeyWord"), "EnvName")

	arrFiles = Split(strFileNames, ",")

	If strPublicBusinessDate = "" Then
		strPublicBusinessDate = GetColFromConfig("business_date")
	End If
	
	strServerIPAddress = mapIPAddress(strServer)
	strCurrIPAddress = fn_GetThisSystemIPAddress()
	
	If CStr(strServerIPAddress) = CStr(strCurrIPAddress) Then
		strParentFolder = "d$\OpenLink\" & strEnvName
	Else
		'strParentFolder = "\" & strServerIPAddress & "\OpenLink\" & strEnvName
		strParentFolder = "\" & "\wupwa97a0211\d$" & "\OpenLink\" & strEnvName
	End If

	Set objFSO = CreateObject("Scripting.FileSystemObject")

	On Error Resume Next
	strTodaysFolder = GetDateFolderName(CDate(strPublicBusinessDate))
	strFullPath = strParentFolder & "\outdir\reports\" & strTodaysFolder & "\" & strParentSubFolder
	
	If objFSO.FolderExists(strFullPath) Then
		For each strFile In arrFiles
			strFilePath = strFullPath & "\" & strFile
		
			If objFSO.FileExists(strFilePath) Then
				Call ReportEvent("Verify File Generation", "File " & Chr(34) & strFile & Chr(34) & " is generated successfully in the path - " & strFullPath, "PASS")
			Else
				Call ReportEvent("Verify File Generation", "File " & Chr(34) & strFile & Chr(34) & " is NOT generated in the path - " & strFullPath, "FAIL")
				Environment("AbortExecution") = true
			End If
		Next
	Else
		Call ReportEvent("Verify File Generation", "Folder path - " & strFullPath & " does not exist", "FAIL")
		Environment("AbortExecution") = true
	End If
End Function


'**********************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: ImportWorkflows()
' Purpose					: Check for the given file & creates the file if not present.Customized for creating iLTR dat file
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function ImportWorkflows()

	strWorkflowPath = GetData(Environment("currentKeyWord"), "FilePath")

	If Not Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").Exist(2) Then
		Call fn_ClickOnMainMenuObject("Services Mgr")
		Call WaitForObject(Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement"),20)
		wait 3
		Win("Win_ServicesManager").NBook("Tabs_ServiceManager_WorkflowManagement").ClickTab("Workflow Management")
		Call WaitForObject(Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement"),20)
	End If
	
	If Win("Win_ServicesManager").LBox("LBox_ServiceManager_WorkflowManagement").Exist(2) Then
		Win("Win_ServicesManager").MBar("MBar_ServiceManager_MenuBar").Select "&File~&Import Workflow	"
		Wait 1
		Call WaitForObject(Win("Win_SelectWorkflowToImport"), 10)
		
		If Win("Win_SelectWorkflowToImport").Exist(2) Then
			Win("Win_SelectWorkflowToImport").TEdit("TEdit_FileName").SetValue strWorkflowPath
			Wait 3
			Win("Win_SelectWorkflowToImport").PBut("PBut_Import").Click
			Wait 1
			Call handleAlerts()
			
			Call WaitForObject(Win("Win_ImportWorkflows").LBox("LBox_ImportedScripts"), 120)
		
			If Win("Win_ImportWorkflows").Exist(2) Then
				Call ReportEvent("Import Workflow", "Importing from path - " & strWorkflowPath, "INFO")
				arrTabs = Split("Scripts,Tasks,Workflows", ",")
			
				For k = 0 to UBound(arrTabs)
					
					Wait (5)
					strTab = arrTabs(k)
					Win("Win_ImportWorkflows").NBook("NBook_Tabs").ClickTab strTab
					Wait 5
					If strTab = "Workflows" Then
						Wait 2
						Call WaitForObject(Win("Win_ImportWorkflows").LBox("LBox_ImportedWorkflows"), 120)
					End If
					Call fn_ClickButton_2(Win("Win_ImportWorkflows"), Win("Win_ImportWorkflows").PBut("PBut_GenericButton"), strTab & ",Process")
					Wait 2
						
					If strTab <> "Workflows" Then
						While SwfWindow("Win_ProgressWindow").Exist(2)
							Wait(5)
							If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
								Call handleAlerts()
								If k > 0 Then
									Win("Win_ImportWorkflows").NBook("NBook_Tabs").ClickTab arrTabs(k-1)
									Wait 1
									Call fn_ClickButton_2(Win("Win_ImportWorkflows"), Win("Win_ImportWorkflows").PBut("PBut_GenericButton"), arrTabs(k-1) & ",Process")
									Wait 2
									strStatusName = fn_GetStatusInTab(Win("Win_ImportWorkflows"), arrTabs(k-1))
						
									If Instr(LCase(strStatusName), "%f4 copy down")<=0 Then
										Call fn_ClickButton_2(Win("Win_ImportWorkflows"), Win("Win_ImportWorkflows").PBut("PBut_GenericButton"), strTab & ",Retry")
									End If
									Wait(5)
									Win("Win_ImportWorkflows").NBook("NBook_Tabs").ClickTab strTab									
								End If								
							End If

						Wend
					
						strStatusName = fn_GetStatusInTab(Win("Win_ImportWorkflows"), strTab)
						
						If Instr(LCase(strStatusName), "%f4 copy down")<=0 Then
							Call fn_ClickButton_2(Win("Win_ImportWorkflows"), Win("Win_ImportWorkflows").PBut("PBut_GenericButton"), strTab & ",Retry")
						End If
						Wait(5)
						
						strStatusName = fn_GetStatusInTab(Win("Win_ImportWorkflows"), strTab)
						If Instr(LCase(strStatusName), "%f4 copy down")>0 Then
							Call ReportEvent("Import Workflows", "Imported successfully in tab " & Chr(34) & strTab & Chr(34), "PASS")
						Else
							If strStatusName <> "" Then
								Call ReportEvent("Import Workflows", "Import failed in tab " & Chr(34) & strTab & Chr(34) & " with error - " & Split(strStatusName, "%")(1), "FAIL")
'								print "import failed in tab " & strTab
							Else
								Call ReportEvent("Import Workflows", "Import failed in tab " & Chr(34) & strTab & Chr(34) & " with no error msg", "FAIL")
							End If
							
						End If
					Else
											
						Call WaitForObject(SwfWindow("Win_DealEditorSaveAlert"),60)
						
						If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
							strStatus = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
							
							If Instr(LCase(strStatus), "wflows were imported correctly")>0 Then
								Call ReportEvent("Import Workflows", "Expected popup msg " & Chr(34) & strStatus & Chr(34) & " appeared", "PASS")
'								print "popup appeared"
							ELse
								Call ReportEvent("Import Workflows", "Import failed in tab " & Chr(34) & strTab & Chr(34) & " with error - " & strStatus, "FAIL")
'								print "popup msg not expected"
								Environment("AbortExecution") = True
							End If
							SwfWindow("Win_DealEditorSaveAlert").SwfObject("OK_Button").Click
						Else
							Call ReportEvent("Import Workflows", "Expected Popup in " & Chr(34) & strTab & Chr(34) & " did not appear", "FAIL")
'							print "popup did not appear"
							Environment("AbortExecution") = true
						End If
						
						strStatusName = fn_GetStatusInTab(Win("Win_ImportWorkflows"), strTab)
						If Instr(LCase(strStatusName), "%import succeeded")>0 Then
							Call ReportEvent("Import Workflows", "Imported successfully in tab " & Chr(34) & strTab & Chr(34), "PASS")
'							print "successful in tab " & strTab
						Else
							If strStatusName <> "" Then
								Call ReportEvent("Import Workflows", "Import failed in tab " & Chr(34) & strTab & Chr(34) & " with error - " & Split(strStatusName, "%")(1), "FAIL")
'								print "import failed in tab " & strTab
							Else
								Call ReportEvent("Import Workflows", "Import failed in tab " & Chr(34) & strTab & Chr(34) & " with no error msg", "FAIL")
							End If
							
						End If						
						
					End If	
				Next
				Call fn_ClickButton_2(Win("Win_ImportWorkflows"), Win("Win_ImportWorkflows").PBut("PBut_GenericButton"), "Workflows,Exit")
				Wait 1
				Call handleAlerts()
				
			Else
				Call ReportEvent("Import Workflows", Chr(34) & "Import Workflows" & Chr(34) & " window did not appear", "FAIL")
'				print "window not appeared"
				Environment("AbortExecution") = true
			End If
			Win("Win_SelectWorkflowToImport").PBut("PBut_Close").Click
			Wait 1
			Call handleAlerts()
		Else
			Call ReportEvent("Import Workflows", "Window to import Workflows did not appear", "FAIL")
'			print "window not appeared"
			Environment("AbortExecution") = true
		End If
		Win("Win_ServicesManager").Terminate
		Call handleAlerts()
	Else
		Call ReportEvent("Import Workflows", Chr(34) & "Workflow Management" & Chr(34) & " window did not appear", "FAIL")
'		print "window not appeared"
		Environment("AbortExecution") = true
	End If


End Function

'**********************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: ImportLicenseKey()
' Purpose					: Import license key
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function ImportLicenseKey()
	
	strLicenseKeyPath = GetData(Environment("currentKeyWord"), "FilePath")
	strAppPath = GetData(Environment("currentKeyWord"),"AppPath")
	strUid = GetData(Environment("currentKeyWord"),"UserId")
	strPassword = GetData(Environment("currentKeyWord"),"Password")
	
	strServicesName = GetDataFromSheet("GenericDataSheet", "ServiceNames", "Execute = 'True'")
    strHostNames = GetDataFromSheet("GenericDataSheet", "HostNames", "Execute = 'True'")
	
	If SwfWindow("Window_EndurMainWindow").Exist(1) Then
		Call Logout()
	End If
	
	Call fn_StopServices(strServicesName, strHostNames)
	
	strEnvName = FindEnvironment(strAppPath)

	SystemUtil.Run strAppPath
	Wait 2
	
	Call WaitForObject(Window("OpenLink Endur/Findur"),120)
	Window("OpenLink Endur/Findur").Click 105,112
	Window("OpenLink Endur/Findur").Type strUid
	Window("OpenLink Endur/Findur").Click 308,110
	Window("OpenLink Endur/Findur").Type strPassword
	Window("OpenLink Endur/Findur").Click 135,160
	
	Call WaitForObject(Window("OpenLink"),60)
	If Window("OpenLink").Exist(5) Then
		Window("OpenLink").Click 132,128
		wait  2
		If Window("OpenLink").Exist(5) Then
			Window("OpenLink").Click 132,93
		End If
		If Window("OpenLink").Exist(5) Then
			Window("OpenLink").Click 161,94
			wait 2
			If Window("OpenLink").Exist(5) Then
				Window("OpenLink").Click 235,87
			End If
		End If
	End If

	Call WaitForObject(SwfWindow("Win_DealEditorSaveAlert"), 20)
	
	If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
		strMsg = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
		
		If Instr(LCase(strMsg), "would you like to import a new license file")>0 Then
			Call ReportEvent("Import license file", "Expected popup message with content - " & strMsg & " - appeared", "PASS")
		Else
			Call ReportEvent("Import license file", "Expected popup message did not appear. Actual msg - " & strMsg, "FAIL")
		End If

		Wait 2
		SwfWindow("Win_DealEditorSaveAlert").SwfObject("PBut_YesButton").Click
			
		Call WaitForObject(SwfWindow("Window_EndurMainWindow").Dialog("Dialog_SelectLicenseKey"), 10)
			
		If SwfWindow("Window_EndurMainWindow").Dialog("Dialog_SelectLicenseKey").Exist(2) Then
			Wait 1
			SwfWindow("Window_EndurMainWindow").Dialog("Dialog_SelectLicenseKey").WinEdit("WinEdit_Filename").Set strLicenseKeyPath
			Wait 1
			SwfWindow("Window_EndurMainWindow").Dialog("Dialog_SelectLicenseKey").WinObject("WinObj_Open").Click
			Wait 1
			If SwfWindow("Window_EndurMainWindow").Dialog("Dialog_SelectLicenseKey").Exist(2) Then
				SwfWindow("Window_EndurMainWindow").Dialog("Dialog_SelectLicenseKey").WinObject("WinObj_Open").Click
				Wait 1				
			End If
			
			Call WaitForObject(SwfWindow("Win_DealEditorSaveAlert"), 20) 
			If SwfWindow("Win_DealEditorSaveAlert").Exist(2) Then
				strMsg = SwfWindow("Win_DealEditorSaveAlert").SwfObject("Element_ErrorMessage").GetROProperty("text")
				
				If Instr(LCase(strMsg), "license import was successful")>0 Then
					Call ReportEvent("Import license file", "Expected popup message with content - " & strMsg & " - appeared", "PASS")
				Else
					Call ReportEvent("Import license file", "Expected popup message did not appear. Actual msg - " & strMsg, "FAIL")
				End If
			End If
			
			Call handleAlerts()
		Else
			Call ReportEvent("Import license file", "Window to select license_Key did not popup", "FAIL")
		End If
		
		If SwfWindow("Window_EndurMainWindow").Exist(2) Then
			Call Logout()
			Call Login()
		End If
		
	Else
		Call ReportEvent("Import license file", "Popup message with question to import license key did not appear", "FAIL")
	End If
	
	If  Window("OpenLink").Exist(3) = False Then
		Call ReportEvent("Login","User  "&struid& "  is Logged in Successfully after importing license key","PASS")
	Else
		Environment("AbortExecution") = True
	End If
	
	
End Function


'**********************************************************************************************************************************************************

'*******************************************************************************
' Function/Procedure Name	: CreateTemplates()
' Purpose					: Import license key
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'*******************************************************************************

Function CreateTemplates()
	strQueryResultPath = GetData(Environment("currentKeyWord"), "FilePath")
	
	strRef = "  LTR"
	strTranStatus = "Template"'
	strTemplates = CaptureTemplateNames(strQueryResultPath)
	If strTemplates<>"" Then
		strReturnVal = executeCloseDealRefTranStatus(strRef,strTranStatus)
		
		If LCase(strReturnVal) = "passed" Then
			strExistingTemplate = openDealDetailPageIAndVerifyTemplateExistLTR(strTemplates)
		ElseIf LCase(strReturnVal) = "no templates" Then
			strExistingTemplate = ""
		Else
			Environment("AbortExecution") = True
		End If
		
		If NOT Environment("AbortExecution") Then

			strTemplatesImported = ImportTemplate(strQueryResultPath,strExistingTemplate)
			
			If strTemplatesImported <> "" Then
	
				Call executeCloseDealRefTranStatus(strRef,strTranStatus)
				'Call openDealDetailPageILTR(strTemplates)
				openDealDetailPageILTR(strTemplatesImported)
			End If
		End If
	End If
	
	If Win("Win_TradingManager").Exist(2) Then
		Win("Win_TradingManager").Terminate
	End If
	
End Function


'**********************************************************************************************************************************************************

'************************************************************************************************
' Function/Procedure Name	: VerifyBusinessDate()
' Purpose					: Queries Business date of the Build & verifies if it's as expected
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'************************************************************************************************

Function VerifyBusinessDate()
	
	strQuery = GetData(Environment("currentKeyWord"), "Query")
	strExpectedDate = GetData(Environment("currentKeyWord"), "BusinessDate")
	
	Call runAdHocQuery(strQuery)
	
	If strExpectedDate <> "" Then
		If Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").Exist(2) Then
			
			iMaxRows = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetROProperty("maxrow")
			strAppBusinessDate = Win("Win_AdHocQueryViewer").LBox("LBox_AdHocQueryResultTable").GetCellValue("ByIndxByTitle", CStr(iMaxRows), "business_date")
			
			If strAppBusinessDate <> "" Then
				If CDate(strAppBusinessDate) = CDate(strExpectedDate) Then
					Call ReportEvent("Verify Business Date", "Business Date is as expected - " & strAppBusinessDate, "PASS")
					strPublicBusinessDate = strExpectedDate
				Else
					Call ReportEvent("Verify Business Date", "Expected Business Date = " & strExpectedDate & "; Actual = " & strAppBusinessDate, "FAIL")
					Environment("AbortExecution") = True
				End If
			Else
				Call ReportEvent("Verify Business Date", "Business Date from Query window is empty", "FAIL")
				Environment("AbortExecution") = True
			End If
			
			Win("Win_AdHocQueryViewer").Terminate
			Call handleAlerts()
		Else
			Call ReportEvent("Verify Business Date", "Query window does not exist", "FAIL")
			Environment("AbortExecution") = True					
		End If
	Else
		Call ReportEvent("Verify Business Date", "Please provide a BusinessDate from data sheet", "FAIL")
		Environment("AbortExecution") = True
	End If

	
End Function

'**********************************************************************************************************************************************************

'************************************************************************************************
' Function/Procedure Name	: ChangeOpsServiceStatus()
' Purpose					: Change Ops Service status 
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'************************************************************************************************

Function ChangeOpsServiceStatus()
	
	strService  = GetData(Environment("currentKeyWord"), "ServiceNames")
	strStatus = GetData(Environment("currentKeyWord"), "ServerStatus")
	
	arrServices = Split(strService, ",")
	arrStatus = Split(strStatus, ",")
	
	If UBound(arrServices) = UBound(arrStatus) Then
		If NOT Win("Win_Operations").Exist(2) Then
			Call fn_ClickOnMainMenuObject("Operations")
			Wait 1
			
			Call WaitForObject(Win("Win_Operations"), 10)
			
			If Win("Win_Operations").Exist(2) Then
				Win("Win_Operations").NBook("Tabs_Operations").ClickTab "Services"
				Wait 1
				
				Win("Win_Operations").TBut("TBut_OperationServices").Click
				Wait 1
				Call WaitForObject(Win("Win_OperationServices"), 10)
				
				If Win("Win_OperationServices").Exist(2) Then
					
					flagStatusChanged = False
					intMaxRows = Win("Win_OperationServices").LBox("LBox_ServicesList").GetROProperty("maxrow")
					
					For k = 0 to UBound(arrServices)
						flagServiceFound = False
						For i = 0 to intMaxRows
							
							strAppService = Win("Win_OperationServices").LBox("LBox_ServicesList").GetCellValue("ByIndxByTitle", CStr(i), "Definition Name")
							
							If UCase(strAppService) = UCase(arrServices(k)) Then
								flagServiceFound = True
								strAppStatus = Win("Win_OperationServices").LBox("LBox_ServicesList").GetCellValue("ByIndxByTitle", CStr(i), "Online")
								
								If (UCase(strAppStatus) = "CHECK_MARK" AND UCase(arrStatus(k)) = "OFFLINE") OR (UCase(strAppStatus) = "" AND UCase(arrStatus(k)) = "ONLINE") Then
									Win("Win_OperationServices").LBox("LBox_ServicesList").CellClick "ByIndxByTitle", CStr(i), "Online"
									
									strAppStatus = Win("Win_OperationServices").LBox("LBox_ServicesList").GetCellValue("ByIndxByTitle", CStr(i), "Online")
									
									If strAppStatus = "" Then
										strAppStatus = "Offline"
									ElseIf strAppStatus = "CHECK_MARK" Then
										strAppStatus = "Online"
									End If
									
									If UCase(strAppStatus) = UCase(arrStatus(k)) Then
										flagStatusChanged = True
										Call ReportEvent("Change Ops Service Status", "Status of Ops-Service " & Chr(34) & arrServices(k) & Chr(34) & " is changed to " & Chr(34) & arrStatus(k) & Chr(34) & " successfully", "PASS")
									Else
										Call ReportEvent("Change Ops Service Status", "Ops-Service Expected Status = " & arrStatus(k) & ", Actual Status = " & strAppStatus, "FAIL")
									End If
								End If
							End If
						Next
						
						If NOT flagServiceFound Then
							Call ReportEvent("Change Ops-Service status", "Ops-Service " & Chr(34) & arrServices(k) & Chr(34) & " was not found in the list. Kindly check the name", "FAIL")
						End If
					Next
					
					If flagStatusChanged Then
						Win("Win_OperationServices").PBut("PBut_Save").Click
						Wait 1
						Call handleAlerts()
						
					End If
					
					Win("Win_OperationServices").Terminate
					Call handleAlerts()
					
					If flagStatusChanged Then
						Call fn_ClickOnMainMenuObject("Refresh")
					End If
					
				End If
				Win("Win_Operations").Terminate
				Call handleAlerts()
				
			End If
		End If
	Else
		Call ReportEvent("Change Ops-Service Status", "Count of Ops-Service names & the Status provided from data-sheet should match. Kindly check", "FAIL")
	End If
	
End Function

'************************************************************************************************************************************************************
	
'************************************************************************************************
' Function/Procedure Name	: RestartServicesAndVerifyStatus()
' Purpose					: restarts windows services & verifies their status in Server Management
' Author					: WellsFargo
' Parameters				: 
' Return Values				: 
'************************************************************************************************

Function RestartServicesAndVerifyStatus()

	strServicesName = GetDataFromSheet("GenericDataSheet", "ServiceNames", "Execute = 'True'")
    strHostNames = GetDataFromSheet("GenericDataSheet", "HostNames", "Execute = 'True'")
	
	Call fn_StopServices(strServicesName, strHostNames)
	Wait 5
	Call fn_StartServices(strServicesName, strHostNames)
	Wait 5
	Call VerifyServerStatus()
End Function
*********************************************************************************************************************************************

*********************************************************************************************************************************************

Dim oWB, ObjExcel, oSheet
Set oWB = Nothing
Dim reportWorkbook_path, reportWorkbook_name , intTCReportPos,startColumn,lastRow,firstBlankRow
Dim strTCStartDate, strTCEndDate , screenshotName

Set driverResultDict = CreateObject("Scripting.Dictionary")
Set TCStartTime  = CreateObject("Scripting.Dictionary")
Set TCTimeTracker = CreateObject("Scripting.Dictionary")
Set TCEndTime = CreateObject("Scripting.Dictionary")
Dim icon_Path ,oNtfy , oToolTip , oIcon
'icon_Path = "C:\windows\System32\PerfCenterCpl.ico" 'Choose any Icon file path from your PC. Make sure the file format should be .Ico.
Set oNtfy=DotNetFactory.CreateInstance("System.Windows.Forms.NotifyIcon","System.Windows.Forms")
Set oToolTip =DotNetFactory.CreateInstance("System.Windows.Forms.ToolTipIcon","System.Windows.Forms")
'Set oIcon=DotNetFactory.CreateInstance("System.Drawing.Icon","System.Drawing",icon_Path)


'************************************************************************************************************************************************

Function GetData(strKeyword,strFieldName)
	'Initialise required variables
	Dim strReferenceIdentifier, strCurrentTestCase
	Dim strConnectionString, strSql, objConn, objTestData, strDataValue
	
    strDataSheet = Environment("currentTestCase")
    strCurrentKeyword = Environment("currentKeyWord")
	
    If strKeyword = "" OR InStr(strCurrentKeyword,strKeyword)>0 Then
		strKeyword = strCurrentKeyword
    End If
        	
	strFilePath = PathFinder.Locate(Environment("driverSheet"))
	'strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=2"""
	strConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 12.0 Xml;HDR=Yes;IMEX=2"""
    	
	Set objConn = CreateObject("ADODB.Connection")
	objConn.Open strConnectionString
	Set objTestData = CreateObject("ADODB.Recordset")	
	objTestData.CursorLocation = 3
    strSql = "SELECT " & strFieldName & " from [" & strDataSheet & "$] where Keywords = '" & strKeyword & "' AND RowExecution = 'True'"

    objTestData.Open strSql, objConn

	intNoOfRecords = objTestData.RecordCount
	If (intNoOfRecords = 0) Then
		Err.Raise 2001, "Error", "No test data found for the current querry --> " & strSql
	ElseIF (intNoOfRecords > 1) Then 
        Do until objTestData.EOF
			On Error Resume Next
            strDataValue = strDataValue & Trim(objTestData.Fields.Item(0)) & ","
			objTestData.MoveNext
		Loop
        intLen = Len(strDataValue)
		For i = intLen to 0 Step -1
			strVal = Right(strDataValue,1)
			if(strVal = ",") Then
				strDataValue = Left(strDataValue,i-1)
			Else
				Exit For
			End if
		Next
    ElseIf (intNoOfRecords = 1) Then
		strDataValue = Trim(objTestData(0).Value) 
	End If

   	
    'Release all objects
	objTestData.Close
	objConn.Close
	Set objConn = Nothing
	Set objTestData = Nothing
	
	'Avoid returning Null value
	If IsNull(strDataValue) Then
		strDataValue = ""
	End If

	GetData = strDataValue
End Function




'*********************************************************************************************************************************




Function PutData(strKeyword,strFieldName, strDataValue)
		'Initialize required variables
		Dim strCurrentTestCase, intCurrentIteration, intCurrentSubIteration
		Dim strDatatableName, strFilePath, strConnectionString, objConn, strSql
	
		strDataSheet = Environment("currentTestCase")
		strCurrentKeyword = Environment("currentKeyWord")
        
		If strKeyword = "" OR InStr(strCurrentKeyword,strKeyword)>0 Then
			strKeyword = strCurrentKeyword
		End If

        strFilePath = PathFinder.Locate(Environment("driverSheet"))
        'strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=2"""
	    strConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 12.0 Xml;HDR=Yes;IMEX=2"""                  
		'Write the output value into the test data sheet
		Set objConn = CreateObject("ADODB.Connection")
		objConn.Open strConnectionString
		strSqlPut = "UPDATE [" & strDataSheet & "$] SET " & strFieldName &"='" & strDataValue & "' where Keywords='" & strKeyword & "'"
		objConn.Execute strSqlPut
		objConn.Close
		Set objConn = Nothing
	
        		
End Function




'*********************************************************************************************************************************



Function  ReportEvent(strStepName, strDescription , strResult)

'	Dim firstBlankRow
   
'

If flagFailedJobsHaveBeenReRun = true Then 
      If lcase(strResult)="fail" Then
			'SetReportFilePath()
			Call fn_TakeScreenShot()
		End If
		
    strDataSheet = Environment("currentTestCase")
	
	If reportWorkbook_name = "" Then
		SetReportFilePath()
		CreateReportFile(strDataSheet)
	End If
	wait 1
    On Error resume next
		Set oSheet = oWB.WorkSheets(strDataSheet)
	On error goto 0

	If oSheet.Name <> strDataSheet Then

		Set oSheet = oWB.WorkSheets.Add(oWB.Sheets(oWB.WorkSheets.Count))
        oSheet.Name = strDataSheet
		FillHeaders()

	End If


	
	If strProcessingInsType <> strStartingInsType Then
		firstBlankRow = firstBlankRow + 1
		If strStartingInsType <> "" Then
			oSheet.cells(firstBlankRow,1).value="Instrument Type"
			oSheet.cells(firstBlankRow,2).value=strStartingInsType
		Else
			oSheet.cells(firstBlankRow,1).value="Final Validation"
		End If		
		oSheet.cells(firstBlankRow,1).Interior.ColorIndex=15
		oSheet.cells(firstBlankRow,2).Interior.ColorIndex=15
    	oSheet.cells(firstBlankRow,1).Font.Bold=True
		oSheet.cells(firstBlankRow,2).Font.Bold=True
		oSheet.cells(firstBlankRow,1).Borders.LineStyle = 1
		oSheet.cells(firstBlankRow,1).Borders.Weight = 2
		oSheet.cells(firstBlankRow,2).Borders.LineStyle = 1
		oSheet.cells(firstBlankRow,2).Borders.Weight = 2

		strProcessingInsType = strStartingInsType	
		firstBlankRow = firstBlankRow + 1		
	End If
 
    oSheet.cells(firstBlankRow,1).value=strStepName
	oSheet.cells(firstBlankRow,2).value=strDescription
	oSheet.cells(firstBlankRow,3).value=strResult
	oSheet.cells(firstBlankRow,4).value= Now()
	
	oSheet.cells(firstBlankRow,1).Interior.ColorIndex=37
	oSheet.cells(firstBlankRow,2).Interior.ColorIndex=34
	oSheet.cells(firstBlankRow,4).Interior.ColorIndex=34
	
	wait 1
	If lcase(strResult)="pass" Then
		oSheet.cells(firstBlankRow,3).Interior.ColorIndex=4
	ElseIf lcase(strResult)="fail" Then 
    	oSheet.cells(firstBlankRow,3).Interior.ColorIndex=3
        'Environment("reportFlag") = true
        Environment("reportrerunstatusflag")=true
		Environment("reportFlagDriver") = true
		If dictTestCaseFailedRow.Exists(strDataSheet) Then
			dictTestCaseFailedRow.Item(strDataSheet) = dictTestCaseFailedRow.Item(strDataSheet) & "," & firstBlankRow
		Else
			dictTestCaseFailedRow.Add strDataSheet,firstBlankRow
		End If
		oSheet.Cells(firstBlankRow,5).Formula = "=HYPERLINK(""" & screenshotName & """,""" & "ScreenShot_Link" & """)"
		
		oSheet.cells(firstBlankRow,5).Interior.ColorIndex=28
		oSheet.cells(firstBlankRow,5).Borders.LineStyle = 1
		oSheet.cells(firstBlankRow,5).Borders.Weight = 2
    ElseIf lcase(strResult)="info" Then
		oSheet.cells(firstBlankRow,3).Interior.ColorIndex=6
    End If
	

	oSheet.cells(firstBlankRow,1).Borders.LineStyle = 1
	oSheet.cells(firstBlankRow,1).Borders.Weight = 2
	oSheet.cells(firstBlankRow,2).Borders.LineStyle = 1
	oSheet.cells(firstBlankRow,2).Borders.Weight = 2
	oSheet.cells(firstBlankRow,3).Borders.LineStyle = 1
	oSheet.cells(firstBlankRow,3).Borders.Weight = 2
	oSheet.cells(firstBlankRow,4).Borders.LineStyle = 1
	oSheet.cells(firstBlankRow,4).Borders.Weight = 2
	
    oSheet.Range("A" & firstBlankRow).Activate
		
	oSheet.UsedRange.EntireColumn.Autofit()

	oWB.Save
	
	firstBlankRow = firstBlankRow + 1
Else
		If lcase(strResult)="fail" Then
			'SetReportFilePath()
			Call fn_TakeScreenShot()
		End If
		
    strDataSheet = Environment("currentTestCase")
	
	If reportWorkbook_name = "" Then
		SetReportFilePath()
		CreateReportFile(strDataSheet)
	End If
	wait 1
    On Error resume next
		Set oSheet = oWB.WorkSheets(strDataSheet)
	On error goto 0

	If oSheet.Name <> strDataSheet Then

		Set oSheet = oWB.WorkSheets.Add(oWB.Sheets(oWB.WorkSheets.Count))
        oSheet.Name = strDataSheet
		FillHeaders()

	End If


	
	If strProcessingInsType <> strStartingInsType Then
		firstBlankRow = firstBlankRow + 1
		If strStartingInsType <> "" Then
			oSheet.cells(firstBlankRow,1).value="Instrument Type"
			oSheet.cells(firstBlankRow,2).value=strStartingInsType
		Else
			oSheet.cells(firstBlankRow,1).value="Final Validation"
		End If		
		oSheet.cells(firstBlankRow,1).Interior.ColorIndex=15
		oSheet.cells(firstBlankRow,2).Interior.ColorIndex=15
    	oSheet.cells(firstBlankRow,1).Font.Bold=True
		oSheet.cells(firstBlankRow,2).Font.Bold=True
		oSheet.cells(firstBlankRow,1).Borders.LineStyle = 1
		oSheet.cells(firstBlankRow,1).Borders.Weight = 2
		oSheet.cells(firstBlankRow,2).Borders.LineStyle = 1
		oSheet.cells(firstBlankRow,2).Borders.Weight = 2

		strProcessingInsType = strStartingInsType	
		firstBlankRow = firstBlankRow + 1		
	End If
 
    oSheet.cells(firstBlankRow,1).value=strStepName
	oSheet.cells(firstBlankRow,2).value=strDescription
	oSheet.cells(firstBlankRow,3).value=strResult
	oSheet.cells(firstBlankRow,4).value= Now()
	
	oSheet.cells(firstBlankRow,1).Interior.ColorIndex=37
	oSheet.cells(firstBlankRow,2).Interior.ColorIndex=34
	oSheet.cells(firstBlankRow,4).Interior.ColorIndex=34
	
	wait 1
	If lcase(strResult)="pass" Then
		oSheet.cells(firstBlankRow,3).Interior.ColorIndex=4
	ElseIf lcase(strResult)="fail" Then 
    	oSheet.cells(firstBlankRow,3).Interior.ColorIndex=3
        Environment("reportFlag") = true
		Environment("reportFlagDriver") = true
		If dictTestCaseFailedRow.Exists(strDataSheet) Then
			dictTestCaseFailedRow.Item(strDataSheet) = dictTestCaseFailedRow.Item(strDataSheet) & "," & firstBlankRow
		Else
			dictTestCaseFailedRow.Add strDataSheet,firstBlankRow
		End If
		oSheet.Cells(firstBlankRow,5).Formula = "=HYPERLINK(""" & screenshotName & """,""" & "ScreenShot_Link" & """)"
		
		oSheet.cells(firstBlankRow,5).Interior.ColorIndex=28
		oSheet.cells(firstBlankRow,5).Borders.LineStyle = 1
		oSheet.cells(firstBlankRow,5).Borders.Weight = 2
    ElseIf lcase(strResult)="info" Then
		oSheet.cells(firstBlankRow,3).Interior.ColorIndex=6
    End If
	

	oSheet.cells(firstBlankRow,1).Borders.LineStyle = 1
	oSheet.cells(firstBlankRow,1).Borders.Weight = 2
	oSheet.cells(firstBlankRow,2).Borders.LineStyle = 1
	oSheet.cells(firstBlankRow,2).Borders.Weight = 2
	oSheet.cells(firstBlankRow,3).Borders.LineStyle = 1
	oSheet.cells(firstBlankRow,3).Borders.Weight = 2
	oSheet.cells(firstBlankRow,4).Borders.LineStyle = 1
	oSheet.cells(firstBlankRow,4).Borders.Weight = 2
	
    oSheet.Range("A" & firstBlankRow).Activate
		
	oSheet.UsedRange.EntireColumn.Autofit()

	oWB.Save
	
	firstBlankRow = firstBlankRow + 1
	
end if	
        		
End Function




'*********************************************************************************************************************************




Function CreateReportFile(strDataSheet)

	Dim xlWBATWorksheet : xlWBATWorksheet = -4167
	Set ObjExcel=CreateObject("Excel.Application")
	Set oWB=ObjExcel.Workbooks.Add(xlWBATWorksheet)
	ObjExcel.Visible=True
	ObjExcel.DisplayAlerts = True
	oWB.SaveAs(Environment("reportWorkbook_path"))
	If strDataSheet <> "" Then
		Set oSheet = oWB.WorkSheets.Add(oWB.Sheets(oWB.WorkSheets.Count))
		oSheet.Name = strDataSheet
		FillHeaders()
	End If

End Function


'***********************************************************************************************************************************


Function FillHeaders
	
	firstBlankRow = 1
	
	oSheet.cells(1,1).value="Step_Name"
	oSheet.cells(1,2).value="Step_Description"
	oSheet.cells(1,3).value="Result"
	oSheet.cells(1,4).value="TimeStamp"
	
	oSheet.cells(1,1).Interior.ColorIndex=16
	oSheet.cells(1,2).Interior.ColorIndex=16
	oSheet.cells(1,3).Interior.ColorIndex=16
	oSheet.cells(1,4).Interior.ColorIndex=16
	oSheet.cells(1,1).Font.Bold=True
	oSheet.cells(1,2).Font.Bold=True
	oSheet.cells(1,3).Font.Bold=True
	oSheet.cells(1,4).Font.Bold=True
	oSheet.UsedRange.Borders.LineStyle = 1 
	oSheet.UsedRange.Borders.Weight = 2
	
	firstBlankRow = firstBlankRow + 1

End Function



'**********************************************************************************************************************************



Function ReportToDriver(testCaseName)

	
	strFilePath = PathFinder.Locate(Environment("driverSheet"))
	'strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=2"""
    strConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 12.0 Xml;HDR=Yes;IMEX=2"""
	'Write the Pass/Fail  result into the driver sheet
	Set objConnDriverReport = CreateObject("ADODB.Connection")
	objConnDriverReport.Open strConnectionString

    If testCaseName <> "" Then		
		If Environment("reportFlagDriver")=true Then
			strSqlFail = "UPDATE [DriverSheet$] SET Results='FAIL' where TC_ID='" & testCaseName & "'"
		Else
			strSqlFail = "UPDATE [DriverSheet$] SET Results='PASS' where TC_ID='" & testCaseName & "'"
		End If
		objConnDriverReport.Execute strSqlFail
		Environment("reportFlagDriver")=false
	End If

	If Environment("currentTestCaseNo")=Environment("totalNoOfTestCase") Then
		Set objExecutionMode = CreateObject("ADODB.Recordset")	
		objExecutionMode.CursorLocation = 3
		strSqlExecutionMode = "SELECT TC_ID from [DriverSheet$] where Execution = 'False'"
		objExecutionMode.Open strSqlExecutionMode, objConnDriverReport
		Do While Not objExecutionMode.EOF
			strSqlNotExecuted = "UPDATE [DriverSheet$] SET Results='Not Executed' where TC_ID='" & objExecutionMode("TC_ID") & "'"
			objConnDriverReport.Execute strSqlNotExecuted
			objExecutionMode.MoveNext
		Loop
	End If
		
	objConnDriverReport.Close
	Set objConnDriverReport = Nothing

    
End Function



'****************************************************************************************************************************************


Function BuildReportSummarySheet()

	If oWB Is Nothing Then
		CreateReportFile("")
	End If
    Set oSheet = oWB.Worksheets("Sheet1")
	oSheet.Name = "ReportSummary"
	oSheet.Move(oWB.Worksheets(1))

	oSheet.Cells(1,1).Value = "ENDUR  Application Report"
	oSheet.Cells(2,1).Value = "Execution Date"
	oSheet.Cells(2,2).Value = Date()
	oSheet.Cells(3,1).Value = "Tester"
	oSheet.Cells(3,2).Value = Environment("UserName")
	oSheet.Cells(4,1).Value = "Total No. of Test cases Passed"
	oSheet.Cells(5,1).Value = "Total No. of Test cases Failed"
	oSheet.Cells(6,1).Value = "Total Execution Duration"
	oSheet.Cells(6,2).Value = totalExecutionTime(Environment("SuiteStartedAt"),Environment("SuiteEndedAt"))
    oSheet.Cells(7,1).Value = "Environment"
    oSheet.Cells(7,2).Value = Environment("EnvName")
     

	oSheet.Cells(1,1).Interior.ColorIndex=43
	oSheet.Cells(1,1).Font.Bold = True
	oSheet.Cells(1,1).Borders.Weight = 4
	oSheet.Range(oSheet.Cells(2,1), oSheet.Cells(7,1)).Interior.ColorIndex=15
	oSheet.Range(oSheet.Cells(2,2), oSheet.Cells(7,2)).Interior.ColorIndex=40
	oSheet.Range(oSheet.Cells(2,2), oSheet.Cells(7,2)).HorizontalAlignment = -4108
	oSheet.Range(oSheet.Cells(2,1), oSheet.Cells(7,2)).Borders.LineStyle = 1
	
	If Environment("totalNoOfTestCase")= 0 Then
		oSheet.Cells(8,2).Value = "No Test cases to execute!!"
		oSheet.Cells(8,2).Font.Bold = True
		oSheet.Cells(8,2).HorizontalAlignment = -4108
		oSheet.Cells(8,2).Borders.LineStyle = 1
		oSheet.Cells(8,2).Borders.Weight = 2
		oSheet.Cells(8,2).Interior.ColorIndex = 3
		oSheet.Cells(4,2).Value = 0
		oSheet.Cells(5,2).Value = 0
		SetReportFilePath()
	Else

		intTCReportPos = 10
	
		oSheet.Cells(intTCReportPos,1).Value = "TC_ID"
		oSheet.Cells(intTCReportPos,2).Value = "Results"
		oSheet.Cells(intTCReportPos,3).Value = "Execution Start Time"
		oSheet.Cells(intTCReportPos,4).Value = "Execution End Time"
		oSheet.Cells(intTCReportPos,5).Value = "Duration"
		oSheet.Cells(intTCReportPos,6).Value = "FailedRows"
		
		oSheet.Range(oSheet.Cells(intTCReportPos,1), oSheet.Cells(intTCReportPos,6)).Interior.ColorIndex=15
		oSheet.Range(oSheet.Cells(intTCReportPos,1), oSheet.Cells(intTCReportPos,6)).Font.Bold = True
		oSheet.Range(oSheet.Cells(intTCReportPos,1), oSheet.Cells(intTCReportPos,6)).HorizontalAlignment = -4108 	'value of xlCenter
		oSheet.Range(oSheet.Cells(intTCReportPos,1), oSheet.Cells(intTCReportPos,6)).Borders.LineStyle = 1
		oSheet.Range(oSheet.Cells(intTCReportPos,1), oSheet.Cells(intTCReportPos,6)).Borders.Weight = 2
	
	
		i = intTCReportPos+1
		PassCount = 0
		FailCount = 0
		For each mykey in driverResultDict.Keys
			oSheet.Cells(i,1).Value = mykey
			oSheet.Cells(i,2).Value = driverResultDict.Item(mykey)
			If lcase(oSheet.Cells(i,2).Value) = "pass" Then
				PassCount = PassCount + 1
			else
				FailCount = FailCount + 1
			End If
			i = i+1
		Next
	
		oSheet.Cells(4,2).Value = PassCount
		oSheet.Cells(5,2).Value = FailCount
	
		i = intTCReportPos+1
		For each mykey in TCStartTime.Keys
			oSheet.Cells(i, 3) = TCStartTime.Item(mykey)
			i = i+1
		Next
	
		i = intTCReportPos+1
		For each mykey in TCEndTime.Keys
			oSheet.Cells(i, 4) = TCEndTime.Item(mykey)
			i = i+1
		Next
		
		i = intTCReportPos+1
		For each mykey in TCTimeTracker.Keys
			oSheet.Cells(i, 5) = CalculateExeDuration(TCTimeTracker.Item(mykey))
			i = i+1
		Next

		i = intTCReportPos+1
		For each mykey in dictTestCaseFailedRow.Keys
			oSheet.Cells(i,6).Value = dictTestCaseFailedRow.Item(mykey)
			i = i+1
		Next
		
		oSheet.Range(oSheet.Cells(intTCReportPos+1,1), oSheet.UsedRange.SpecialCells(intTCReportPos+1)).HorizontalAlignment = -4108
		oSheet.Range(oSheet.Cells(intTCReportPos+1,1), oSheet.UsedRange.SpecialCells(intTCReportPos+1)).Interior.ColorIndex = 40		
		oSheet.Range(oSheet.Cells(intTCReportPos+1,1), oSheet.UsedRange.SpecialCells(intTCReportPos+1)).Borders.LineStyle = 1
	
		i = intTCReportPos+1
		For each mykey in driverResultDict.Keys
			If lcase(oSheet.Cells(i, 2).Value) = "pass" Then
				oSheet.Cells(i,2).Interior.ColorIndex = 4
                oSheet.Cells(i,2).Hyperlinks.Add oSheet.Cells(i,2), reportWorkbook_name & ".xlsx", "'" & oWB.Worksheets(mykey).Name & "'" & "!A1", driverResultDict.Item(mykey)
			Else
				oSheet.Cells(i,2).Interior.ColorIndex = 3
				oSheet.Cells(i,2).Hyperlinks.Add oSheet.Cells(i,2), reportWorkbook_name & ".xlsx", "'" & oWB.Worksheets(mykey).Name & "'" & "!A1", driverResultDict.Item(mykey)
			End If
			oSheet.Cells(i,2).HorizontalAlignment = -4108
			i = i + 1
		Next
	End If
	oSheet.UsedRange.EntireColumn.Autofit()
	intTCReportPos = 10
	If flagJobsSummaryRequired Then

		oSheet.Cells(intTCReportPos-1,8) = "Job Execution Summary"
		oSheet.Cells(intTCReportPos,8) = "Job Name"
		oSheet.Cells(intTCReportPos,9) = "Workflow Name"
		oSheet.Cells(intTCReportPos,10) = "Status"
		oSheet.Cells(intTCReportPos,11) = "Dispatcher"
		oSheet.Cells(intTCReportPos,12) = "Last Start"
		oSheet.Cells(intTCReportPos,13)  = "Last End"
		oSheet.Cells(intTCReportPos,14) = "Duration"
		oSheet.Cells(intTCReportPos-1,8).Interior.ColorIndex = 43
		oSheet.Cells(intTCReportPos-1,8).Font.Bold = True
        oSheet.Cells(intTCReportPos-1,8).HorizontalAlignment = -4108
		oSheet.Cells(intTCReportPos-1,8).Borders.LineStyle = 1
		oSheet.Cells(intTCReportPos-1,8).Borders.Weight = 4
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Interior.ColorIndex=15
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Font.Bold = True
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).HorizontalAlignment = -4108 	'value of xlCenter
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Borders.LineStyle = 1
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Borders.Weight = 2
	
		i = intTCReportPos+1
		startColumn = 8
		
		For each jobName in dictJobStatus.Keys
			oSheet.Cells(i,startColumn) = jobName
			oSheet.Cells(i,startColumn+1) = dictWorkflowName.Item(jobName)
			oSheet.Cells(i,startColumn+2) = dictJobStatus.Item(jobName)
			oSheet.Cells(i,startColumn+3) = dictJobDispatcher.Item(jobName)
			If dictJobStartTime.Item(jobName)<> "" then
				oSheet.Cells(i,startColumn+4) = dictJobStartTime.Item(jobName)
				oSheet.Cells(i,startColumn+5) = dictJobEndTime.Item(jobName)
				oSheet.Cells(i,startColumn+6) = CalculateExeDuration(GetTimeDifference(jobName,jobName))
			End If
			i = i+1
		Next
		
		oSheet.Range(oSheet.Cells(intTCReportPos+1,startColumn), oSheet.Cells(i-1,startColumn+6)).Interior.Colorindex = 40
		oSheet.Range(oSheet.Cells(intTCReportPos+1,startColumn), oSheet.Cells(i-1,startColumn+6)).Borders.LineStyle = 1
		lastRow = i-1

		For i = intTCReportPos+1 to lastRow
			If oSheet.Cells(i,10).Value = "Succeeded" Then
				oSheet.Cells(i,10).Interior.ColorIndex = 4
			elseIf oSheet.Cells(i,10).Value = "Failed" Then
				oSheet.Cells(i,10).Interior.ColorIndex = 3
			else
				oSheet.Cells(i,10).Interior.ColorIndex = 6
			End If
		Next
	End If

	oSheet.UsedRange.EntireColumn.Autofit()
	intTCReportPos = lastRow+3
	If flagMemoryException = true AND Instr(LCase(Environment("driverSheet")), "_iltr.xls")<=0 Then

		oSheet.Cells(intTCReportPos-1,8) = "Memory Exception Job Execution Summary"
		oSheet.Cells(intTCReportPos,8) = "Job Name"
		oSheet.Cells(intTCReportPos,9) = "Workflow Name"
		oSheet.Cells(intTCReportPos,10) = "Status"
		oSheet.Cells(intTCReportPos,11) = "Dispatcher"
		oSheet.Cells(intTCReportPos,12) = "Last Start"
		oSheet.Cells(intTCReportPos,13)  = "Last End"
		oSheet.Cells(intTCReportPos,14) = "Duration"
		oSheet.Cells(intTCReportPos-1,8).Interior.ColorIndex = 43
		oSheet.Cells(intTCReportPos-1,8).Font.Bold = True
        oSheet.Cells(intTCReportPos-1,8).HorizontalAlignment = -4108
		oSheet.Cells(intTCReportPos-1,8).Borders.LineStyle = 1
		oSheet.Cells(intTCReportPos-1,8).Borders.Weight = 4
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Interior.ColorIndex=15
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Font.Bold = True
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).HorizontalAlignment = -4108 	'value of xlCenter
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Borders.LineStyle = 1
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Borders.Weight = 2
	
		i = intTCReportPos+1
		startColumn = 8
		
		For each jobName in dictMemoryExceptionJobsStatus.Keys
			oSheet.Cells(i,startColumn) = jobName
			oSheet.Cells(i,startColumn+1) = dictWorkflowName.Item(jobName)
			oSheet.Cells(i,startColumn+2) = dictMemoryExceptionJobsStatus.Item(jobName)
			oSheet.Cells(i,startColumn+3) = dictJobDispatcher.Item(jobName)
			If dictMemoryExceptionJobsStartTime.Item(jobName)<> "" then
				oSheet.Cells(i,startColumn+4) = dictMemoryExceptionJobsStartTime.Item(jobName)
				oSheet.Cells(i,startColumn+5) = dictMemoryExceptionJobsEndTime.Item(jobName)
				oSheet.Cells(i,startColumn+6) = CalculateExeDuration(dateDiff("s",dictMemoryExceptionJobsStartTime.Item(jobName),dictMemoryExceptionJobsEndTime.Item(jobName)))
			End If
			i = i+1
		Next
		
		oSheet.Range(oSheet.Cells(intTCReportPos+1,startColumn), oSheet.Cells(i-1,startColumn+6)).Interior.Colorindex = 40
		oSheet.Range(oSheet.Cells(intTCReportPos+1,startColumn), oSheet.Cells(i-1,startColumn+6)).Borders.LineStyle = 1
		lastRow = i-1

		For i = intTCReportPos+1 to lastRow
			If oSheet.Cells(i,10).Value = "Succeeded" Then
				oSheet.Cells(i,10).Interior.ColorIndex = 4
			elseIf oSheet.Cells(i,10).Value = "Failed" Then
				oSheet.Cells(i,10).Interior.ColorIndex = 3
			else
				oSheet.Cells(i,10).Interior.ColorIndex = 6
			End If
		Next
		
		oSheet.UsedRange.EntireColumn.Autofit()
		intTCReportPos = lastRow+3
	End If

	If flagFailedJobsHaveBeenReRun = true Then

		oSheet.Cells(intTCReportPos-1,8) = "Failed Jobs ReRun Summary"
		oSheet.Cells(intTCReportPos,8) = "Job Name"
		oSheet.Cells(intTCReportPos,9) = "Workflow Name" 
		oSheet.Cells(intTCReportPos,10) = "Status"
		oSheet.Cells(intTCReportPos,11) = "Dispatcher"
		oSheet.Cells(intTCReportPos,12) = "Last Start"
		oSheet.Cells(intTCReportPos,13)  = "Last End"
		oSheet.Cells(intTCReportPos,14) = "Duration"
		oSheet.Cells(intTCReportPos-1,8).Interior.ColorIndex = 43
		oSheet.Cells(intTCReportPos-1,8).Font.Bold = True
        oSheet.Cells(intTCReportPos-1,8).HorizontalAlignment = -4108
		oSheet.Cells(intTCReportPos-1,8).Borders.LineStyle = 1
		oSheet.Cells(intTCReportPos-1,8).Borders.Weight = 4
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Interior.ColorIndex=15
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Font.Bold = True
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).HorizontalAlignment = -4108 	'value of xlCenter
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Borders.LineStyle = 1
		oSheet.Range(oSheet.Cells(intTCReportPos,8), oSheet.Cells(intTCReportPos,14)).Borders.Weight = 2
	
		i = intTCReportPos+1
		startColumn = 8
		
		For each jobName in dictRerunJobsStatus.Keys
			oSheet.Cells(i,startColumn) = jobName
			oSheet.Cells(i,startColumn+1) = dictWorkflowName.Item(jobName)
			oSheet.Cells(i,startColumn+2) = dictRerunJobsStatus.Item(jobName)
			oSheet.Cells(i,startColumn+3) = dictJobDispatcher.Item(jobName)
			If dictRerunJobsStartTime.Item(jobName)<> "" then
				oSheet.Cells(i,startColumn+4) = dictRerunJobsStartTime.Item(jobName)
				oSheet.Cells(i,startColumn+5) = dictRerunJobsEndTime.Item(jobName)
				oSheet.Cells(i,startColumn+6) = CalculateExeDuration(GetTimeDifference_RerunJobs(jobName,jobName))
			End If
			i = i+1
		Next
		
		oSheet.Range(oSheet.Cells(intTCReportPos+1,startColumn), oSheet.Cells(i-1,startColumn+6)).Interior.Colorindex = 40
		oSheet.Range(oSheet.Cells(intTCReportPos+1,startColumn), oSheet.Cells(i-1,startColumn+6)).Borders.LineStyle = 1
		lastRow = i-1

        For i = intTCReportPos+1 to lastRow
			If oSheet.Cells(i,10).Value = "Succeeded" Then
				oSheet.Cells(i,10).Interior.ColorIndex = 4
			elseIf oSheet.Cells(i,10).Value = "Failed" Then
				oSheet.Cells(i,10).Interior.ColorIndex = 3
				
			else
				oSheet.Cells(i,10).Interior.ColorIndex = 6
			End If
		Next
		
		flagFailedJobsHaveBeenReRun = false
	End If

	oSheet.UsedRange.EntireColumn.Autofit()

	Set driverResultDict = Nothing
	Set TCStartTime = Nothing
	Set TCTimeTracker = Nothing
	Set TCEndTime = Nothing

	oWB.Save
'	Call saveExcel(Environment("reportWorkbook_path"))
	'Call generateReportGraph()

End Function


'*******************************************************************************************************************************************



Function saveExcel(reportWorkbook_path)
	 Set WshShell = CreateObject("WScript.Shell")
	 If Environment("saveReport")="false" Then
		WshShell.AppActivate "Microsoft Excel - Sheet1"
		WshShell.AppActivate "Microsoft Excel - Sheet1"
		WshShell.AppActivate "Microsoft Excel - Sheet1"
        WshShell.SendKeys "^s"
        wait 4
		WshShell.SendKeys(reportWorkbook_path)
		wait 2
		WshShell.SendKeys ("{TAB}")
		wait 2
		WshShell.SendKeys ("{ENTER}")
		wait 20
		Environment("saveReport")="true"
	Else
		WshShell.SendKeys "^s"
        wait 5
	End If
	 
End Function



'*********************************************************************************************************************************************************************************



Function CalculateExeDuration(TimeTaken)

	Dim str
	If TimeTaken>=3600 Then
		 hr=int(TimeTaken/3600)
		 rem1=int(TimeTaken mod 3600)
		 str=hr&" : "
		If rem1>=60 Then
			  min=int(rem1/60)
			  sec=int(rem1 mod 60)
			  str=str&min&" : "&sec
		else
			  sec=rem1
			  str=str&"00 : " & sec
		End If

	Else If TimeTaken>=60 Then
		 min=int(TimeTaken/60)
		 sec=int(TimeTaken mod 60)
		 str=str&"00 : " & min&" : "&sec

	else
		 sec=TimeTaken
		 str=str&"00 : 00 : "&FormatNumber(sec, 0)
		End If
	End If

	CalculateExeDuration = str

End Function


'*******************************************************************************************************************************************




Function SetReportSummaryValues()

		TCStartTime.Add Environment("currentTestCase"), Environment("TCStartedAt")
		TCEndTime.Add Environment("currentTestCase"), Environment("TCEndedAt")
		intDaysDiff = DateDiff("d", strTCStartDate, strTCEndDate)
		Environment("TCEndTimer") = Environment("TCEndTimer") + intDaysDiff * 86400
		TCTimeTracker.Add Environment("currentTestCase"), Environment("TCEndTimer") - Environment("TCStartTimer")
		If Environment("reportFlag") = true and flagFailedJobsHaveBeenReRun = false Then
		driverResultDict.Add Environment("currentTestCase"), "FAIL"
		elseIf Environment("reportrerunstatusflag")=true and Environment("reportFlag") = true Then
		
			   driverResultDict.Add Environment("currentTestCase"), "FAIL"
		Else
        	driverResultDict.Add Environment("currentTestCase"), "PASS"	
		End If
		Environment("reportFlag") = false
		Environment("reportrerunstatusflag")=false
		
	

End Function





'***********************************************************************************************************************************************************************************




Function totalExecutionTime(strStartTime,strEndTime)

    TotalTime = ""
    TotalTime_Secs  = Datediff("s",strStartTime,strEndTime)

    'convert  total  Seconds into "Seconds only/ Mins+Secs/ Hrs+Mins+Secs"
    If TotalTime_Secs < 60 Then
        TotalTime = TotalTime_Secs & "  Second(s)"
    ElseIf    TotalTime_Secs >=60 and TotalTime_Secs < 3600 Then
        TotalTime = int(TotalTime_Secs/60) & "  Minute(s)  and  "& TotalTime_Secs Mod 60 & "  Second(s) "
    ElseIf    TotalTime_Secs >= 3600 Then
        TotalTime = int(TotalTime_Secs/3600) & "  Hour(s) ,   " & int((TotalTime_Secs Mod 3600)/60)  & "  Minute(s)  and  "& ((TotalTime_Secs Mod 3600 ) Mod 60) & "  Second(s)"
    End If

    'Return the time difference
    totalExecutionTime = TotalTime

End Function 





'*************************************************************************************************************************************************************************************************************************




Function EndTestcase()

	Environment("TCEndedAt") = Time()
	Environment("TCEndTimer") = Int(Timer())
	strTCEndDate = Cstr(Date())
	Call SetReportSummaryValues()
	If Not dictTestCaseFailedRow.Exists(Environment("currentTestCase")) Then
		dictTestCaseFailedRow.Item(Environment("currentTestCase")) = ""
	End If
	'Call ReportToDriver(Environment("currentTestCase"))	

End Function

 


'******************************************************************************************************************************************************************************************

Function SetReportFilePath()

	strFilePath = Environment("reportWorkbook_path")
	reportWorkbook_name = "ExecutionReport__" & Now   

	If Instr(reportWorkbook_name,":") Then
		reportWorkbook_name = Replace(reportWorkbook_name,":","_")
	End If
	If Instr(reportWorkbook_name,"/") Then
		reportWorkbook_name = Replace(reportWorkbook_name,"/","_")
	End If
	If Instr(reportWorkbook_name," ") Then
		reportWorkbook_name = Replace(reportWorkbook_name," ","__")
	End If
    reportWorkbook_name = Environment("TestName")&"_" & reportWorkbook_name
	Environment("reportWorkbook_path") = strFilePath &"\"& reportWorkbook_name

End Function




'*************************************************************************************************************************************




'*********************************************************************************************************************************************


Function ArchiveAllFolderFiles(FolderPath , FolderName)

	On Error Resume Next
	Dim FSO2 , i , FolderArray , strTodayDate, TodayDate
    Dim ArchivingPath , FilePath,FilesCount, monthyear

	Set FSO2 = CreateObject("Scripting.FileSystemObject")
	
	FolderArray = Split(FolderName,":")

	For i = lbound(FolderArray) to ubound(FolderArray)
		FilePath = FolderPath & "\" & FolderArray(i)
		ArchivingPath = FilePath & "\Archive"

		Set getFolderName = FSO2.GetFolder(FilePath)
		If Instr(FilePath,"ScreenShots")>0 Then
			Set FilesCount = getFolderName.SubFolders
		Else
			Set FilesCount = getFolderName.Files
		End If		
		If FilesCount.Count > 0  Then
			DirExists = FSO2.folderexists(ArchivingPath)
			If DirExists<>True Then
				Set newFolder = FSO2.CreateFolder(ArchivingPath)
			End If
			For each file in FilesCount
				file.move ArchivingPath & "\"
			Next
		End If
	Next
	Set FSO2 = nothing

End Function






'********************************************************************************************************************************************************************************************************************************
'''*******************************************************************************
'' Function/Procedure Name	: fn_CreateFoldersInThisPath
'' Purpose										: This function traverses the complete path and creates folder(s) in the path
'' Author											: WellsFargo
'' Parameters								: 
'' Return Values							: 
''*******************************************************************************
Function fn_CreateFoldersInThisPath(strPath)

	Set fso = CreateObject("Scripting.FileSystemObject")
	arrSubFolders = Split(strPath, "\")
	For i = 1 to UBound(arrSubFolders)
		strSubFolderPath = arrSubFolders(0)
		strSubFolderParent = arrSubFolders(0)
		For j = 1 to i
			strSubFolderPath = strSubFolderPath & "\" & arrSubFolders(j)
			If j < i Then
				strSubFolderParent = strSubFolderParent & "\" & arrSubFolders(j)
			End If
		Next
		If Not fso.FolderExists(strSubFolderPath) Then
			Set objParent = fso.GetFolder(strSubFolderParent)
			If Not objParent.Attributes And 1 Then
				fso.CreateFolder(strSubFolderPath)
			Else
				objParent.Attributes = objParent.Attributes - 1
				fso.CreateFolder(strSubFolderPath)
				objParent.Attributes = objParent.Attributes + 1
			End If
		End If
	Next
	Set fso = Nothing

End Function




'********************************************************************************************************************************************************************************************************************************
'''*******************************************************************************
'' Function/Procedure Name	: fn_CreateFoldersInThisPath
'' Purpose					: This function take screenshot and save it
'' Author					: WellsFargo
'' Parameters				: 
'' Return Values			: 
''*******************************************************************************

Function fn_TakeScreenShot()
	
	If screenshotFolder_name = "" Then
		screenshotFolder_name = "ScreenShots" & Split(Environment("reportWorkbook_path"),"ExecutionReport")(1)
		screenshotFolder_name = Environment("screenShot_Path") & "\" & screenshotFolder_name
		Call fn_CreateFoldersInThisPath(screenshotFolder_name)
	End If
	
	screenshotName = "ScreenShot__" & Now
	If Instr(screenshotName,":") Then
		screenshotName = Replace(screenshotName,":","_")
	End If
	If Instr(screenshotName,"/") Then
		screenshotName = Replace(screenshotName,"/","_")
	End If
	If Instr(screenshotName," ") Then
		screenshotName = Replace(screenshotName," ","__")
	End If
	
	screenshotName = screenshotFolder_name & "\" & screenshotName & ".png"
	
	
	Desktop.CaptureBitmap screenshotName,true
	
End Function




'*************************************************************************************************************************************************************************



Function AssociateObjectRepositories(strTempObjectRepositoryFolderPath)

	Set FSO2 = CreateObject("Scripting.FileSystemObject")
	
	Set getFolderName = FSO2.GetFolder(strTempObjectRepositoryFolderPath)
	Set FilesCount = getFolderName.Files
		
	If FilesCount.Count > 0  Then
		For each file in FilesCount
			RepositoriesCollection.Add(file)
		Next
	End If
	
	Set FSO2 = nothing

	
End Function


'*********************************************************************************************************************************************************************


Function GetDataFromSheet(strSheetName,strFieldName,strCondition)
	'Initialise required variables
	Dim strReferenceIdentifier
	Dim strConnectionString, strSql, objConn, objTestData, strDataValue
	
        	
	strFilePath = PathFinder.Locate(Environment("driverSheet"))
	'strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=2"""
    strConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + strFilePath + ";Extended Properties=""Excel 12.0 Xml;HDR=Yes;IMEX=2"""	
	Set objConn = CreateObject("ADODB.Connection")
	objConn.Open strConnectionString
	Set objTestData = CreateObject("ADODB.Recordset")	
	objTestData.CursorLocation = 3
	If strCondition <> "" Then
		strSql = "SELECT " & strFieldName & " from [" & strSheetName & "$] where " & strCondition
	Else
		strSql = "SELECT " & strFieldName & " from [" & strSheetName & "$]"
	End If
    

    objTestData.Open strSql, objConn

	intNoOfRecords = objTestData.RecordCount
	If (intNoOfRecords = 0) Then
		Err.Raise 2001, "Error", "No test data found for the current querry --> " & strSql
	ElseIF (intNoOfRecords > 1) Then 
        Do until objTestData.EOF
			On Error Resume Next
            strDataValue = strDataValue & Trim(objTestData.Fields.Item(0)) & ","
			objTestData.MoveNext
		Loop
        intLen = Len(strDataValue)
		For i = intLen to 0 Step -1
			strVal = Right(strDataValue,1)
			if(strVal = ",") Then
				strDataValue = Left(strDataValue,i-1)
			Else
				Exit For
			End if
		Next
    ElseIf (intNoOfRecords = 1) Then
		strDataValue = Trim(objTestData(0).Value) 
	End If

   	
    'Release all objects
	objTestData.Close
	objConn.Close
	Set objConn = Nothing
	Set objTestData = Nothing
	
	'Avoid returning Null value
	If IsNull(strDataValue) Then
		strDataValue = ""
	End If

	GetDataFromSheet = strDataValue
End Function


Function fn_BalloonToolTip(byval vIterationNo)

oNtfy.Icon=oIcon
oNtfy.BalloonTipIcon=oToolTip.Info
oNtfy.Visible=True
oNtfy.Text = "QTP Info." 'Balloon Tool Tip Text Name
oNtfy.BalloonTipTitle = "Execution Info" 'Balloon Tool Tip Title
oNtfy.BalloonTipText=vIterationNo
oNtfy.ShowBalloonTip(8000) 'This line displays current iteration No in system Tray
End Function

Function fn_Kill_Balloon 'This function kills all the objects.
oNtfy.Dispose() 'After calling this method you will not see the balloon icon in system tray
Set oIcon =Nothing
Set oTool =Nothing
Set oNtfy=Nothing
End Function 

